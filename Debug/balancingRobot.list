
balancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c908  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800ca18  0800ca18  0001ca18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce2c  0800ce2c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce2c  0800ce2c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce2c  0800ce2c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce2c  0800ce2c  0001ce2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce30  0800ce30  0001ce30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ce34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001e4  0800d018  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800d018  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ea8  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002995  00000000  00000000  000320b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00034a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00035c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ef5  00000000  00000000  00036db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015017  00000000  00000000  00050ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ff1  00000000  00000000  00065cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9cad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e84  00000000  00000000  000f9d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ca00 	.word	0x0800ca00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800ca00 	.word	0x0800ca00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <__aeabi_f2iz>:
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001064:	d30f      	bcc.n	8001086 <__aeabi_f2iz+0x2a>
 8001066:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d90d      	bls.n	800108c <__aeabi_f2iz+0x30>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001078:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	bf18      	it	ne
 8001082:	4240      	negne	r0, r0
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2iz+0x3a>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d105      	bne.n	80010a2 <__aeabi_f2iz+0x46>
 8001096:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800109a:	bf08      	it	eq
 800109c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr

080010a8 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b09b      	sub	sp, #108	; 0x6c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80010b6:	4b9d      	ldr	r3, [pc, #628]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fdef 	bl	8000ca4 <__aeabi_fmul>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461c      	mov	r4, r3
 80010ca:	4b99      	ldr	r3, [pc, #612]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fde7 	bl	8000ca4 <__aeabi_fmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4619      	mov	r1, r3
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff fcd8 	bl	8000a90 <__aeabi_fsub>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461c      	mov	r4, r3
 80010e4:	4b93      	ldr	r3, [pc, #588]	; (8001334 <MadgwickAHRSupdateIMU+0x28c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fdda 	bl	8000ca4 <__aeabi_fmul>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4620      	mov	r0, r4
 80010f6:	f7ff fccb 	bl	8000a90 <__aeabi_fsub>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdcf 	bl	8000ca4 <__aeabi_fmul>
 8001106:	4603      	mov	r3, r0
 8001108:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800110a:	4b8b      	ldr	r3, [pc, #556]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fdc7 	bl	8000ca4 <__aeabi_fmul>
 8001116:	4603      	mov	r3, r0
 8001118:	461c      	mov	r4, r3
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fdbf 	bl	8000ca4 <__aeabi_fmul>
 8001126:	4603      	mov	r3, r0
 8001128:	4619      	mov	r1, r3
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff fcb2 	bl	8000a94 <__addsf3>
 8001130:	4603      	mov	r3, r0
 8001132:	461c      	mov	r4, r3
 8001134:	4b7f      	ldr	r3, [pc, #508]	; (8001334 <MadgwickAHRSupdateIMU+0x28c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fdb2 	bl	8000ca4 <__aeabi_fmul>
 8001140:	4603      	mov	r3, r0
 8001142:	4619      	mov	r1, r3
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff fca3 	bl	8000a90 <__aeabi_fsub>
 800114a:	4603      	mov	r3, r0
 800114c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fda7 	bl	8000ca4 <__aeabi_fmul>
 8001156:	4603      	mov	r3, r0
 8001158:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800115a:	4b77      	ldr	r3, [pc, #476]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd9f 	bl	8000ca4 <__aeabi_fmul>
 8001166:	4603      	mov	r3, r0
 8001168:	461c      	mov	r4, r3
 800116a:	4b70      	ldr	r3, [pc, #448]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fd97 	bl	8000ca4 <__aeabi_fmul>
 8001176:	4603      	mov	r3, r0
 8001178:	4619      	mov	r1, r3
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff fc88 	bl	8000a90 <__aeabi_fsub>
 8001180:	4603      	mov	r3, r0
 8001182:	461c      	mov	r4, r3
 8001184:	4b6b      	ldr	r3, [pc, #428]	; (8001334 <MadgwickAHRSupdateIMU+0x28c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fd8a 	bl	8000ca4 <__aeabi_fmul>
 8001190:	4603      	mov	r3, r0
 8001192:	4619      	mov	r1, r3
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff fc7d 	bl	8000a94 <__addsf3>
 800119a:	4603      	mov	r3, r0
 800119c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fd7f 	bl	8000ca4 <__aeabi_fmul>
 80011a6:	4603      	mov	r3, r0
 80011a8:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fd77 	bl	8000ca4 <__aeabi_fmul>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461c      	mov	r4, r3
 80011ba:	4b5c      	ldr	r3, [pc, #368]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fd6f 	bl	8000ca4 <__aeabi_fmul>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff fc62 	bl	8000a94 <__addsf3>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461c      	mov	r4, r3
 80011d4:	4b56      	ldr	r3, [pc, #344]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68f9      	ldr	r1, [r7, #12]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd62 	bl	8000ca4 <__aeabi_fmul>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4619      	mov	r1, r3
 80011e4:	4620      	mov	r0, r4
 80011e6:	f7ff fc53 	bl	8000a90 <__aeabi_fsub>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fd57 	bl	8000ca4 <__aeabi_fmul>
 80011f6:	4603      	mov	r3, r0
 80011f8:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80011fa:	f04f 0100 	mov.w	r1, #0
 80011fe:	6838      	ldr	r0, [r7, #0]
 8001200:	f7ff fee4 	bl	8000fcc <__aeabi_fcmpeq>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d010      	beq.n	800122c <MadgwickAHRSupdateIMU+0x184>
 800120a:	f04f 0100 	mov.w	r1, #0
 800120e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001210:	f7ff fedc 	bl	8000fcc <__aeabi_fcmpeq>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d008      	beq.n	800122c <MadgwickAHRSupdateIMU+0x184>
 800121a:	f04f 0100 	mov.w	r1, #0
 800121e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001220:	f7ff fed4 	bl	8000fcc <__aeabi_fcmpeq>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 823c 	bne.w	80016a4 <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800122c:	6839      	ldr	r1, [r7, #0]
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f7ff fd38 	bl	8000ca4 <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	461c      	mov	r4, r3
 8001238:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800123a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800123c:	f7ff fd32 	bl	8000ca4 <__aeabi_fmul>
 8001240:	4603      	mov	r3, r0
 8001242:	4619      	mov	r1, r3
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff fc25 	bl	8000a94 <__addsf3>
 800124a:	4603      	mov	r3, r0
 800124c:	461c      	mov	r4, r3
 800124e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001250:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001252:	f7ff fd27 	bl	8000ca4 <__aeabi_fmul>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff fc1a 	bl	8000a94 <__addsf3>
 8001260:	4603      	mov	r3, r0
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fad0 	bl	8001808 <invSqrt>
 8001268:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 800126a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f7ff fd19 	bl	8000ca4 <__aeabi_fmul>
 8001272:	4603      	mov	r3, r0
 8001274:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8001276:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001278:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800127a:	f7ff fd13 	bl	8000ca4 <__aeabi_fmul>
 800127e:	4603      	mov	r3, r0
 8001280:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 8001282:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001284:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001286:	f7ff fd0d 	bl	8000ca4 <__aeabi_fmul>
 800128a:	4603      	mov	r3, r0
 800128c:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fbfd 	bl	8000a94 <__addsf3>
 800129a:	4603      	mov	r3, r0
 800129c:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fbf5 	bl	8000a94 <__addsf3>
 80012aa:	4603      	mov	r3, r0
 80012ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fbed 	bl	8000a94 <__addsf3>
 80012ba:	4603      	mov	r3, r0
 80012bc:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MadgwickAHRSupdateIMU+0x28c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fbe5 	bl	8000a94 <__addsf3>
 80012ca:	4603      	mov	r3, r0
 80012cc:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fce4 	bl	8000ca4 <__aeabi_fmul>
 80012dc:	4603      	mov	r3, r0
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fcdb 	bl	8000ca4 <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fcd2 	bl	8000ca4 <__aeabi_fmul>
 8001300:	4603      	mov	r3, r0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fcc9 	bl	8000ca4 <__aeabi_fmul>
 8001312:	4603      	mov	r3, r0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fcc0 	bl	8000ca4 <__aeabi_fmul>
 8001324:	4603      	mov	r3, r0
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
 8001328:	e008      	b.n	800133c <MadgwickAHRSupdateIMU+0x294>
 800132a:	bf00      	nop
 800132c:	20000200 	.word	0x20000200
 8001330:	20000204 	.word	0x20000204
 8001334:	20000208 	.word	0x20000208
 8001338:	20000004 	.word	0x20000004
		q0q0 = q0 * q0;
 800133c:	4b9a      	ldr	r3, [pc, #616]	; (80015a8 <MadgwickAHRSupdateIMU+0x500>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a99      	ldr	r2, [pc, #612]	; (80015a8 <MadgwickAHRSupdateIMU+0x500>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fcac 	bl	8000ca4 <__aeabi_fmul>
 800134c:	4603      	mov	r3, r0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8001350:	4b96      	ldr	r3, [pc, #600]	; (80015ac <MadgwickAHRSupdateIMU+0x504>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a95      	ldr	r2, [pc, #596]	; (80015ac <MadgwickAHRSupdateIMU+0x504>)
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fca2 	bl	8000ca4 <__aeabi_fmul>
 8001360:	4603      	mov	r3, r0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 8001364:	4b92      	ldr	r3, [pc, #584]	; (80015b0 <MadgwickAHRSupdateIMU+0x508>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a91      	ldr	r2, [pc, #580]	; (80015b0 <MadgwickAHRSupdateIMU+0x508>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc98 	bl	8000ca4 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8001378:	4b8e      	ldr	r3, [pc, #568]	; (80015b4 <MadgwickAHRSupdateIMU+0x50c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a8d      	ldr	r2, [pc, #564]	; (80015b4 <MadgwickAHRSupdateIMU+0x50c>)
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc8e 	bl	8000ca4 <__aeabi_fmul>
 8001388:	4603      	mov	r3, r0
 800138a:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800138c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800138e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001390:	f7ff fc88 	bl	8000ca4 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
 8001396:	461c      	mov	r4, r3
 8001398:	6839      	ldr	r1, [r7, #0]
 800139a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800139c:	f7ff fc82 	bl	8000ca4 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4620      	mov	r0, r4
 80013a6:	f7ff fb75 	bl	8000a94 <__addsf3>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461c      	mov	r4, r3
 80013ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013b2:	f7ff fc77 	bl	8000ca4 <__aeabi_fmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff fb6a 	bl	8000a94 <__addsf3>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461c      	mov	r4, r3
 80013c4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80013c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80013c8:	f7ff fc6c 	bl	8000ca4 <__aeabi_fmul>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff fb5d 	bl	8000a90 <__aeabi_fsub>
 80013d6:	4603      	mov	r3, r0
 80013d8:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80013da:	6a39      	ldr	r1, [r7, #32]
 80013dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013de:	f7ff fc61 	bl	8000ca4 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461c      	mov	r4, r3
 80013e6:	6839      	ldr	r1, [r7, #0]
 80013e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80013ea:	f7ff fc5b 	bl	8000ca4 <__aeabi_fmul>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4620      	mov	r0, r4
 80013f4:	f7ff fb4c 	bl	8000a90 <__aeabi_fsub>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461c      	mov	r4, r3
 80013fc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001402:	f7ff fc4f 	bl	8000ca4 <__aeabi_fmul>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	4b68      	ldr	r3, [pc, #416]	; (80015ac <MadgwickAHRSupdateIMU+0x504>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f7ff fc47 	bl	8000ca4 <__aeabi_fmul>
 8001416:	4603      	mov	r3, r0
 8001418:	4619      	mov	r1, r3
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff fb3a 	bl	8000a94 <__addsf3>
 8001420:	4603      	mov	r3, r0
 8001422:	461c      	mov	r4, r3
 8001424:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001426:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001428:	f7ff fc3c 	bl	8000ca4 <__aeabi_fmul>
 800142c:	4603      	mov	r3, r0
 800142e:	4619      	mov	r1, r3
 8001430:	4620      	mov	r0, r4
 8001432:	f7ff fb2d 	bl	8000a90 <__aeabi_fsub>
 8001436:	4603      	mov	r3, r0
 8001438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fb28 	bl	8000a90 <__aeabi_fsub>
 8001440:	4603      	mov	r3, r0
 8001442:	461c      	mov	r4, r3
 8001444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001446:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001448:	f7ff fc2c 	bl	8000ca4 <__aeabi_fmul>
 800144c:	4603      	mov	r3, r0
 800144e:	4619      	mov	r1, r3
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff fb1f 	bl	8000a94 <__addsf3>
 8001456:	4603      	mov	r3, r0
 8001458:	461c      	mov	r4, r3
 800145a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800145c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800145e:	f7ff fc21 	bl	8000ca4 <__aeabi_fmul>
 8001462:	4603      	mov	r3, r0
 8001464:	4619      	mov	r1, r3
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fb14 	bl	8000a94 <__addsf3>
 800146c:	4603      	mov	r3, r0
 800146e:	461c      	mov	r4, r3
 8001470:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001472:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001474:	f7ff fc16 	bl	8000ca4 <__aeabi_fmul>
 8001478:	4603      	mov	r3, r0
 800147a:	4619      	mov	r1, r3
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff fb09 	bl	8000a94 <__addsf3>
 8001482:	4603      	mov	r3, r0
 8001484:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001486:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800148a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800148c:	f7ff fc0a 	bl	8000ca4 <__aeabi_fmul>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <MadgwickAHRSupdateIMU+0x508>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f7ff fc02 	bl	8000ca4 <__aeabi_fmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461c      	mov	r4, r3
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80014a8:	f7ff fbfc 	bl	8000ca4 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff faef 	bl	8000a94 <__addsf3>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461c      	mov	r4, r3
 80014ba:	6a39      	ldr	r1, [r7, #32]
 80014bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80014be:	f7ff fbf1 	bl	8000ca4 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fae4 	bl	8000a94 <__addsf3>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461c      	mov	r4, r3
 80014d0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80014d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014d4:	f7ff fbe6 	bl	8000ca4 <__aeabi_fmul>
 80014d8:	4603      	mov	r3, r0
 80014da:	4619      	mov	r1, r3
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff fad7 	bl	8000a90 <__aeabi_fsub>
 80014e2:	4603      	mov	r3, r0
 80014e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fad2 	bl	8000a90 <__aeabi_fsub>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461c      	mov	r4, r3
 80014f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014f4:	f7ff fbd6 	bl	8000ca4 <__aeabi_fmul>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fac9 	bl	8000a94 <__addsf3>
 8001502:	4603      	mov	r3, r0
 8001504:	461c      	mov	r4, r3
 8001506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800150a:	f7ff fbcb 	bl	8000ca4 <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	4619      	mov	r1, r3
 8001512:	4620      	mov	r0, r4
 8001514:	f7ff fabe 	bl	8000a94 <__addsf3>
 8001518:	4603      	mov	r3, r0
 800151a:	461c      	mov	r4, r3
 800151c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800151e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001520:	f7ff fbc0 	bl	8000ca4 <__aeabi_fmul>
 8001524:	4603      	mov	r3, r0
 8001526:	4619      	mov	r1, r3
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff fab3 	bl	8000a94 <__addsf3>
 800152e:	4603      	mov	r3, r0
 8001530:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001532:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001538:	f7ff fbb4 	bl	8000ca4 <__aeabi_fmul>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MadgwickAHRSupdateIMU+0x50c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7ff fbac 	bl	8000ca4 <__aeabi_fmul>
 800154c:	4603      	mov	r3, r0
 800154e:	461c      	mov	r4, r3
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001554:	f7ff fba6 	bl	8000ca4 <__aeabi_fmul>
 8001558:	4603      	mov	r3, r0
 800155a:	4619      	mov	r1, r3
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff fa97 	bl	8000a90 <__aeabi_fsub>
 8001562:	4603      	mov	r3, r0
 8001564:	461c      	mov	r4, r3
 8001566:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800156a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800156c:	f7ff fb9a 	bl	8000ca4 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MadgwickAHRSupdateIMU+0x50c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	4610      	mov	r0, r2
 800157c:	f7ff fb92 	bl	8000ca4 <__aeabi_fmul>
 8001580:	4603      	mov	r3, r0
 8001582:	4619      	mov	r1, r3
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff fa85 	bl	8000a94 <__addsf3>
 800158a:	4603      	mov	r3, r0
 800158c:	461c      	mov	r4, r3
 800158e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001590:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001592:	f7ff fb87 	bl	8000ca4 <__aeabi_fmul>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff fa78 	bl	8000a90 <__aeabi_fsub>
 80015a0:	4603      	mov	r3, r0
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	e008      	b.n	80015b8 <MadgwickAHRSupdateIMU+0x510>
 80015a6:	bf00      	nop
 80015a8:	20000004 	.word	0x20000004
 80015ac:	20000200 	.word	0x20000200
 80015b0:	20000204 	.word	0x20000204
 80015b4:	20000208 	.word	0x20000208
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80015b8:	69f9      	ldr	r1, [r7, #28]
 80015ba:	69f8      	ldr	r0, [r7, #28]
 80015bc:	f7ff fb72 	bl	8000ca4 <__aeabi_fmul>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461c      	mov	r4, r3
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	69b8      	ldr	r0, [r7, #24]
 80015c8:	f7ff fb6c 	bl	8000ca4 <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fa5f 	bl	8000a94 <__addsf3>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461c      	mov	r4, r3
 80015da:	6979      	ldr	r1, [r7, #20]
 80015dc:	6978      	ldr	r0, [r7, #20]
 80015de:	f7ff fb61 	bl	8000ca4 <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff fa54 	bl	8000a94 <__addsf3>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461c      	mov	r4, r3
 80015f0:	6939      	ldr	r1, [r7, #16]
 80015f2:	6938      	ldr	r0, [r7, #16]
 80015f4:	f7ff fb56 	bl	8000ca4 <__aeabi_fmul>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7ff fa49 	bl	8000a94 <__addsf3>
 8001602:	4603      	mov	r3, r0
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f8ff 	bl	8001808 <invSqrt>
 800160a:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 800160c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800160e:	69f8      	ldr	r0, [r7, #28]
 8001610:	f7ff fb48 	bl	8000ca4 <__aeabi_fmul>
 8001614:	4603      	mov	r3, r0
 8001616:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8001618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800161a:	69b8      	ldr	r0, [r7, #24]
 800161c:	f7ff fb42 	bl	8000ca4 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8001624:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff fb3c 	bl	8000ca4 <__aeabi_fmul>
 800162c:	4603      	mov	r3, r0
 800162e:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8001630:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001632:	6938      	ldr	r0, [r7, #16]
 8001634:	f7ff fb36 	bl	8000ca4 <__aeabi_fmul>
 8001638:	4603      	mov	r3, r0
 800163a:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 800163c:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <MadgwickAHRSupdateIMU+0x748>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69f9      	ldr	r1, [r7, #28]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fb2e 	bl	8000ca4 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	4619      	mov	r1, r3
 800164c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800164e:	f7ff fa1f 	bl	8000a90 <__aeabi_fsub>
 8001652:	4603      	mov	r3, r0
 8001654:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8001656:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <MadgwickAHRSupdateIMU+0x748>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fb21 	bl	8000ca4 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
 8001664:	4619      	mov	r1, r3
 8001666:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001668:	f7ff fa12 	bl	8000a90 <__aeabi_fsub>
 800166c:	4603      	mov	r3, r0
 800166e:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8001670:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <MadgwickAHRSupdateIMU+0x748>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6979      	ldr	r1, [r7, #20]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fb14 	bl	8000ca4 <__aeabi_fmul>
 800167c:	4603      	mov	r3, r0
 800167e:	4619      	mov	r1, r3
 8001680:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001682:	f7ff fa05 	bl	8000a90 <__aeabi_fsub>
 8001686:	4603      	mov	r3, r0
 8001688:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 800168a:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <MadgwickAHRSupdateIMU+0x748>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6939      	ldr	r1, [r7, #16]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fb07 	bl	8000ca4 <__aeabi_fmul>
 8001696:	4603      	mov	r3, r0
 8001698:	4619      	mov	r1, r3
 800169a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800169c:	f7ff f9f8 	bl	8000a90 <__aeabi_fsub>
 80016a0:	4603      	mov	r3, r0
 80016a2:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80016a4:	4953      	ldr	r1, [pc, #332]	; (80017f4 <MadgwickAHRSupdateIMU+0x74c>)
 80016a6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80016a8:	f7ff fafc 	bl	8000ca4 <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f7ff f9ec 	bl	8000a94 <__addsf3>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 80016c2:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 80016c4:	494b      	ldr	r1, [pc, #300]	; (80017f4 <MadgwickAHRSupdateIMU+0x74c>)
 80016c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80016c8:	f7ff faec 	bl	8000ca4 <__aeabi_fmul>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f7ff f9dc 	bl	8000a94 <__addsf3>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b46      	ldr	r3, [pc, #280]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 80016e2:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 80016e4:	4943      	ldr	r1, [pc, #268]	; (80017f4 <MadgwickAHRSupdateIMU+0x74c>)
 80016e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80016e8:	f7ff fadc 	bl	8000ca4 <__aeabi_fmul>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b43      	ldr	r3, [pc, #268]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f7ff f9cc 	bl	8000a94 <__addsf3>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 8001702:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001704:	493b      	ldr	r1, [pc, #236]	; (80017f4 <MadgwickAHRSupdateIMU+0x74c>)
 8001706:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001708:	f7ff facc 	bl	8000ca4 <__aeabi_fmul>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7ff f9bc 	bl	8000a94 <__addsf3>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b38      	ldr	r3, [pc, #224]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 8001722:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001724:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a33      	ldr	r2, [pc, #204]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fab8 	bl	8000ca4 <__aeabi_fmul>
 8001734:	4603      	mov	r3, r0
 8001736:	461c      	mov	r4, r3
 8001738:	4b30      	ldr	r3, [pc, #192]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff faae 	bl	8000ca4 <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	4619      	mov	r1, r3
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff f9a1 	bl	8000a94 <__addsf3>
 8001752:	4603      	mov	r3, r0
 8001754:	461c      	mov	r4, r3
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fa9f 	bl	8000ca4 <__aeabi_fmul>
 8001766:	4603      	mov	r3, r0
 8001768:	4619      	mov	r1, r3
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff f992 	bl	8000a94 <__addsf3>
 8001770:	4603      	mov	r3, r0
 8001772:	461c      	mov	r4, r3
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a22      	ldr	r2, [pc, #136]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fa90 	bl	8000ca4 <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	4619      	mov	r1, r3
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff f983 	bl	8000a94 <__addsf3>
 800178e:	4603      	mov	r3, r0
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f839 	bl	8001808 <invSqrt>
 8001796:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fa80 	bl	8000ca4 <__aeabi_fmul>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 80017aa:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fa76 	bl	8000ca4 <__aeabi_fmul>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 80017be:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fa6c 	bl	8000ca4 <__aeabi_fmul>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 80017d2:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fa62 	bl	8000ca4 <__aeabi_fmul>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	376c      	adds	r7, #108	; 0x6c
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	3b03126f 	.word	0x3b03126f
 80017f8:	20000004 	.word	0x20000004
 80017fc:	20000200 	.word	0x20000200
 8001800:	20000204 	.word	0x20000204
 8001804:	20000208 	.word	0x20000208

08001808 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8001810:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fa45 	bl	8000ca4 <__aeabi_fmul>
 800181a:	4603      	mov	r3, r0
 800181c:	617b      	str	r3, [r7, #20]
	float y = x;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	105a      	asrs	r2, r3, #1
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <invSqrt+0x74>)
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	6979      	ldr	r1, [r7, #20]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa2f 	bl	8000ca4 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f7ff fa28 	bl	8000ca4 <__aeabi_fmul>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800185c:	f7ff f918 	bl	8000a90 <__aeabi_fsub>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f7ff fa1b 	bl	8000ca4 <__aeabi_fmul>
 800186e:	4603      	mov	r3, r0
 8001870:	613b      	str	r3, [r7, #16]
	return y;
 8001872:	693b      	ldr	r3, [r7, #16]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	5f3759df 	.word	0x5f3759df

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001884:	f001 fc58 	bl	8003138 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001888:	f000 f844 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188c:	f000 fb26 	bl	8001edc <MX_GPIO_Init>
  MX_DMA_Init();
 8001890:	f000 faf6 	bl	8001e80 <MX_DMA_Init>
  MX_I2C1_Init();
 8001894:	f000 f904 	bl	8001aa0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001898:	f000 f9c0 	bl	8001c1c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800189c:	f000 fa9c 	bl	8001dd8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80018a0:	f000 f92c 	bl	8001afc <MX_TIM1_Init>
  MX_ADC1_Init();
 80018a4:	f000 f892 	bl	80019cc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80018a8:	f000 fac0 	bl	8001e2c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80018ac:	f000 fa3a 	bl	8001d24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  InitMPU6050(&hi2c1);
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <main+0x74>)
 80018b2:	f001 fa2d 	bl	8002d10 <InitMPU6050>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&zntime, 1);
 80018b6:	2301      	movs	r3, #1
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <main+0x78>)
 80018ba:	2100      	movs	r1, #0
 80018bc:	480f      	ldr	r0, [pc, #60]	; (80018fc <main+0x7c>)
 80018be:	f006 fb23 	bl	8007f08 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018c2:	2108      	movs	r1, #8
 80018c4:	480e      	ldr	r0, [pc, #56]	; (8001900 <main+0x80>)
 80018c6:	f006 fa25 	bl	8007d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018ca:	2104      	movs	r1, #4
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <main+0x80>)
 80018ce:	f006 fa21 	bl	8007d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018d2:	2100      	movs	r1, #0
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <main+0x84>)
 80018d6:	f006 fa1d 	bl	8007d14 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80018da:	4809      	ldr	r0, [pc, #36]	; (8001900 <main+0x80>)
 80018dc:	f006 f978 	bl	8007bd0 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <main+0x88>)
 80018e2:	f001 fed5 	bl	8003690 <HAL_ADCEx_Calibration_Start>
  HAL_UART_Receive_IT(&huart3, &rxData, 1);
 80018e6:	2201      	movs	r2, #1
 80018e8:	4908      	ldr	r1, [pc, #32]	; (800190c <main+0x8c>)
 80018ea:	4809      	ldr	r0, [pc, #36]	; (8001910 <main+0x90>)
 80018ec:	f007 fd7e 	bl	80093ec <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <main+0x70>
 80018f2:	bf00      	nop
 80018f4:	20000280 	.word	0x20000280
 80018f8:	200004cc 	.word	0x200004cc
 80018fc:	20000360 	.word	0x20000360
 8001900:	20000318 	.word	0x20000318
 8001904:	200003a8 	.word	0x200003a8
 8001908:	2000020c 	.word	0x2000020c
 800190c:	200004f4 	.word	0x200004f4
 8001910:	20000478 	.word	0x20000478

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191e:	2228      	movs	r2, #40	; 0x28
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f008 f99a 	bl	8009c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001944:	2301      	movs	r3, #1
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001952:	2301      	movs	r3, #1
 8001954:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001956:	2302      	movs	r3, #2
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800195e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001960:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001964:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196a:	4618      	mov	r0, r3
 800196c:	f005 fb50 	bl	8007010 <HAL_RCC_OscConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001976:	f000 fc41 	bl	80021fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197a:	230f      	movs	r3, #15
 800197c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800198a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2102      	movs	r1, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fdbc 	bl	8007514 <HAL_RCC_ClockConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019a2:	f000 fc2b 	bl	80021fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019a6:	2302      	movs	r3, #2
 80019a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80019aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 ff46 	bl	8007844 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019be:	f000 fc1d 	bl	80021fc <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	3750      	adds	r7, #80	; 0x50
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <MX_ADC1_Init+0xcc>)
 80019e6:	4a2d      	ldr	r2, [pc, #180]	; (8001a9c <MX_ADC1_Init+0xd0>)
 80019e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <MX_ADC1_Init+0xcc>)
 80019ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <MX_ADC1_Init+0xcc>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <MX_ADC1_Init+0xcc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019fe:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <MX_ADC1_Init+0xcc>)
 8001a00:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001a04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <MX_ADC1_Init+0xcc>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <MX_ADC1_Init+0xcc>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a12:	4821      	ldr	r0, [pc, #132]	; (8001a98 <MX_ADC1_Init+0xcc>)
 8001a14:	f001 fbf2 	bl	80031fc <HAL_ADC_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 8001a1e:	f000 fbed 	bl	80021fc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8001a22:	2304      	movs	r3, #4
 8001a24:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001a32:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a36:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_ADC1_Init+0xcc>)
 8001a4a:	f001 ff5b 	bl	8003904 <HAL_ADCEx_InjectedConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001a54:	f000 fbd2 	bl	80021fc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001a58:	2305      	movs	r3, #5
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_ADC1_Init+0xcc>)
 8001a66:	f001 ff4d 	bl	8003904 <HAL_ADCEx_InjectedConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001a70:	f000 fbc4 	bl	80021fc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001a74:	2306      	movs	r3, #6
 8001a76:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_ADC1_Init+0xcc>)
 8001a82:	f001 ff3f 	bl	8003904 <HAL_ADCEx_InjectedConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001a8c:	f000 fbb6 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000020c 	.word	0x2000020c
 8001a9c:	40012400 	.word	0x40012400

08001aa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001aa6:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <MX_I2C1_Init+0x54>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001aac:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <MX_I2C1_Init+0x58>)
 8001aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001abe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ac2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	; (8001af0 <MX_I2C1_Init+0x50>)
 8001ade:	f002 fdff 	bl	80046e0 <HAL_I2C_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae8:	f000 fb88 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000280 	.word	0x20000280
 8001af4:	40005400 	.word	0x40005400
 8001af8:	00061a80 	.word	0x00061a80

08001afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b092      	sub	sp, #72	; 0x48
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2220      	movs	r2, #32
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f008 f898 	bl	8009c5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	; (8001c18 <MX_TIM1_Init+0x11c>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001b34:	2247      	movs	r2, #71	; 0x47
 8001b36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001b40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b46:	4b33      	ldr	r3, [pc, #204]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b4c:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b52:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b58:	482e      	ldr	r0, [pc, #184]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001b5a:	f006 f88b 	bl	8007c74 <HAL_TIM_PWM_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b64:	f000 fb4a 	bl	80021fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b74:	4619      	mov	r1, r3
 8001b76:	4827      	ldr	r0, [pc, #156]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001b78:	f007 fb2a 	bl	80091d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b82:	f000 fb3b 	bl	80021fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b86:	2360      	movs	r3, #96	; 0x60
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001bac:	f006 fcd2 	bl	8008554 <HAL_TIM_PWM_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001bb6:	f000 fb21 	bl	80021fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4814      	ldr	r0, [pc, #80]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001bc4:	f006 fcc6 	bl	8008554 <HAL_TIM_PWM_ConfigChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001bce:	f000 fb15 	bl	80021fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001bf6:	f007 fb49 	bl	800928c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001c00:	f000 fafc 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c04:	4803      	ldr	r0, [pc, #12]	; (8001c14 <MX_TIM1_Init+0x118>)
 8001c06:	f000 fce1 	bl	80025cc <HAL_TIM_MspPostInit>

}
 8001c0a:	bf00      	nop
 8001c0c:	3748      	adds	r7, #72	; 0x48
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000318 	.word	0x20000318
 8001c18:	40012c00 	.word	0x40012c00

08001c1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c32:	f107 0314 	add.w	r3, r7, #20
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c48:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001c4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001c52:	2247      	movs	r2, #71	; 0x47
 8001c54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001c5e:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001c62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c70:	482b      	ldr	r0, [pc, #172]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001c72:	f005 ff5d 	bl	8007b30 <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001c7c:	f000 fabe 	bl	80021fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c80:	4827      	ldr	r0, [pc, #156]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001c82:	f006 f8e9 	bl	8007e58 <HAL_TIM_IC_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001c8c:	f000 fab6 	bl	80021fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c90:	2304      	movs	r3, #4
 8001c92:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c94:	2350      	movs	r3, #80	; 0x50
 8001c96:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481e      	ldr	r0, [pc, #120]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001ca8:	f006 fd12 	bl	80086d0 <HAL_TIM_SlaveConfigSynchro>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001cb2:	f000 faa3 	bl	80021fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4816      	ldr	r0, [pc, #88]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001cc6:	f007 fa83 	bl	80091d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001cd0:	f000 fa94 	bl	80021fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001cec:	f006 fb9e 	bl	800842c <HAL_TIM_IC_ConfigChannel>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8001cf6:	f000 fa81 	bl	80021fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	2204      	movs	r2, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_TIM2_Init+0x104>)
 8001d0a:	f006 fb8f 	bl	800842c <HAL_TIM_IC_ConfigChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001d14:	f000 fa72 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	3730      	adds	r7, #48	; 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000360 	.word	0x20000360

08001d24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08a      	sub	sp, #40	; 0x28
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2a:	f107 0320 	add.w	r3, r7, #32
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	615a      	str	r2, [r3, #20]
 8001d44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001d48:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <MX_TIM3_Init+0xb0>)
 8001d4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001d4e:	2247      	movs	r2, #71	; 0x47
 8001d50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001d5a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001d68:	2280      	movs	r2, #128	; 0x80
 8001d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d6c:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001d6e:	f005 ff81 	bl	8007c74 <HAL_TIM_PWM_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d78:	f000 fa40 	bl	80021fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001d8c:	f007 fa20 	bl	80091d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d96:	f000 fa31 	bl	80021fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d9a:	2360      	movs	r3, #96	; 0x60
 8001d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001db2:	f006 fbcf 	bl	8008554 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001dbc:	f000 fa1e 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM3_Init+0xac>)
 8001dc2:	f000 fc03 	bl	80025cc <HAL_TIM_MspPostInit>

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200003a8 	.word	0x200003a8
 8001dd4:	40000400 	.word	0x40000400

08001dd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_USART2_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USART2_UART_Init+0x4c>)
 8001e10:	f007 fa9f 	bl	8009352 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f000 f9ef 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000434 	.word	0x20000434
 8001e28:	40004400 	.word	0x40004400

08001e2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <MX_USART3_UART_Init+0x50>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_USART3_UART_Init+0x4c>)
 8001e64:	f007 fa75 	bl	8009352 <HAL_UART_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e6e:	f000 f9c5 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000478 	.word	0x20000478
 8001e7c:	40004800 	.word	0x40004800

08001e80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <MX_DMA_Init+0x58>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <MX_DMA_Init+0x58>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6153      	str	r3, [r2, #20]
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_DMA_Init+0x58>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200b      	movs	r0, #11
 8001ea4:	f001 ff9f 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ea8:	200b      	movs	r0, #11
 8001eaa:	f001 ffb8 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f001 ff97 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001eb8:	200f      	movs	r0, #15
 8001eba:	f001 ffb0 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2011      	movs	r0, #17
 8001ec4:	f001 ff8f 	bl	8003de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001ec8:	2011      	movs	r0, #17
 8001eca:	f001 ffa8 	bl	8003e1e <HAL_NVIC_EnableIRQ>

}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000

08001edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef0:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <MX_GPIO_Init+0xb8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <MX_GPIO_Init+0xb8>)
 8001ef6:	f043 0320 	orr.w	r3, r3, #32
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <MX_GPIO_Init+0xb8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <MX_GPIO_Init+0xb8>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <MX_GPIO_Init+0xb8>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <MX_GPIO_Init+0xb8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <MX_GPIO_Init+0xb8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <MX_GPIO_Init+0xb8>)
 8001f26:	f043 0308 	orr.w	r3, r3, #8
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <MX_GPIO_Init+0xb8>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3e:	4816      	ldr	r0, [pc, #88]	; (8001f98 <MX_GPIO_Init+0xbc>)
 8001f40:	f002 fbb6 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR2_Pin|DIR1_Pin|EN1_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8001f4a:	4814      	ldr	r0, [pc, #80]	; (8001f9c <MX_GPIO_Init+0xc0>)
 8001f4c:	f002 fbb0 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN2_Pin */
  GPIO_InitStruct.Pin = EN2_Pin;
 8001f50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f56:	2301      	movs	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN2_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4619      	mov	r1, r3
 8001f68:	480b      	ldr	r0, [pc, #44]	; (8001f98 <MX_GPIO_Init+0xbc>)
 8001f6a:	f002 fa1d 	bl	80043a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin EN1_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|EN1_Pin;
 8001f6e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	4619      	mov	r1, r3
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_GPIO_Init+0xc0>)
 8001f88:	f002 fa0e 	bl	80043a8 <HAL_GPIO_Init>

}
 8001f8c:	bf00      	nop
 8001f8e:	3720      	adds	r7, #32
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010c00 	.word	0x40010c00
 8001f9c:	40010800 	.word	0x40010800

08001fa0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb0:	d136      	bne.n	8002020 <HAL_TIM_IC_CaptureCallback+0x80>
		HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_Address, ACCEL_XOUT_H_REG, 1, mpuData, 14);
 8001fb2:	230e      	movs	r3, #14
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_TIM_IC_CaptureCallback+0x88>)
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	223b      	movs	r2, #59	; 0x3b
 8001fbe:	21d0      	movs	r1, #208	; 0xd0
 8001fc0:	481a      	ldr	r0, [pc, #104]	; (800202c <HAL_TIM_IC_CaptureCallback+0x8c>)
 8001fc2:	f002 fdcb 	bl	8004b5c <HAL_I2C_Mem_Read_DMA>
        speedCounter++;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001fce:	6013      	str	r3, [r2, #0]
        turnCounter++;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4a17      	ldr	r2, [pc, #92]	; (8002034 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001fd8:	6013      	str	r3, [r2, #0]
        adcCounter++;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	4a15      	ldr	r2, [pc, #84]	; (8002038 <HAL_TIM_IC_CaptureCallback+0x98>)
 8001fe2:	6013      	str	r3, [r2, #0]
        if (speedCounter > 50){
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b32      	cmp	r3, #50	; 0x32
 8001fea:	d905      	bls.n	8001ff8 <HAL_TIM_IC_CaptureCallback+0x58>
        	setSpeed = 0;
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_TIM_IC_CaptureCallback+0x9c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
            speedCounter = 0;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_TIM_IC_CaptureCallback+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
        }
        if (turnCounter > 50){
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_TIM_IC_CaptureCallback+0x94>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b32      	cmp	r3, #50	; 0x32
 8001ffe:	d905      	bls.n	800200c <HAL_TIM_IC_CaptureCallback+0x6c>
        	turn = 0;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
        	turnCounter = 0;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
        }
        if (adcCounter > 150) {
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_TIM_IC_CaptureCallback+0x98>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b96      	cmp	r3, #150	; 0x96
 8002012:	d905      	bls.n	8002020 <HAL_TIM_IC_CaptureCallback+0x80>
        HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002014:	480b      	ldr	r0, [pc, #44]	; (8002044 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002016:	f001 fbe7 	bl	80037e8 <HAL_ADCEx_InjectedStart_IT>
        adcCounter = 0;
 800201a:	4b07      	ldr	r3, [pc, #28]	; (8002038 <HAL_TIM_IC_CaptureCallback+0x98>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
        }
	}
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	200004bc 	.word	0x200004bc
 800202c:	20000280 	.word	0x20000280
 8002030:	200004d8 	.word	0x200004d8
 8002034:	200004e4 	.word	0x200004e4
 8002038:	200004dc 	.word	0x200004dc
 800203c:	200004ec 	.word	0x200004ec
 8002040:	200004d0 	.word	0x200004d0
 8002044:	2000020c 	.word	0x2000020c

08002048 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  //ki = HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_2) / 50;
  //kd = (float)HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_3) / 2000;
  //kpv = (float)HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_1) / 200;
  //kiv = (float)HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_2) / 25000;
  //kdv = (float)HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_3) / 10;
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
	...

0800205c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	  pitch = MPU6050Read(mpuData);
 8002064:	4832      	ldr	r0, [pc, #200]	; (8002130 <HAL_I2C_MemRxCpltCallback+0xd4>)
 8002066:	f000 feab 	bl	8002dc0 <MPU6050Read>
 800206a:	4603      	mov	r3, r0
 800206c:	4a31      	ldr	r2, [pc, #196]	; (8002134 <HAL_I2C_MemRxCpltCallback+0xd8>)
 800206e:	6013      	str	r3, [r2, #0]
	  if (startCounter < 2100) {
 8002070:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f640 0233 	movw	r2, #2099	; 0x833
 8002078:	4293      	cmp	r3, r2
 800207a:	d804      	bhi.n	8002086 <HAL_I2C_MemRxCpltCallback+0x2a>
		  startCounter++;
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_I2C_MemRxCpltCallback+0xdc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3301      	adds	r3, #1
 8002082:	4a2d      	ldr	r2, [pc, #180]	; (8002138 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8002084:	6013      	str	r3, [r2, #0]
	  }
	  if (startCounter > 500 && pitch > -1000) {
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800208e:	d907      	bls.n	80020a0 <HAL_I2C_MemRxCpltCallback+0x44>
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8002098:	dd02      	ble.n	80020a0 <HAL_I2C_MemRxCpltCallback+0x44>
		  isOn = 1;
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <HAL_I2C_MemRxCpltCallback+0xe0>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
	  }
	  if (isOn) {
 80020a0:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_I2C_MemRxCpltCallback+0xe0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d03f      	beq.n	8002128 <HAL_I2C_MemRxCpltCallback+0xcc>
		  speed = angleRegulation(pitch, setAng);
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_I2C_MemRxCpltCallback+0xd8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a24      	ldr	r2, [pc, #144]	; (8002140 <HAL_I2C_MemRxCpltCallback+0xe4>)
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fcd4 	bl	8002a60 <angleRegulation>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a22      	ldr	r2, [pc, #136]	; (8002144 <HAL_I2C_MemRxCpltCallback+0xe8>)
 80020bc:	6013      	str	r3, [r2, #0]
		  stepperMotor(speed, turn);
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_I2C_MemRxCpltCallback+0xe8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a21      	ldr	r2, [pc, #132]	; (8002148 <HAL_I2C_MemRxCpltCallback+0xec>)
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 ff59 	bl	8002f80 <stepperMotor>
		  int filtSetSpeed = (1-SET_SPEED_FILT)*prevSetSpeed + SET_SPEED_FILT*setSpeed;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <HAL_I2C_MemRxCpltCallback+0xf0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fd92 	bl	8000bfc <__aeabi_i2f>
 80020d8:	4603      	mov	r3, r0
 80020da:	491d      	ldr	r1, [pc, #116]	; (8002150 <HAL_I2C_MemRxCpltCallback+0xf4>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fde1 	bl	8000ca4 <__aeabi_fmul>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461c      	mov	r4, r3
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_I2C_MemRxCpltCallback+0xf8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fd86 	bl	8000bfc <__aeabi_i2f>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4919      	ldr	r1, [pc, #100]	; (8002158 <HAL_I2C_MemRxCpltCallback+0xfc>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fdd5 	bl	8000ca4 <__aeabi_fmul>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4619      	mov	r1, r3
 80020fe:	4620      	mov	r0, r4
 8002100:	f7fe fcc8 	bl	8000a94 <__addsf3>
 8002104:	4603      	mov	r3, r0
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ffa8 	bl	800105c <__aeabi_f2iz>
 800210c:	4603      	mov	r3, r0
 800210e:	60fb      	str	r3, [r7, #12]
		  prevSetSpeed = filtSetSpeed;
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <HAL_I2C_MemRxCpltCallback+0xf0>)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6013      	str	r3, [r2, #0]
	 	  setAng = speedRegulation(speed, filtSetSpeed);
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_I2C_MemRxCpltCallback+0xe8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fd65 	bl	8002bec <speedRegulation>
 8002122:	4603      	mov	r3, r0
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8002126:	6013      	str	r3, [r2, #0]
	  //sprintf(uartMsg, "$%.3f %d %.3f;", (float)(kp), (int)(ki), (float)(kd));
	  //sprintf(uartMsg, "$%.3f %.3f %.3f;", (float)(kpv), (float)(kiv), (float)(kdv));
	  //HAL_UART_Transmit(&huart2, (uint8_t*)uartMsg, sizeof(uartMsg), HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), HAL_MAX_DELAY);

}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}
 8002130:	200004bc 	.word	0x200004bc
 8002134:	200004f8 	.word	0x200004f8
 8002138:	200004e0 	.word	0x200004e0
 800213c:	200004f0 	.word	0x200004f0
 8002140:	200004e8 	.word	0x200004e8
 8002144:	200004d4 	.word	0x200004d4
 8002148:	200004d0 	.word	0x200004d0
 800214c:	200004fc 	.word	0x200004fc
 8002150:	3f7ae148 	.word	0x3f7ae148
 8002154:	200004ec 	.word	0x200004ec
 8002158:	3ca3d70a 	.word	0x3ca3d70a

0800215c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_UART_RxCpltCallback+0x80>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d131      	bne.n	80021d2 <HAL_UART_RxCpltCallback+0x76>
	//int str = atoi(rxData);
	//sprintf(uartMsg, "%d", str);
	//HAL_UART_Transmit(&huart2, rxData, 1, HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart3, rxData, 1, HAL_MAX_DELAY);
	//HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), HAL_MAX_DELAY);
    if(rxData==70) // Ascii value of 'N' is 78 (N for NO)
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_UART_RxCpltCallback+0x84>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b46      	cmp	r3, #70	; 0x46
 8002174:	d107      	bne.n	8002186 <HAL_UART_RxCpltCallback+0x2a>
    {
    	setSpeed = 1000;
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_UART_RxCpltCallback+0x88>)
 8002178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800217c:	601a      	str	r2, [r3, #0]
    	//HAL_UART_Transmit(&huart2, (uint8_t*)"F\n", sizeof("F\n"), HAL_MAX_DELAY);
    	speedCounter = 0;
 800217e:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_UART_RxCpltCallback+0x8c>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e020      	b.n	80021c8 <HAL_UART_RxCpltCallback+0x6c>
    }
    else if (rxData==66) // Ascii value of 'Y' is 89 (Y for YES)
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_UART_RxCpltCallback+0x84>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b42      	cmp	r3, #66	; 0x42
 800218c:	d106      	bne.n	800219c <HAL_UART_RxCpltCallback+0x40>
    {
    	setSpeed = -1000;
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <HAL_UART_RxCpltCallback+0x88>)
 8002190:	4a16      	ldr	r2, [pc, #88]	; (80021ec <HAL_UART_RxCpltCallback+0x90>)
 8002192:	601a      	str	r2, [r3, #0]
    	//HAL_UART_Transmit(&huart2, (uint8_t*)"B\n", sizeof("B\n"), HAL_MAX_DELAY);
    	speedCounter = 0;
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_UART_RxCpltCallback+0x8c>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e015      	b.n	80021c8 <HAL_UART_RxCpltCallback+0x6c>
    }
    else if (rxData==50) // Ascii value of 'Y' is 89 (Y for YES)
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_UART_RxCpltCallback+0x84>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b32      	cmp	r3, #50	; 0x32
 80021a2:	d107      	bne.n	80021b4 <HAL_UART_RxCpltCallback+0x58>
    	{
           	turn = -200;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_UART_RxCpltCallback+0x94>)
 80021a6:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 80021aa:	601a      	str	r2, [r3, #0]
           	//HAL_UART_Transmit(&huart2, (uint8_t*)"L\n", sizeof("L\n"), HAL_MAX_DELAY);
           	turnCounter = 0;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_UART_RxCpltCallback+0x98>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e009      	b.n	80021c8 <HAL_UART_RxCpltCallback+0x6c>
        }
    else if (rxData==49) // Ascii value of 'Y' is 89 (Y for YES)
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_UART_RxCpltCallback+0x84>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b31      	cmp	r3, #49	; 0x31
 80021ba:	d105      	bne.n	80021c8 <HAL_UART_RxCpltCallback+0x6c>
    	{
           	turn = 200;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_UART_RxCpltCallback+0x94>)
 80021be:	22c8      	movs	r2, #200	; 0xc8
 80021c0:	601a      	str	r2, [r3, #0]
           	//HAL_UART_Transmit(&huart2, (uint8_t*)"R\n", sizeof("R\n"), HAL_MAX_DELAY);
           	turnCounter = 0;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_UART_RxCpltCallback+0x98>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    	}
        HAL_UART_Receive_IT(&huart3, &rxData, 1); // Enabling interrupt receive again
 80021c8:	2201      	movs	r2, #1
 80021ca:	4905      	ldr	r1, [pc, #20]	; (80021e0 <HAL_UART_RxCpltCallback+0x84>)
 80021cc:	480a      	ldr	r0, [pc, #40]	; (80021f8 <HAL_UART_RxCpltCallback+0x9c>)
 80021ce:	f007 f90d 	bl	80093ec <HAL_UART_Receive_IT>
  }
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40004800 	.word	0x40004800
 80021e0:	200004f4 	.word	0x200004f4
 80021e4:	200004ec 	.word	0x200004ec
 80021e8:	200004d8 	.word	0x200004d8
 80021ec:	fffffc18 	.word	0xfffffc18
 80021f0:	200004d0 	.word	0x200004d0
 80021f4:	200004e4 	.word	0x200004e4
 80021f8:	20000478 	.word	0x20000478

080021fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
}
 8002202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002204:	e7fe      	b.n	8002204 <Error_Handler+0x8>
	...

08002208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_MspInit+0x5c>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_MspInit+0x5c>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6193      	str	r3, [r2, #24]
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_MspInit+0x5c>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_MspInit+0x5c>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_MspInit+0x5c>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_MspInit+0x5c>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_MspInit+0x60>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_MspInit+0x60>)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000

0800226c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <HAL_ADC_MspInit+0xcc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d151      	bne.n	8002330 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800228c:	4b2b      	ldr	r3, [pc, #172]	; (800233c <HAL_ADC_MspInit+0xd0>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a2a      	ldr	r2, [pc, #168]	; (800233c <HAL_ADC_MspInit+0xd0>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_ADC_MspInit+0xd0>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a4:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_ADC_MspInit+0xd0>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <HAL_ADC_MspInit+0xd0>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_ADC_MspInit+0xd0>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = KP_Pin|KI_Pin|KD_Pin;
 80022bc:	2370      	movs	r3, #112	; 0x70
 80022be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022c0:	2303      	movs	r3, #3
 80022c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	4619      	mov	r1, r3
 80022ca:	481d      	ldr	r0, [pc, #116]	; (8002340 <HAL_ADC_MspInit+0xd4>)
 80022cc:	f002 f86c 	bl	80043a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 80022d2:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_ADC_MspInit+0xdc>)
 80022d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 80022ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 80022f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 8002300:	2200      	movs	r2, #0
 8002302:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002304:	480f      	ldr	r0, [pc, #60]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 8002306:	f001 fda5 	bl	8003e54 <HAL_DMA_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002310:	f7ff ff74 	bl	80021fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 8002318:	621a      	str	r2, [r3, #32]
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_ADC_MspInit+0xd8>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	2012      	movs	r0, #18
 8002326:	f001 fd5e 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800232a:	2012      	movs	r0, #18
 800232c:	f001 fd77 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002330:	bf00      	nop
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40012400 	.word	0x40012400
 800233c:	40021000 	.word	0x40021000
 8002340:	40010800 	.word	0x40010800
 8002344:	2000023c 	.word	0x2000023c
 8002348:	40020008 	.word	0x40020008

0800234c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a30      	ldr	r2, [pc, #192]	; (8002428 <HAL_I2C_MspInit+0xdc>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d159      	bne.n	8002420 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236c:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_I2C_MspInit+0xe0>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a2e      	ldr	r2, [pc, #184]	; (800242c <HAL_I2C_MspInit+0xe0>)
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	6193      	str	r3, [r2, #24]
 8002378:	4b2c      	ldr	r3, [pc, #176]	; (800242c <HAL_I2C_MspInit+0xe0>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002384:	23c0      	movs	r3, #192	; 0xc0
 8002386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002388:	2312      	movs	r3, #18
 800238a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	4619      	mov	r1, r3
 8002396:	4826      	ldr	r0, [pc, #152]	; (8002430 <HAL_I2C_MspInit+0xe4>)
 8002398:	f002 f806 	bl	80043a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <HAL_I2C_MspInit+0xe0>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_I2C_MspInit+0xe0>)
 80023a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023a6:	61d3      	str	r3, [r2, #28]
 80023a8:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_I2C_MspInit+0xe0>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <HAL_I2C_MspInit+0xec>)
 80023b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d2:	4b18      	ldr	r3, [pc, #96]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80023e4:	4813      	ldr	r0, [pc, #76]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023e6:	f001 fd35 	bl	8003e54 <HAL_DMA_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80023f0:	f7ff ff04 	bl	80021fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <HAL_I2C_MspInit+0xe8>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	201f      	movs	r0, #31
 8002406:	f001 fcee 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800240a:	201f      	movs	r0, #31
 800240c:	f001 fd07 	bl	8003e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	2020      	movs	r0, #32
 8002416:	f001 fce6 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800241a:	2020      	movs	r0, #32
 800241c:	f001 fcff 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002420:	bf00      	nop
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40005400 	.word	0x40005400
 800242c:	40021000 	.word	0x40021000
 8002430:	40010c00 	.word	0x40010c00
 8002434:	200002d4 	.word	0x200002d4
 8002438:	40020080 	.word	0x40020080

0800243c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <HAL_TIM_PWM_MspInit+0x88>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d124      	bne.n	8002498 <HAL_TIM_PWM_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_TIM_PWM_MspInit+0x8c>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <HAL_TIM_PWM_MspInit+0x8c>)
 8002454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002458:	6193      	str	r3, [r2, #24]
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_TIM_PWM_MspInit+0x8c>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002466:	2200      	movs	r2, #0
 8002468:	2100      	movs	r1, #0
 800246a:	2018      	movs	r0, #24
 800246c:	f001 fcbb 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002470:	2018      	movs	r0, #24
 8002472:	f001 fcd4 	bl	8003e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	2019      	movs	r0, #25
 800247c:	f001 fcb3 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002480:	2019      	movs	r0, #25
 8002482:	f001 fccc 	bl	8003e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	201a      	movs	r0, #26
 800248c:	f001 fcab 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002490:	201a      	movs	r0, #26
 8002492:	f001 fcc4 	bl	8003e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002496:	e010      	b.n	80024ba <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <HAL_TIM_PWM_MspInit+0x90>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10b      	bne.n	80024ba <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_TIM_PWM_MspInit+0x8c>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <HAL_TIM_PWM_MspInit+0x8c>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_TIM_PWM_MspInit+0x8c>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40000400 	.word	0x40000400

080024d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ee:	d15e      	bne.n	80025ae <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_TIM_Base_MspInit+0xe8>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <HAL_TIM_Base_MspInit+0xe8>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	61d3      	str	r3, [r2, #28]
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_TIM_Base_MspInit+0xe8>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_TIM_Base_MspInit+0xe8>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <HAL_TIM_Base_MspInit+0xe8>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_TIM_Base_MspInit+0xe8>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4821      	ldr	r0, [pc, #132]	; (80025bc <HAL_TIM_Base_MspInit+0xec>)
 8002536:	f001 ff37 	bl	80043a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_TIM_Base_MspInit+0xf0>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_TIM_Base_MspInit+0xf0>)
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	6053      	str	r3, [r2, #4]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800255e:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 8002560:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_TIM_Base_MspInit+0xf8>)
 8002562:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002564:	4b17      	ldr	r3, [pc, #92]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 8002566:	2200      	movs	r2, #0
 8002568:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 8002578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800257c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 8002580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002584:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 8002588:	2220      	movs	r2, #32
 800258a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800258c:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002592:	480c      	ldr	r0, [pc, #48]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 8002594:	f001 fc5e 	bl	8003e54 <HAL_DMA_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 800259e:	f7ff fe2d 	bl	80021fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 80025a6:	625a      	str	r2, [r3, #36]	; 0x24
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <HAL_TIM_Base_MspInit+0xf4>)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	; 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010800 	.word	0x40010800
 80025c0:	40010000 	.word	0x40010000
 80025c4:	200003f0 	.word	0x200003f0
 80025c8:	40020058 	.word	0x40020058

080025cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a28      	ldr	r2, [pc, #160]	; (8002688 <HAL_TIM_MspPostInit+0xbc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d119      	bne.n	8002620 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_TIM_MspPostInit+0xc0>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <HAL_TIM_MspPostInit+0xc0>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_TIM_MspPostInit+0xc0>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002604:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2302      	movs	r3, #2
 8002610:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	481d      	ldr	r0, [pc, #116]	; (8002690 <HAL_TIM_MspPostInit+0xc4>)
 800261a:	f001 fec5 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800261e:	e02e      	b.n	800267e <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1b      	ldr	r2, [pc, #108]	; (8002694 <HAL_TIM_MspPostInit+0xc8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d129      	bne.n	800267e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_TIM_MspPostInit+0xc0>)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	4a17      	ldr	r2, [pc, #92]	; (800268c <HAL_TIM_MspPostInit+0xc0>)
 8002630:	f043 0308 	orr.w	r3, r3, #8
 8002634:	6193      	str	r3, [r2, #24]
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_TIM_MspPostInit+0xc0>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002642:	2310      	movs	r3, #16
 8002644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2302      	movs	r3, #2
 800264c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	4810      	ldr	r0, [pc, #64]	; (8002698 <HAL_TIM_MspPostInit+0xcc>)
 8002656:	f001 fea7 	bl	80043a8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_TIM_MspPostInit+0xd0>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
 8002678:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_TIM_MspPostInit+0xd0>)
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	6053      	str	r3, [r2, #4]
}
 800267e:	bf00      	nop
 8002680:	3728      	adds	r7, #40	; 0x28
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40021000 	.word	0x40021000
 8002690:	40010800 	.word	0x40010800
 8002694:	40000400 	.word	0x40000400
 8002698:	40010c00 	.word	0x40010c00
 800269c:	40010000 	.word	0x40010000

080026a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0318 	add.w	r3, r7, #24
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3b      	ldr	r2, [pc, #236]	; (80027a8 <HAL_UART_MspInit+0x108>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d130      	bne.n	8002722 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <HAL_UART_MspInit+0x10c>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4a39      	ldr	r2, [pc, #228]	; (80027ac <HAL_UART_MspInit+0x10c>)
 80026c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ca:	61d3      	str	r3, [r2, #28]
 80026cc:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_UART_MspInit+0x10c>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b34      	ldr	r3, [pc, #208]	; (80027ac <HAL_UART_MspInit+0x10c>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a33      	ldr	r2, [pc, #204]	; (80027ac <HAL_UART_MspInit+0x10c>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b31      	ldr	r3, [pc, #196]	; (80027ac <HAL_UART_MspInit+0x10c>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026f0:	2304      	movs	r3, #4
 80026f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 0318 	add.w	r3, r7, #24
 8002700:	4619      	mov	r1, r3
 8002702:	482b      	ldr	r0, [pc, #172]	; (80027b0 <HAL_UART_MspInit+0x110>)
 8002704:	f001 fe50 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002708:	2308      	movs	r3, #8
 800270a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	4619      	mov	r1, r3
 800271a:	4825      	ldr	r0, [pc, #148]	; (80027b0 <HAL_UART_MspInit+0x110>)
 800271c:	f001 fe44 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002720:	e03e      	b.n	80027a0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a23      	ldr	r2, [pc, #140]	; (80027b4 <HAL_UART_MspInit+0x114>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d139      	bne.n	80027a0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800272c:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <HAL_UART_MspInit+0x10c>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <HAL_UART_MspInit+0x10c>)
 8002732:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002736:	61d3      	str	r3, [r2, #28]
 8002738:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <HAL_UART_MspInit+0x10c>)
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_UART_MspInit+0x10c>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_UART_MspInit+0x10c>)
 800274a:	f043 0308 	orr.w	r3, r3, #8
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b16      	ldr	r3, [pc, #88]	; (80027ac <HAL_UART_MspInit+0x10c>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800275c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276a:	f107 0318 	add.w	r3, r7, #24
 800276e:	4619      	mov	r1, r3
 8002770:	4811      	ldr	r0, [pc, #68]	; (80027b8 <HAL_UART_MspInit+0x118>)
 8002772:	f001 fe19 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800277a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	f107 0318 	add.w	r3, r7, #24
 8002788:	4619      	mov	r1, r3
 800278a:	480b      	ldr	r0, [pc, #44]	; (80027b8 <HAL_UART_MspInit+0x118>)
 800278c:	f001 fe0c 	bl	80043a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2100      	movs	r1, #0
 8002794:	2027      	movs	r0, #39	; 0x27
 8002796:	f001 fb26 	bl	8003de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800279a:	2027      	movs	r0, #39	; 0x27
 800279c:	f001 fb3f 	bl	8003e1e <HAL_NVIC_EnableIRQ>
}
 80027a0:	bf00      	nop
 80027a2:	3728      	adds	r7, #40	; 0x28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40004400 	.word	0x40004400
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010800 	.word	0x40010800
 80027b4:	40004800 	.word	0x40004800
 80027b8:	40010c00 	.word	0x40010c00

080027bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <NMI_Handler+0x4>

080027c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <HardFault_Handler+0x4>

080027c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <MemManage_Handler+0x4>

080027ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <BusFault_Handler+0x4>

080027d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <UsageFault_Handler+0x4>

080027da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002802:	f000 fcdf 	bl	80031c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <DMA1_Channel1_IRQHandler+0x10>)
 8002812:	f001 fc89 	bl	8004128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000023c 	.word	0x2000023c

08002820 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <DMA1_Channel5_IRQHandler+0x10>)
 8002826:	f001 fc7f 	bl	8004128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200003f0 	.word	0x200003f0

08002834 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <DMA1_Channel7_IRQHandler+0x10>)
 800283a:	f001 fc75 	bl	8004128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200002d4 	.word	0x200002d4

08002848 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <ADC1_2_IRQHandler+0x10>)
 800284e:	f000 fdad 	bl	80033ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000020c 	.word	0x2000020c

0800285c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <TIM1_BRK_IRQHandler+0x10>)
 8002862:	f005 fcdb 	bl	800821c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000318 	.word	0x20000318

08002870 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <TIM1_UP_IRQHandler+0x10>)
 8002876:	f005 fcd1 	bl	800821c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000318 	.word	0x20000318

08002884 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <TIM1_TRG_COM_IRQHandler+0x10>)
 800288a:	f005 fcc7 	bl	800821c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000318 	.word	0x20000318

08002898 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <I2C1_EV_IRQHandler+0x10>)
 800289e:	f002 fadb 	bl	8004e58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000280 	.word	0x20000280

080028ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80028b0:	4802      	ldr	r0, [pc, #8]	; (80028bc <I2C1_ER_IRQHandler+0x10>)
 80028b2:	f002 fc42 	bl	800513a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000280 	.word	0x20000280

080028c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <USART3_IRQHandler+0x10>)
 80028c6:	f006 fdc1 	bl	800944c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000478 	.word	0x20000478

080028d4 <_getpid>:
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	2301      	movs	r3, #1
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <_kill>:
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
 80028ec:	f007 f98c 	bl	8009c08 <__errno>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2216      	movs	r2, #22
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <_exit>:
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	f04f 31ff 	mov.w	r1, #4294967295
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffe7 	bl	80028e2 <_kill>
 8002914:	e7fe      	b.n	8002914 <_exit+0x12>

08002916 <_read>:
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	e00a      	b.n	800293e <_read+0x28>
 8002928:	f3af 8000 	nop.w
 800292c:	4601      	mov	r1, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	60ba      	str	r2, [r7, #8]
 8002934:	b2ca      	uxtb	r2, r1
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3301      	adds	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	429a      	cmp	r2, r3
 8002944:	dbf0      	blt.n	8002928 <_read+0x12>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_write>:
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e009      	b.n	8002976 <_write+0x26>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	60ba      	str	r2, [r7, #8]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f3af 8000 	nop.w
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3301      	adds	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	dbf1      	blt.n	8002962 <_write+0x12>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <_close>:
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <_fstat>:
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	2300      	movs	r3, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <_isatty>:
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	2301      	movs	r3, #1
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <_lseek>:
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	2300      	movs	r3, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <_sbrk>:
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <_sbrk+0x5c>)
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <_sbrk+0x60>)
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <_sbrk+0x22>
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <_sbrk+0x64>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <_sbrk+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d207      	bcs.n	8002a28 <_sbrk+0x40>
 8002a18:	f007 f8f6 	bl	8009c08 <__errno>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	220c      	movs	r2, #12
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e009      	b.n	8002a3c <_sbrk+0x54>
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <_sbrk+0x64>)
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20005000 	.word	0x20005000
 8002a48:	00000400 	.word	0x00000400
 8002a4c:	20000500 	.word	0x20000500
 8002a50:	20000530 	.word	0x20000530

08002a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <angleRegulation>:

static int prevSpeed = 0;
static int prevSpeedErr = 0;
static int integSpeed = 0;

int angleRegulation(int pitch, int setAng) {
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
    int angErr = pitch + setAng;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
    int filtAngErr = (1 - ANG_DIFF_FILT)*prevAngErr + ANG_DIFF_FILT*angErr;
 8002a72:	4b52      	ldr	r3, [pc, #328]	; (8002bbc <angleRegulation+0x15c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f8c0 	bl	8000bfc <__aeabi_i2f>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4950      	ldr	r1, [pc, #320]	; (8002bc0 <angleRegulation+0x160>)
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe f90f 	bl	8000ca4 <__aeabi_fmul>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461c      	mov	r4, r3
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7fe f8b6 	bl	8000bfc <__aeabi_i2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	494c      	ldr	r1, [pc, #304]	; (8002bc4 <angleRegulation+0x164>)
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe f905 	bl	8000ca4 <__aeabi_fmul>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7fd fff8 	bl	8000a94 <__addsf3>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe fad8 	bl	800105c <__aeabi_f2iz>
 8002aac:	4603      	mov	r3, r0
 8002aae:	613b      	str	r3, [r7, #16]
    prevAngErr = filtAngErr;
 8002ab0:	4a42      	ldr	r2, [pc, #264]	; (8002bbc <angleRegulation+0x15c>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6013      	str	r3, [r2, #0]

    int prop = angErr;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	60fb      	str	r3, [r7, #12]
    integAng += (angErr * DELTA_TIME);
 8002aba:	4b43      	ldr	r3, [pc, #268]	; (8002bc8 <angleRegulation+0x168>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f89c 	bl	8000bfc <__aeabi_i2f>
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7fe f898 	bl	8000bfc <__aeabi_i2f>
 8002acc:	4603      	mov	r3, r0
 8002ace:	493f      	ldr	r1, [pc, #252]	; (8002bcc <angleRegulation+0x16c>)
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe f8e7 	bl	8000ca4 <__aeabi_fmul>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7fd ffda 	bl	8000a94 <__addsf3>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe faba 	bl	800105c <__aeabi_f2iz>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <angleRegulation+0x168>)
 8002aec:	6013      	str	r3, [r2, #0]
    if (integAng > 700) {
 8002aee:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <angleRegulation+0x168>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002af6:	dd03      	ble.n	8002b00 <angleRegulation+0xa0>
    	integAng = 700;
 8002af8:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <angleRegulation+0x168>)
 8002afa:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002afe:	601a      	str	r2, [r3, #0]
    }
    if (integAng < -700) {
 8002b00:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <angleRegulation+0x168>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 8002b08:	da02      	bge.n	8002b10 <angleRegulation+0xb0>
    	integAng = -700;
 8002b0a:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <angleRegulation+0x168>)
 8002b0c:	4a30      	ldr	r2, [pc, #192]	; (8002bd0 <angleRegulation+0x170>)
 8002b0e:	601a      	str	r2, [r3, #0]
    }
    int diff = (filtAngErr - prevFiltAngErr) / DELTA_TIME;
 8002b10:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <angleRegulation+0x174>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe f86f 	bl	8000bfc <__aeabi_i2f>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	492a      	ldr	r1, [pc, #168]	; (8002bcc <angleRegulation+0x16c>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe f972 	bl	8000e0c <__aeabi_fdiv>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe fa96 	bl	800105c <__aeabi_f2iz>
 8002b30:	4603      	mov	r3, r0
 8002b32:	60bb      	str	r3, [r7, #8]
    prevFiltAngErr = filtAngErr;
 8002b34:	4a27      	ldr	r2, [pc, #156]	; (8002bd4 <angleRegulation+0x174>)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	6013      	str	r3, [r2, #0]
    if (angErr > MAX_ANGLE || angErr < -MAX_ANGLE) {
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b40:	4293      	cmp	r3, r2
 8002b42:	dc03      	bgt.n	8002b4c <angleRegulation+0xec>
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <angleRegulation+0x178>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	da01      	bge.n	8002b50 <angleRegulation+0xf0>
    	return 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e030      	b.n	8002bb2 <angleRegulation+0x152>
    }

    return ((int)(prop*K_ANG_PROP) + (int)(integAng*K_ANG_INTEG) + (int)(diff*K_ANG_DIFF)) / 10;
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7fe f853 	bl	8000bfc <__aeabi_i2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4920      	ldr	r1, [pc, #128]	; (8002bdc <angleRegulation+0x17c>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe f8a2 	bl	8000ca4 <__aeabi_fmul>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe fa7a 	bl	800105c <__aeabi_f2iz>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <angleRegulation+0x168>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe f844 	bl	8000bfc <__aeabi_i2f>
 8002b74:	4603      	mov	r3, r0
 8002b76:	491a      	ldr	r1, [pc, #104]	; (8002be0 <angleRegulation+0x180>)
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe f893 	bl	8000ca4 <__aeabi_fmul>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fa6b 	bl	800105c <__aeabi_f2iz>
 8002b86:	4603      	mov	r3, r0
 8002b88:	441c      	add	r4, r3
 8002b8a:	68b8      	ldr	r0, [r7, #8]
 8002b8c:	f7fe f836 	bl	8000bfc <__aeabi_i2f>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4914      	ldr	r1, [pc, #80]	; (8002be4 <angleRegulation+0x184>)
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f885 	bl	8000ca4 <__aeabi_fmul>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fa5d 	bl	800105c <__aeabi_f2iz>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4423      	add	r3, r4
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <angleRegulation+0x188>)
 8002ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8002bac:	1092      	asrs	r2, r2, #2
 8002bae:	17db      	asrs	r3, r3, #31
 8002bb0:	1ad3      	subs	r3, r2, r3

}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000504 	.word	0x20000504
 8002bc0:	3f7d70a4 	.word	0x3f7d70a4
 8002bc4:	3c23d70a 	.word	0x3c23d70a
 8002bc8:	2000050c 	.word	0x2000050c
 8002bcc:	3b03126f 	.word	0x3b03126f
 8002bd0:	fffffd44 	.word	0xfffffd44
 8002bd4:	20000508 	.word	0x20000508
 8002bd8:	ffffd8f0 	.word	0xffffd8f0
 8002bdc:	3fcccccd 	.word	0x3fcccccd
 8002be0:	41c80000 	.word	0x41c80000
 8002be4:	3d1fbe77 	.word	0x3d1fbe77
 8002be8:	66666667 	.word	0x66666667

08002bec <speedRegulation>:

int speedRegulation(int speed, int setSpeed) {
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
	//filtSpeed = (1-SPEED_FILT)*prevSpeed + SPEED_FILT*speed;
	//prevSpeed = filtSpeed;
	int speedErr = speed - setSpeed;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
	int filtSpeedErr = (1-SPEED_FILT)*prevSpeed + SPEED_FILT*speedErr;
 8002bfe:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <speedRegulation+0xfc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fffa 	bl	8000bfc <__aeabi_i2f>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4938      	ldr	r1, [pc, #224]	; (8002cec <speedRegulation+0x100>)
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe f849 	bl	8000ca4 <__aeabi_fmul>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461c      	mov	r4, r3
 8002c16:	6978      	ldr	r0, [r7, #20]
 8002c18:	f7fd fff0 	bl	8000bfc <__aeabi_i2f>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	4934      	ldr	r1, [pc, #208]	; (8002cf0 <speedRegulation+0x104>)
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe f83f 	bl	8000ca4 <__aeabi_fmul>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7fd ff32 	bl	8000a94 <__addsf3>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fa12 	bl	800105c <__aeabi_f2iz>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	613b      	str	r3, [r7, #16]
	prevSpeed = filtSpeedErr;
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <speedRegulation+0xfc>)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	6013      	str	r3, [r2, #0]
	int prop = filtSpeedErr;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	60fb      	str	r3, [r7, #12]
	int diff = filtSpeedErr - prevSpeedErr;
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <speedRegulation+0x108>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	60bb      	str	r3, [r7, #8]
	prevSpeedErr = filtSpeedErr;
 8002c50:	4a28      	ldr	r2, [pc, #160]	; (8002cf4 <speedRegulation+0x108>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6013      	str	r3, [r2, #0]
	integSpeed += speed - setSpeed;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	1ad2      	subs	r2, r2, r3
 8002c5c:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <speedRegulation+0x10c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <speedRegulation+0x10c>)
 8002c64:	6013      	str	r3, [r2, #0]
	if (integSpeed > 400000) {
 8002c66:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <speedRegulation+0x10c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <speedRegulation+0x110>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	dd02      	ble.n	8002c76 <speedRegulation+0x8a>
		integSpeed = 400000;
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <speedRegulation+0x10c>)
 8002c72:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <speedRegulation+0x110>)
 8002c74:	601a      	str	r2, [r3, #0]
	}
	if (integSpeed < -400000) {
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <speedRegulation+0x10c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <speedRegulation+0x114>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	da02      	bge.n	8002c86 <speedRegulation+0x9a>
		integSpeed = -400000;
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <speedRegulation+0x10c>)
 8002c82:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <speedRegulation+0x114>)
 8002c84:	601a      	str	r2, [r3, #0]
	}

	return prop*K_SPEED_PROP + integSpeed*K_SPEED_INTEG + diff*K_SPEED_DIFF;
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f7fd ffb8 	bl	8000bfc <__aeabi_i2f>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	491d      	ldr	r1, [pc, #116]	; (8002d04 <speedRegulation+0x118>)
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe f807 	bl	8000ca4 <__aeabi_fmul>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461c      	mov	r4, r3
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <speedRegulation+0x10c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd ffac 	bl	8000bfc <__aeabi_i2f>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4918      	ldr	r1, [pc, #96]	; (8002d08 <speedRegulation+0x11c>)
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fffb 	bl	8000ca4 <__aeabi_fmul>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f7fd feee 	bl	8000a94 <__addsf3>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461c      	mov	r4, r3
 8002cbc:	68b8      	ldr	r0, [r7, #8]
 8002cbe:	f7fd ff9d 	bl	8000bfc <__aeabi_i2f>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4911      	ldr	r1, [pc, #68]	; (8002d0c <speedRegulation+0x120>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd ffec 	bl	8000ca4 <__aeabi_fmul>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7fd fedf 	bl	8000a94 <__addsf3>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe f9bf 	bl	800105c <__aeabi_f2iz>
 8002cde:	4603      	mov	r3, r0
	//return prop*kpv + integSpeed*kiv + diff*kdv;
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd90      	pop	{r4, r7, pc}
 8002ce8:	20000510 	.word	0x20000510
 8002cec:	3f7851ec 	.word	0x3f7851ec
 8002cf0:	3cf5c28f 	.word	0x3cf5c28f
 8002cf4:	20000514 	.word	0x20000514
 8002cf8:	20000518 	.word	0x20000518
 8002cfc:	00061a80 	.word	0x00061a80
 8002d00:	fff9e580 	.word	0xfff9e580
 8002d04:	40e00000 	.word	0x40e00000
 8002d08:	3d343958 	.word	0x3d343958
 8002d0c:	3ca3d70a 	.word	0x3ca3d70a

08002d10 <InitMPU6050>:
#include "../constants.h"
#include <stm32f1xx_hal.h>
#include "../MadgwickAHRS.h"
#include <math.h>

 void InitMPU6050(I2C_HandleTypeDef *i2c) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af04      	add	r7, sp, #16
 8002d16:	6078      	str	r0, [r7, #4]
        uint8_t mpuData;
        mpuData = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(i2c, MPU6050_Address, 0x6B, 1, &mpuData, 1, 500); //dont sleep
 8002d1c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d20:	9302      	str	r3, [sp, #8]
 8002d22:	2301      	movs	r3, #1
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	f107 030f 	add.w	r3, r7, #15
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	226b      	movs	r2, #107	; 0x6b
 8002d30:	21d0      	movs	r1, #208	; 0xd0
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f001 fe18 	bl	8004968 <HAL_I2C_Mem_Write>

        mpuData = 0x15;
 8002d38:	2315      	movs	r3, #21
 8002d3a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(i2c, MPU6050_Address, 0x19, 1, &mpuData, 1, 500); //  sample rate = 8kHz / 16 = 500Hz
 8002d3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d40:	9302      	str	r3, [sp, #8]
 8002d42:	2301      	movs	r3, #1
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	f107 030f 	add.w	r3, r7, #15
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	2219      	movs	r2, #25
 8002d50:	21d0      	movs	r1, #208	; 0xd0
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f001 fe08 	bl	8004968 <HAL_I2C_Mem_Write>

        mpuData = 0x18;
 8002d58:	2318      	movs	r3, #24
 8002d5a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(i2c, MPU6050_Address, 0x1B, 1, &mpuData, 1, 500); //  gyro full scale = +/- 2000dps
 8002d5c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d60:	9302      	str	r3, [sp, #8]
 8002d62:	2301      	movs	r3, #1
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	f107 030f 	add.w	r3, r7, #15
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	221b      	movs	r2, #27
 8002d70:	21d0      	movs	r1, #208	; 0xd0
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f001 fdf8 	bl	8004968 <HAL_I2C_Mem_Write>

        mpuData = 0x08;
 8002d78:	2308      	movs	r3, #8
 8002d7a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(i2c, MPU6050_Address, 0x1C, 1, &mpuData, 1, 500); //  accelerometer full scale = +/- 4g
 8002d7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d80:	9302      	str	r3, [sp, #8]
 8002d82:	2301      	movs	r3, #1
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	f107 030f 	add.w	r3, r7, #15
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	221c      	movs	r2, #28
 8002d90:	21d0      	movs	r1, #208	; 0xd0
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f001 fde8 	bl	8004968 <HAL_I2C_Mem_Write>

        mpuData = 0x01;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
        HAL_I2C_Mem_Write(i2c, MPU6050_Address, 0x38, 1, &mpuData, 1, 500); //  enable INTA interrupt*/
 8002d9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002da0:	9302      	str	r3, [sp, #8]
 8002da2:	2301      	movs	r3, #1
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	f107 030f 	add.w	r3, r7, #15
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	2301      	movs	r3, #1
 8002dae:	2238      	movs	r2, #56	; 0x38
 8002db0:	21d0      	movs	r1, #208	; 0xd0
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f001 fdd8 	bl	8004968 <HAL_I2C_Mem_Write>
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <MPU6050Read>:

 int MPU6050Read(uint8_t *mpuData) {
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b08f      	sub	sp, #60	; 0x3c
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	6078      	str	r0, [r7, #4]
   ///////////////////////////склейка/////////////////
 	int16_t AccelX = (int16_t)(mpuData[0] << 8 | mpuData[1]);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	b21a      	sxth	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b21b      	sxth	r3, r3
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	85fb      	strh	r3, [r7, #46]	; 0x2e
 	int16_t AccelY = (int16_t)(mpuData[2] << 8 | mpuData[3]);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3302      	adds	r3, #2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	b21a      	sxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3303      	adds	r3, #3
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b21b      	sxth	r3, r3
 8002dee:	4313      	orrs	r3, r2
 8002df0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 	int16_t AccelZ = (int16_t)(mpuData[4] << 8 | mpuData[5]);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	b21a      	sxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3305      	adds	r3, #5
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b21b      	sxth	r3, r3
 8002e04:	4313      	orrs	r3, r2
 8002e06:	857b      	strh	r3, [r7, #42]	; 0x2a
 	int16_t GyroX = (int16_t)(mpuData[8] << 8 | mpuData[9]);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	b21a      	sxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3309      	adds	r3, #9
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	853b      	strh	r3, [r7, #40]	; 0x28
 	int16_t GyroY = (int16_t)(mpuData[10] << 8 | mpuData[11]);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	330a      	adds	r3, #10
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b21a      	sxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	330b      	adds	r3, #11
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b21b      	sxth	r3, r3
 8002e30:	4313      	orrs	r3, r2
 8002e32:	84fb      	strh	r3, [r7, #38]	; 0x26
 	int16_t GyroZ = (int16_t)(mpuData[12] << 8 | mpuData[13]);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	330c      	adds	r3, #12
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	b21a      	sxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	330d      	adds	r3, #13
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	4313      	orrs	r3, r2
 8002e48:	84bb      	strh	r3, [r7, #36]	; 0x24
 /////////////////////////////обработка////////////////////
     float accel_x = AccelX / 8192.0f;
 8002e4a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fed4 	bl	8000bfc <__aeabi_i2f>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd ffd6 	bl	8000e0c <__aeabi_fdiv>
 8002e60:	4603      	mov	r3, r0
 8002e62:	623b      	str	r3, [r7, #32]
     float accel_y = AccelY / 8192.0f;
 8002e64:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fec7 	bl	8000bfc <__aeabi_i2f>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd ffc9 	bl	8000e0c <__aeabi_fdiv>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	61fb      	str	r3, [r7, #28]
     float accel_z = AccelZ / 8192.0f;
 8002e7e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd feba 	bl	8000bfc <__aeabi_i2f>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd ffbc 	bl	8000e0c <__aeabi_fdiv>
 8002e94:	4603      	mov	r3, r0
 8002e96:	61bb      	str	r3, [r7, #24]
     float gyro_x = GyroX / 939.650784f;
 8002e98:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fead 	bl	8000bfc <__aeabi_i2f>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	492f      	ldr	r1, [pc, #188]	; (8002f64 <MPU6050Read+0x1a4>)
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd ffb0 	bl	8000e0c <__aeabi_fdiv>
 8002eac:	4603      	mov	r3, r0
 8002eae:	617b      	str	r3, [r7, #20]
     float gyro_y = GyroY / 939.650784f;
 8002eb0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fea1 	bl	8000bfc <__aeabi_i2f>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4929      	ldr	r1, [pc, #164]	; (8002f64 <MPU6050Read+0x1a4>)
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd ffa4 	bl	8000e0c <__aeabi_fdiv>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	613b      	str	r3, [r7, #16]
     float gyro_z = GyroZ / 939.650784f;
 8002ec8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd fe95 	bl	8000bfc <__aeabi_i2f>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4923      	ldr	r1, [pc, #140]	; (8002f64 <MPU6050Read+0x1a4>)
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd ff98 	bl	8000e0c <__aeabi_fdiv>
 8002edc:	4603      	mov	r3, r0
 8002ede:	60fb      	str	r3, [r7, #12]
  /////////////////////////вычисление////////////////////
     MadgwickAHRSupdateIMU(gyro_z, gyro_y, -gyro_x, accel_z, accel_y, -accel_x);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	6939      	ldr	r1, [r7, #16]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7fe f8d6 	bl	80010a8 <MadgwickAHRSupdateIMU>

     return (asinf(-2.f * (q1*q3 - q2*q0))) * 100000 + 5500;
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <MPU6050Read+0x1a8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1a      	ldr	r2, [pc, #104]	; (8002f6c <MPU6050Read+0x1ac>)
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fecc 	bl	8000ca4 <__aeabi_fmul>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461c      	mov	r4, r3
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <MPU6050Read+0x1b0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <MPU6050Read+0x1b4>)
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fec2 	bl	8000ca4 <__aeabi_fmul>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4619      	mov	r1, r3
 8002f24:	4620      	mov	r0, r4
 8002f26:	f7fd fdb3 	bl	8000a90 <__aeabi_fsub>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd feb7 	bl	8000ca4 <__aeabi_fmul>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f009 fba5 	bl	800c688 <asinf>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	490d      	ldr	r1, [pc, #52]	; (8002f78 <MPU6050Read+0x1b8>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd feae 	bl	8000ca4 <__aeabi_fmul>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	490c      	ldr	r1, [pc, #48]	; (8002f7c <MPU6050Read+0x1bc>)
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fda1 	bl	8000a94 <__addsf3>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe f881 	bl	800105c <__aeabi_f2iz>
 8002f5a:	4603      	mov	r3, r0
 }
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3734      	adds	r7, #52	; 0x34
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd90      	pop	{r4, r7, pc}
 8002f64:	446ae9a6 	.word	0x446ae9a6
 8002f68:	20000200 	.word	0x20000200
 8002f6c:	20000208 	.word	0x20000208
 8002f70:	20000204 	.word	0x20000204
 8002f74:	20000004 	.word	0x20000004
 8002f78:	47c35000 	.word	0x47c35000
 8002f7c:	45abe000 	.word	0x45abe000

08002f80 <stepperMotor>:
#include <stm32f1xx_hal.h>
#include <main.h>

void stepperMotor(int speed, int turn) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
	if (speed > 3500) {
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002f90:	4293      	cmp	r3, r2
 8002f92:	dd02      	ble.n	8002f9a <stepperMotor+0x1a>
		speed = 3500;
 8002f94:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002f98:	607b      	str	r3, [r7, #4]
	}
	if (speed < -3500) {
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4d      	ldr	r2, [pc, #308]	; (80030d4 <stepperMotor+0x154>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	da01      	bge.n	8002fa6 <stepperMotor+0x26>
		speed = -3500;
 8002fa2:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <stepperMotor+0x154>)
 8002fa4:	607b      	str	r3, [r7, #4]
	}
	int leftSpeed = speed + turn;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	61fb      	str	r3, [r7, #28]
	int rightSpeed = speed - turn;
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	61bb      	str	r3, [r7, #24]

	if (rightSpeed < 15 && rightSpeed > 0) {
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b0e      	cmp	r3, #14
 8002fba:	dc04      	bgt.n	8002fc6 <stepperMotor+0x46>
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dd01      	ble.n	8002fc6 <stepperMotor+0x46>
		rightSpeed = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
	}
	if (rightSpeed > -15 && rightSpeed < 0) {
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f113 0f0e 	cmn.w	r3, #14
 8002fcc:	db04      	blt.n	8002fd8 <stepperMotor+0x58>
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da01      	bge.n	8002fd8 <stepperMotor+0x58>
		rightSpeed = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
	}
	if (leftSpeed < 15 && leftSpeed > 0) {
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b0e      	cmp	r3, #14
 8002fdc:	dc04      	bgt.n	8002fe8 <stepperMotor+0x68>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dd01      	ble.n	8002fe8 <stepperMotor+0x68>
		leftSpeed = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
	}
	if (leftSpeed > -15 && leftSpeed < 0) {
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f113 0f0e 	cmn.w	r3, #14
 8002fee:	db04      	blt.n	8002ffa <stepperMotor+0x7a>
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da01      	bge.n	8002ffa <stepperMotor+0x7a>
		leftSpeed = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
	}
	int rightPeriod;
	int leftPeriod;

	if (rightSpeed > 0) {
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	dd0b      	ble.n	8003018 <stepperMotor+0x98>
		HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 8003000:	2201      	movs	r2, #1
 8003002:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003006:	4834      	ldr	r0, [pc, #208]	; (80030d8 <stepperMotor+0x158>)
 8003008:	f001 fb52 	bl	80046b0 <HAL_GPIO_WritePin>
		rightPeriod = 65000/rightSpeed;
 800300c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fb92 f3f3 	sdiv	r3, r2, r3
 8003016:	617b      	str	r3, [r7, #20]
	}
    if (rightSpeed < 0) {
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	da0a      	bge.n	8003034 <stepperMotor+0xb4>
    	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 800301e:	2200      	movs	r2, #0
 8003020:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003024:	482c      	ldr	r0, [pc, #176]	; (80030d8 <stepperMotor+0x158>)
 8003026:	f001 fb43 	bl	80046b0 <HAL_GPIO_WritePin>
		rightPeriod = 65000/-rightSpeed;
 800302a:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <stepperMotor+0x15c>)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003032:	617b      	str	r3, [r7, #20]
	}
    if (leftSpeed > 0) {
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	dd0b      	ble.n	8003052 <stepperMotor+0xd2>
    	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_SET);
 800303a:	2201      	movs	r2, #1
 800303c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003040:	4825      	ldr	r0, [pc, #148]	; (80030d8 <stepperMotor+0x158>)
 8003042:	f001 fb35 	bl	80046b0 <HAL_GPIO_WritePin>
    	leftPeriod = 65000/leftSpeed;
 8003046:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003050:	613b      	str	r3, [r7, #16]
    }
    if (leftSpeed < 0) {
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	2b00      	cmp	r3, #0
 8003056:	da0a      	bge.n	800306e <stepperMotor+0xee>
    	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 8003058:	2200      	movs	r2, #0
 800305a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800305e:	481e      	ldr	r0, [pc, #120]	; (80030d8 <stepperMotor+0x158>)
 8003060:	f001 fb26 	bl	80046b0 <HAL_GPIO_WritePin>
    	leftPeriod = 65000/-leftSpeed;
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <stepperMotor+0x15c>)
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fb92 f3f3 	sdiv	r3, r2, r3
 800306c:	613b      	str	r3, [r7, #16]
	}
    if (leftSpeed == 0 || rightSpeed == 0) {
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <stepperMotor+0xfa>
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <stepperMotor+0x108>
    	TIM1->CCR2 = leftPeriod;
 800307a:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <stepperMotor+0x160>)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	6393      	str	r3, [r2, #56]	; 0x38
    	TIM3->CCR1 = rightPeriod;
 8003080:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <stepperMotor+0x164>)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	6353      	str	r3, [r2, #52]	; 0x34
        return;
 8003086:	e021      	b.n	80030cc <stepperMotor+0x14c>
    }
    HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8003088:	2200      	movs	r2, #0
 800308a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800308e:	4812      	ldr	r0, [pc, #72]	; (80030d8 <stepperMotor+0x158>)
 8003090:	f001 fb0e 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8003094:	2200      	movs	r2, #0
 8003096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800309a:	4813      	ldr	r0, [pc, #76]	; (80030e8 <stepperMotor+0x168>)
 800309c:	f001 fb08 	bl	80046b0 <HAL_GPIO_WritePin>
    int pwmL = leftPeriod / 2;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	0fda      	lsrs	r2, r3, #31
 80030a4:	4413      	add	r3, r2
 80030a6:	105b      	asrs	r3, r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
    int pwmR = rightPeriod / 2;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	0fda      	lsrs	r2, r3, #31
 80030ae:	4413      	add	r3, r2
 80030b0:	105b      	asrs	r3, r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]

    TIM1->ARR = leftPeriod;
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <stepperMotor+0x160>)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM3->ARR = rightPeriod;
 80030ba:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <stepperMotor+0x164>)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM1->CCR2 = pwmL;
 80030c0:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <stepperMotor+0x160>)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6393      	str	r3, [r2, #56]	; 0x38
    TIM3->CCR1 = pwmR;
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <stepperMotor+0x164>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6353      	str	r3, [r2, #52]	; 0x34
}
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	fffff254 	.word	0xfffff254
 80030d8:	40010800 	.word	0x40010800
 80030dc:	ffff0218 	.word	0xffff0218
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40010c00 	.word	0x40010c00

080030ec <Reset_Handler>:
 80030ec:	480c      	ldr	r0, [pc, #48]	; (8003120 <LoopFillZerobss+0x12>)
 80030ee:	490d      	ldr	r1, [pc, #52]	; (8003124 <LoopFillZerobss+0x16>)
 80030f0:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <LoopFillZerobss+0x1a>)
 80030f2:	2300      	movs	r3, #0
 80030f4:	e002      	b.n	80030fc <LoopCopyDataInit>

080030f6 <CopyDataInit>:
 80030f6:	58d4      	ldr	r4, [r2, r3]
 80030f8:	50c4      	str	r4, [r0, r3]
 80030fa:	3304      	adds	r3, #4

080030fc <LoopCopyDataInit>:
 80030fc:	18c4      	adds	r4, r0, r3
 80030fe:	428c      	cmp	r4, r1
 8003100:	d3f9      	bcc.n	80030f6 <CopyDataInit>
 8003102:	4a0a      	ldr	r2, [pc, #40]	; (800312c <LoopFillZerobss+0x1e>)
 8003104:	4c0a      	ldr	r4, [pc, #40]	; (8003130 <LoopFillZerobss+0x22>)
 8003106:	2300      	movs	r3, #0
 8003108:	e001      	b.n	800310e <LoopFillZerobss>

0800310a <FillZerobss>:
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	3204      	adds	r2, #4

0800310e <LoopFillZerobss>:
 800310e:	42a2      	cmp	r2, r4
 8003110:	d3fb      	bcc.n	800310a <FillZerobss>
 8003112:	f7ff fc9f 	bl	8002a54 <SystemInit>
 8003116:	f006 fd7d 	bl	8009c14 <__libc_init_array>
 800311a:	f7fe fbb1 	bl	8001880 <main>
 800311e:	4770      	bx	lr
 8003120:	20000000 	.word	0x20000000
 8003124:	200001e4 	.word	0x200001e4
 8003128:	0800ce34 	.word	0x0800ce34
 800312c:	200001e4 	.word	0x200001e4
 8003130:	20000530 	.word	0x20000530

08003134 <CAN1_RX1_IRQHandler>:
 8003134:	e7fe      	b.n	8003134 <CAN1_RX1_IRQHandler>
	...

08003138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_Init+0x28>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_Init+0x28>)
 8003142:	f043 0310 	orr.w	r3, r3, #16
 8003146:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003148:	2003      	movs	r0, #3
 800314a:	f000 fe41 	bl	8003dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800314e:	200f      	movs	r0, #15
 8003150:	f000 f808 	bl	8003164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003154:	f7ff f858 	bl	8002208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40022000 	.word	0x40022000

08003164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_InitTick+0x54>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_InitTick+0x58>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317a:	fbb3 f3f1 	udiv	r3, r3, r1
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fe59 	bl	8003e3a <HAL_SYSTICK_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e00e      	b.n	80031b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d80a      	bhi.n	80031ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003198:	2200      	movs	r2, #0
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f000 fe21 	bl	8003de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a4:	4a06      	ldr	r2, [pc, #24]	; (80031c0 <HAL_InitTick+0x5c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000008 	.word	0x20000008
 80031bc:	20000010 	.word	0x20000010
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_IncTick+0x1c>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_IncTick+0x20>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	4a03      	ldr	r2, [pc, #12]	; (80031e4 <HAL_IncTick+0x20>)
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	20000010 	.word	0x20000010
 80031e4:	2000051c 	.word	0x2000051c

080031e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return uwTick;
 80031ec:	4b02      	ldr	r3, [pc, #8]	; (80031f8 <HAL_GetTick+0x10>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	2000051c 	.word	0x2000051c

080031fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e0be      	b.n	800339c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	2b00      	cmp	r3, #0
 800322a:	d109      	bne.n	8003240 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff f816 	bl	800226c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f9e3 	bl	800360c <ADC_ConversionStop_Disable>
 8003246:	4603      	mov	r3, r0
 8003248:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 8099 	bne.w	800338a <HAL_ADC_Init+0x18e>
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 8095 	bne.w	800338a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003264:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003268:	f023 0302 	bic.w	r3, r3, #2
 800326c:	f043 0202 	orr.w	r2, r3, #2
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800327c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7b1b      	ldrb	r3, [r3, #12]
 8003282:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003284:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4313      	orrs	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003294:	d003      	beq.n	800329e <HAL_ADC_Init+0xa2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d102      	bne.n	80032a4 <HAL_ADC_Init+0xa8>
 800329e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a2:	e000      	b.n	80032a6 <HAL_ADC_Init+0xaa>
 80032a4:	2300      	movs	r3, #0
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7d1b      	ldrb	r3, [r3, #20]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d119      	bne.n	80032e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7b1b      	ldrb	r3, [r3, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	035a      	lsls	r2, r3, #13
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	e00b      	b.n	80032e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	f043 0201 	orr.w	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <HAL_ADC_Init+0x1a8>)
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	430b      	orrs	r3, r1
 800330e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003318:	d003      	beq.n	8003322 <HAL_ADC_Init+0x126>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d104      	bne.n	800332c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	3b01      	subs	r3, #1
 8003328:	051b      	lsls	r3, r3, #20
 800332a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	430a      	orrs	r2, r1
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <HAL_ADC_Init+0x1ac>)
 8003348:	4013      	ands	r3, r2
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	429a      	cmp	r2, r3
 800334e:	d10b      	bne.n	8003368 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003366:	e018      	b.n	800339a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	f023 0312 	bic.w	r3, r3, #18
 8003370:	f043 0210 	orr.w	r2, r3, #16
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003388:	e007      	b.n	800339a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	f043 0210 	orr.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800339a:	7dfb      	ldrb	r3, [r7, #23]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	ffe1f7fd 	.word	0xffe1f7fd
 80033a8:	ff1f0efe 	.word	0xff1f0efe

080033ac <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d140      	bne.n	8003444 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d139      	bne.n	8003444 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033f6:	d11d      	bne.n	8003434 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d119      	bne.n	8003434 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0220 	bic.w	r2, r2, #32
 800340e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	f043 0201 	orr.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f87c 	bl	8003532 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0212 	mvn.w	r2, #18
 8003442:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b80      	cmp	r3, #128	; 0x80
 8003450:	d14f      	bne.n	80034f2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b04      	cmp	r3, #4
 800345e:	d148      	bne.n	80034f2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003482:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003486:	d012      	beq.n	80034ae <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003492:	2b00      	cmp	r3, #0
 8003494:	d125      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80034a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034a4:	d11d      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d119      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034bc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fe fdb0 	bl	8002048 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 020c 	mvn.w	r2, #12
 80034f0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d114      	bne.n	800352a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10d      	bne.n	800352a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f812 	bl	8003544 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0201 	mvn.w	r2, #1
 8003528:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
	...

08003558 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d040      	beq.n	80035f8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003586:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <ADC_Enable+0xac>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <ADC_Enable+0xb0>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	0c9b      	lsrs	r3, r3, #18
 8003592:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003594:	e002      	b.n	800359c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3b01      	subs	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f9      	bne.n	8003596 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035a2:	f7ff fe21 	bl	80031e8 <HAL_GetTick>
 80035a6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035a8:	e01f      	b.n	80035ea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035aa:	f7ff fe1d 	bl	80031e8 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d918      	bls.n	80035ea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d011      	beq.n	80035ea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	f043 0210 	orr.w	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	f043 0201 	orr.w	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e007      	b.n	80035fa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d1d8      	bne.n	80035aa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000008 	.word	0x20000008
 8003608:	431bde83 	.word	0x431bde83

0800360c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d12e      	bne.n	8003684 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003636:	f7ff fdd7 	bl	80031e8 <HAL_GetTick>
 800363a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800363c:	e01b      	b.n	8003676 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800363e:	f7ff fdd3 	bl	80031e8 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d914      	bls.n	8003676 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d10d      	bne.n	8003676 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	f043 0210 	orr.w	r2, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	f043 0201 	orr.w	r2, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e007      	b.n	8003686 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b01      	cmp	r3, #1
 8003682:	d0dc      	beq.n	800363e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_ADCEx_Calibration_Start+0x1e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e095      	b.n	80037da <HAL_ADCEx_Calibration_Start+0x14a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ffa8 	bl	800360c <ADC_ConversionStop_Disable>
 80036bc:	4603      	mov	r3, r0
 80036be:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 8084 	bne.w	80037d0 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036d0:	f023 0302 	bic.w	r3, r3, #2
 80036d4:	f043 0202 	orr.w	r2, r3, #2
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80036dc:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <HAL_ADCEx_Calibration_Start+0x154>)
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	2002      	movs	r0, #2
 80036e2:	f004 f965 	bl	80079b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80036e6:	4603      	mov	r3, r0
 80036e8:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80036ec:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80036ee:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80036f0:	e002      	b.n	80036f8 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f9      	bne.n	80036f2 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff2a 	bl	8003558 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0208 	orr.w	r2, r2, #8
 8003712:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003714:	f7ff fd68 	bl	80031e8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800371a:	e01b      	b.n	8003754 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800371c:	f7ff fd64 	bl	80031e8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b0a      	cmp	r3, #10
 8003728:	d914      	bls.n	8003754 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00d      	beq.n	8003754 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f023 0312 	bic.w	r3, r3, #18
 8003740:	f043 0210 	orr.w	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e042      	b.n	80037da <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1dc      	bne.n	800371c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0204 	orr.w	r2, r2, #4
 8003770:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003772:	f7ff fd39 	bl	80031e8 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003778:	e01b      	b.n	80037b2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800377a:	f7ff fd35 	bl	80031e8 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b0a      	cmp	r3, #10
 8003786:	d914      	bls.n	80037b2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00d      	beq.n	80037b2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	f023 0312 	bic.w	r3, r3, #18
 800379e:	f043 0210 	orr.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e013      	b.n	80037da <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1dc      	bne.n	800377a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	f023 0303 	bic.w	r3, r3, #3
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd90      	pop	{r4, r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000008 	.word	0x20000008

080037e8 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_ADCEx_InjectedStart_IT+0x1a>
 80037fe:	2302      	movs	r3, #2
 8003800:	e078      	b.n	80038f4 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fea4 	bl	8003558 <ADC_Enable>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d167      	bne.n	80038ea <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a32      	ldr	r2, [pc, #200]	; (80038fc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d105      	bne.n	8003844 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8003838:	4b31      	ldr	r3, [pc, #196]	; (8003900 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d106      	bne.n	8003852 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
 8003850:	e005      	b.n	800385e <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003856:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0204 	mvn.w	r2, #4
 8003880:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003890:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d128      	bne.n	80038f2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80038aa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80038ae:	d113      	bne.n	80038d8 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80038b4:	4a11      	ldr	r2, [pc, #68]	; (80038fc <HAL_ADCEx_InjectedStart_IT+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d105      	bne.n	80038c6 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	e00c      	b.n	80038f2 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	e003      	b.n	80038f2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40012800 	.word	0x40012800
 8003900:	40012400 	.word	0x40012400

08003904 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8003904:	b490      	push	{r4, r7}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8003920:	2302      	movs	r3, #2
 8003922:	e17d      	b.n	8003c20 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d119      	bne.n	8003968 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10c      	bne.n	8003956 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003942:	0d9b      	lsrs	r3, r3, #22
 8003944:	059b      	lsls	r3, r3, #22
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	03d1      	lsls	r1, r2, #15
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6393      	str	r3, [r2, #56]	; 0x38
 8003954:	e04f      	b.n	80039f6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	f043 0220 	orr.w	r2, r3, #32
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	73fb      	strb	r3, [r7, #15]
 8003966:	e046      	b.n	80039f6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	429a      	cmp	r2, r3
 8003972:	d82a      	bhi.n	80039ca <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	1ad2      	subs	r2, r2, r3
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	330f      	adds	r3, #15
 800398c:	221f      	movs	r2, #31
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003996:	43db      	mvns	r3, r3
 8003998:	4019      	ands	r1, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	3b01      	subs	r3, #1
 80039a0:	0518      	lsls	r0, r3, #20
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681c      	ldr	r4, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	1ad2      	subs	r2, r2, r3
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	330f      	adds	r3, #15
 80039b8:	fa04 f303 	lsl.w	r3, r4, r3
 80039bc:	ea40 0203 	orr.w	r2, r0, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38
 80039c8:	e015      	b.n	80039f6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	1ad2      	subs	r2, r2, r3
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	330f      	adds	r3, #15
 80039e2:	221f      	movs	r2, #31
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80039ec:	43da      	mvns	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	400a      	ands	r2, r1
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d00c      	beq.n	8003a1e <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	6991      	ldr	r1, [r2, #24]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	7d5b      	ldrb	r3, [r3, #21]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d115      	bne.n	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003a2e:	d108      	bne.n	8003a42 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	e007      	b.n	8003a52 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	7d1b      	ldrb	r3, [r3, #20]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d114      	bne.n	8003a84 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	7d5b      	ldrb	r3, [r3, #21]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	e007      	b.n	8003a84 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f043 0220 	orr.w	r2, r3, #32
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b09      	cmp	r3, #9
 8003a8a:	d91c      	bls.n	8003ac6 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68d9      	ldr	r1, [r3, #12]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4613      	mov	r3, r2
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3b1e      	subs	r3, #30
 8003a9e:	2207      	movs	r2, #7
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	4019      	ands	r1, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6898      	ldr	r0, [r3, #8]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b1e      	subs	r3, #30
 8003ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	e019      	b.n	8003afa <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6919      	ldr	r1, [r3, #16]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	2207      	movs	r2, #7
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	4019      	ands	r1, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6898      	ldr	r0, [r3, #8]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	4413      	add	r3, r2
 8003aee:	fa00 f203 	lsl.w	r2, r0, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d003      	beq.n	8003b0a <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b06:	2b11      	cmp	r3, #17
 8003b08:	d107      	bne.n	8003b1a <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b18:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d022      	beq.n	8003b68 <HAL_ADCEx_InjectedConfigChannel+0x264>
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d82e      	bhi.n	8003b84 <HAL_ADCEx_InjectedConfigChannel+0x280>
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d002      	beq.n	8003b30 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_ADCEx_InjectedConfigChannel+0x248>
 8003b2e:	e029      	b.n	8003b84 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003b3a:	f023 030f 	bic.w	r3, r3, #15
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	68d1      	ldr	r1, [r2, #12]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	430b      	orrs	r3, r1
 8003b48:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8003b4a:	e029      	b.n	8003ba0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003b56:	f023 030f 	bic.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	68d1      	ldr	r1, [r2, #12]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8003b66:	e01b      	b.n	8003ba0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003b72:	f023 030f 	bic.w	r3, r3, #15
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	68d1      	ldr	r1, [r2, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8003b82:	e00d      	b.n	8003ba0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003b8e:	f023 030f 	bic.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	68d1      	ldr	r1, [r2, #12]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6812      	ldr	r2, [r2, #0]
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8003b9e:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d003      	beq.n	8003bb0 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003bac:	2b11      	cmp	r3, #17
 8003bae:	d132      	bne.n	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d125      	bne.n	8003c06 <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d126      	bne.n	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003bd6:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d11a      	bne.n	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	0c9a      	lsrs	r2, r3, #18
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bf6:	e002      	b.n	8003bfe <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f9      	bne.n	8003bf8 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 8003c04:	e007      	b.n	8003c16 <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc90      	pop	{r4, r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40012400 	.word	0x40012400
 8003c30:	20000008 	.word	0x20000008
 8003c34:	431bde83 	.word	0x431bde83

08003c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c54:	4013      	ands	r3, r2
 8003c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c6a:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <__NVIC_SetPriorityGrouping+0x44>)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	60d3      	str	r3, [r2, #12]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	e000ed00 	.word	0xe000ed00

08003c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <__NVIC_GetPriorityGrouping+0x18>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	0a1b      	lsrs	r3, r3, #8
 8003c8a:	f003 0307 	and.w	r3, r3, #7
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000ed00 	.word	0xe000ed00

08003c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	db0b      	blt.n	8003cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	f003 021f 	and.w	r2, r3, #31
 8003cb4:	4906      	ldr	r1, [pc, #24]	; (8003cd0 <__NVIC_EnableIRQ+0x34>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	db0a      	blt.n	8003cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	490c      	ldr	r1, [pc, #48]	; (8003d20 <__NVIC_SetPriority+0x4c>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cfc:	e00a      	b.n	8003d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4908      	ldr	r1, [pc, #32]	; (8003d24 <__NVIC_SetPriority+0x50>)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	440b      	add	r3, r1
 8003d12:	761a      	strb	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000e100 	.word	0xe000e100
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	; 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf28      	it	cs
 8003d46:	2304      	movcs	r3, #4
 8003d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d902      	bls.n	8003d58 <NVIC_EncodePriority+0x30>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3b03      	subs	r3, #3
 8003d56:	e000      	b.n	8003d5a <NVIC_EncodePriority+0x32>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	4313      	orrs	r3, r2
         );
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	; 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d9c:	d301      	bcc.n	8003da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e00f      	b.n	8003dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003da2:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <SysTick_Config+0x40>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003daa:	210f      	movs	r1, #15
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	f7ff ff90 	bl	8003cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003db4:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <SysTick_Config+0x40>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <SysTick_Config+0x40>)
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	e000e010 	.word	0xe000e010

08003dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff2d 	bl	8003c38 <__NVIC_SetPriorityGrouping>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b086      	sub	sp, #24
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	4603      	mov	r3, r0
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df8:	f7ff ff42 	bl	8003c80 <__NVIC_GetPriorityGrouping>
 8003dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	6978      	ldr	r0, [r7, #20]
 8003e04:	f7ff ff90 	bl	8003d28 <NVIC_EncodePriority>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff5f 	bl	8003cd4 <__NVIC_SetPriority>
}
 8003e16:	bf00      	nop
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	4603      	mov	r3, r0
 8003e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff35 	bl	8003c9c <__NVIC_EnableIRQ>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ffa2 	bl	8003d8c <SysTick_Config>
 8003e48:	4603      	mov	r3, r0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e043      	b.n	8003ef2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b22      	ldr	r3, [pc, #136]	; (8003efc <HAL_DMA_Init+0xa8>)
 8003e72:	4413      	add	r3, r2
 8003e74:	4a22      	ldr	r2, [pc, #136]	; (8003f00 <HAL_DMA_Init+0xac>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	009a      	lsls	r2, r3, #2
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_DMA_Init+0xb0>)
 8003e86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003ea2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	bffdfff8 	.word	0xbffdfff8
 8003f00:	cccccccd 	.word	0xcccccccd
 8003f04:	40020000 	.word	0x40020000

08003f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_DMA_Start_IT+0x20>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e04a      	b.n	8003fbe <HAL_DMA_Start_IT+0xb6>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d13a      	bne.n	8003fb0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 f9f4 	bl	800434c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 020e 	orr.w	r2, r2, #14
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e00f      	b.n	8003f9e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0204 	bic.w	r2, r2, #4
 8003f8c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 020a 	orr.w	r2, r2, #10
 8003f9c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e005      	b.n	8003fbc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d008      	beq.n	8003fee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e020      	b.n	8004030 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 020e 	bic.w	r2, r2, #14
 8003ffc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	2101      	movs	r1, #1
 8004018:	fa01 f202 	lsl.w	r2, r1, r2
 800401c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800402e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
	...

0800403c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800404e:	2b02      	cmp	r3, #2
 8004050:	d005      	beq.n	800405e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2204      	movs	r2, #4
 8004056:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e051      	b.n	8004102 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 020e 	bic.w	r2, r2, #14
 800406c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a22      	ldr	r2, [pc, #136]	; (800410c <HAL_DMA_Abort_IT+0xd0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d029      	beq.n	80040dc <HAL_DMA_Abort_IT+0xa0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <HAL_DMA_Abort_IT+0xd4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_Abort_IT+0x9c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <HAL_DMA_Abort_IT+0xd8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01a      	beq.n	80040d2 <HAL_DMA_Abort_IT+0x96>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <HAL_DMA_Abort_IT+0xdc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d012      	beq.n	80040cc <HAL_DMA_Abort_IT+0x90>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_DMA_Abort_IT+0xe0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d00a      	beq.n	80040c6 <HAL_DMA_Abort_IT+0x8a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1a      	ldr	r2, [pc, #104]	; (8004120 <HAL_DMA_Abort_IT+0xe4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d102      	bne.n	80040c0 <HAL_DMA_Abort_IT+0x84>
 80040ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040be:	e00e      	b.n	80040de <HAL_DMA_Abort_IT+0xa2>
 80040c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c4:	e00b      	b.n	80040de <HAL_DMA_Abort_IT+0xa2>
 80040c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040ca:	e008      	b.n	80040de <HAL_DMA_Abort_IT+0xa2>
 80040cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d0:	e005      	b.n	80040de <HAL_DMA_Abort_IT+0xa2>
 80040d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d6:	e002      	b.n	80040de <HAL_DMA_Abort_IT+0xa2>
 80040d8:	2310      	movs	r3, #16
 80040da:	e000      	b.n	80040de <HAL_DMA_Abort_IT+0xa2>
 80040dc:	2301      	movs	r3, #1
 80040de:	4a11      	ldr	r2, [pc, #68]	; (8004124 <HAL_DMA_Abort_IT+0xe8>)
 80040e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	4798      	blx	r3
    } 
  }
  return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40020008 	.word	0x40020008
 8004110:	4002001c 	.word	0x4002001c
 8004114:	40020030 	.word	0x40020030
 8004118:	40020044 	.word	0x40020044
 800411c:	40020058 	.word	0x40020058
 8004120:	4002006c 	.word	0x4002006c
 8004124:	40020000 	.word	0x40020000

08004128 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	2204      	movs	r2, #4
 8004146:	409a      	lsls	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d04f      	beq.n	80041f0 <HAL_DMA_IRQHandler+0xc8>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d04a      	beq.n	80041f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d107      	bne.n	8004178 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0204 	bic.w	r2, r2, #4
 8004176:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a66      	ldr	r2, [pc, #408]	; (8004318 <HAL_DMA_IRQHandler+0x1f0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d029      	beq.n	80041d6 <HAL_DMA_IRQHandler+0xae>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_DMA_IRQHandler+0x1f4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xaa>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a63      	ldr	r2, [pc, #396]	; (8004320 <HAL_DMA_IRQHandler+0x1f8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01a      	beq.n	80041cc <HAL_DMA_IRQHandler+0xa4>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a62      	ldr	r2, [pc, #392]	; (8004324 <HAL_DMA_IRQHandler+0x1fc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d012      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x9e>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a60      	ldr	r2, [pc, #384]	; (8004328 <HAL_DMA_IRQHandler+0x200>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00a      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x98>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a5f      	ldr	r2, [pc, #380]	; (800432c <HAL_DMA_IRQHandler+0x204>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d102      	bne.n	80041ba <HAL_DMA_IRQHandler+0x92>
 80041b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041b8:	e00e      	b.n	80041d8 <HAL_DMA_IRQHandler+0xb0>
 80041ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041be:	e00b      	b.n	80041d8 <HAL_DMA_IRQHandler+0xb0>
 80041c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041c4:	e008      	b.n	80041d8 <HAL_DMA_IRQHandler+0xb0>
 80041c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041ca:	e005      	b.n	80041d8 <HAL_DMA_IRQHandler+0xb0>
 80041cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041d0:	e002      	b.n	80041d8 <HAL_DMA_IRQHandler+0xb0>
 80041d2:	2340      	movs	r3, #64	; 0x40
 80041d4:	e000      	b.n	80041d8 <HAL_DMA_IRQHandler+0xb0>
 80041d6:	2304      	movs	r3, #4
 80041d8:	4a55      	ldr	r2, [pc, #340]	; (8004330 <HAL_DMA_IRQHandler+0x208>)
 80041da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8094 	beq.w	800430e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80041ee:	e08e      	b.n	800430e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2202      	movs	r2, #2
 80041f6:	409a      	lsls	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d056      	beq.n	80042ae <HAL_DMA_IRQHandler+0x186>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d051      	beq.n	80042ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 020a 	bic.w	r2, r2, #10
 8004226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a38      	ldr	r2, [pc, #224]	; (8004318 <HAL_DMA_IRQHandler+0x1f0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d029      	beq.n	800428e <HAL_DMA_IRQHandler+0x166>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a37      	ldr	r2, [pc, #220]	; (800431c <HAL_DMA_IRQHandler+0x1f4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d022      	beq.n	800428a <HAL_DMA_IRQHandler+0x162>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a35      	ldr	r2, [pc, #212]	; (8004320 <HAL_DMA_IRQHandler+0x1f8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01a      	beq.n	8004284 <HAL_DMA_IRQHandler+0x15c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a34      	ldr	r2, [pc, #208]	; (8004324 <HAL_DMA_IRQHandler+0x1fc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d012      	beq.n	800427e <HAL_DMA_IRQHandler+0x156>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a32      	ldr	r2, [pc, #200]	; (8004328 <HAL_DMA_IRQHandler+0x200>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00a      	beq.n	8004278 <HAL_DMA_IRQHandler+0x150>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a31      	ldr	r2, [pc, #196]	; (800432c <HAL_DMA_IRQHandler+0x204>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d102      	bne.n	8004272 <HAL_DMA_IRQHandler+0x14a>
 800426c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004270:	e00e      	b.n	8004290 <HAL_DMA_IRQHandler+0x168>
 8004272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004276:	e00b      	b.n	8004290 <HAL_DMA_IRQHandler+0x168>
 8004278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800427c:	e008      	b.n	8004290 <HAL_DMA_IRQHandler+0x168>
 800427e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004282:	e005      	b.n	8004290 <HAL_DMA_IRQHandler+0x168>
 8004284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004288:	e002      	b.n	8004290 <HAL_DMA_IRQHandler+0x168>
 800428a:	2320      	movs	r3, #32
 800428c:	e000      	b.n	8004290 <HAL_DMA_IRQHandler+0x168>
 800428e:	2302      	movs	r3, #2
 8004290:	4a27      	ldr	r2, [pc, #156]	; (8004330 <HAL_DMA_IRQHandler+0x208>)
 8004292:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d034      	beq.n	800430e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80042ac:	e02f      	b.n	800430e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2208      	movs	r2, #8
 80042b4:	409a      	lsls	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d028      	beq.n	8004310 <HAL_DMA_IRQHandler+0x1e8>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d023      	beq.n	8004310 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 020e 	bic.w	r2, r2, #14
 80042d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f202 	lsl.w	r2, r1, r2
 80042e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
    }
  }
  return;
 800430e:	bf00      	nop
 8004310:	bf00      	nop
}
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40020008 	.word	0x40020008
 800431c:	4002001c 	.word	0x4002001c
 8004320:	40020030 	.word	0x40020030
 8004324:	40020044 	.word	0x40020044
 8004328:	40020058 	.word	0x40020058
 800432c:	4002006c 	.word	0x4002006c
 8004330:	40020000 	.word	0x40020000

08004334 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b10      	cmp	r3, #16
 8004378:	d108      	bne.n	800438c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800438a:	e007      	b.n	800439c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	60da      	str	r2, [r3, #12]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b08b      	sub	sp, #44	; 0x2c
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043b2:	2300      	movs	r3, #0
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043b6:	2300      	movs	r3, #0
 80043b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ba:	e169      	b.n	8004690 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80043bc:	2201      	movs	r2, #1
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	f040 8158 	bne.w	800468a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4a9a      	ldr	r2, [pc, #616]	; (8004648 <HAL_GPIO_Init+0x2a0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d05e      	beq.n	80044a2 <HAL_GPIO_Init+0xfa>
 80043e4:	4a98      	ldr	r2, [pc, #608]	; (8004648 <HAL_GPIO_Init+0x2a0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d875      	bhi.n	80044d6 <HAL_GPIO_Init+0x12e>
 80043ea:	4a98      	ldr	r2, [pc, #608]	; (800464c <HAL_GPIO_Init+0x2a4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d058      	beq.n	80044a2 <HAL_GPIO_Init+0xfa>
 80043f0:	4a96      	ldr	r2, [pc, #600]	; (800464c <HAL_GPIO_Init+0x2a4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d86f      	bhi.n	80044d6 <HAL_GPIO_Init+0x12e>
 80043f6:	4a96      	ldr	r2, [pc, #600]	; (8004650 <HAL_GPIO_Init+0x2a8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d052      	beq.n	80044a2 <HAL_GPIO_Init+0xfa>
 80043fc:	4a94      	ldr	r2, [pc, #592]	; (8004650 <HAL_GPIO_Init+0x2a8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d869      	bhi.n	80044d6 <HAL_GPIO_Init+0x12e>
 8004402:	4a94      	ldr	r2, [pc, #592]	; (8004654 <HAL_GPIO_Init+0x2ac>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d04c      	beq.n	80044a2 <HAL_GPIO_Init+0xfa>
 8004408:	4a92      	ldr	r2, [pc, #584]	; (8004654 <HAL_GPIO_Init+0x2ac>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d863      	bhi.n	80044d6 <HAL_GPIO_Init+0x12e>
 800440e:	4a92      	ldr	r2, [pc, #584]	; (8004658 <HAL_GPIO_Init+0x2b0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d046      	beq.n	80044a2 <HAL_GPIO_Init+0xfa>
 8004414:	4a90      	ldr	r2, [pc, #576]	; (8004658 <HAL_GPIO_Init+0x2b0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d85d      	bhi.n	80044d6 <HAL_GPIO_Init+0x12e>
 800441a:	2b12      	cmp	r3, #18
 800441c:	d82a      	bhi.n	8004474 <HAL_GPIO_Init+0xcc>
 800441e:	2b12      	cmp	r3, #18
 8004420:	d859      	bhi.n	80044d6 <HAL_GPIO_Init+0x12e>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <HAL_GPIO_Init+0x80>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	080044a3 	.word	0x080044a3
 800442c:	0800447d 	.word	0x0800447d
 8004430:	0800448f 	.word	0x0800448f
 8004434:	080044d1 	.word	0x080044d1
 8004438:	080044d7 	.word	0x080044d7
 800443c:	080044d7 	.word	0x080044d7
 8004440:	080044d7 	.word	0x080044d7
 8004444:	080044d7 	.word	0x080044d7
 8004448:	080044d7 	.word	0x080044d7
 800444c:	080044d7 	.word	0x080044d7
 8004450:	080044d7 	.word	0x080044d7
 8004454:	080044d7 	.word	0x080044d7
 8004458:	080044d7 	.word	0x080044d7
 800445c:	080044d7 	.word	0x080044d7
 8004460:	080044d7 	.word	0x080044d7
 8004464:	080044d7 	.word	0x080044d7
 8004468:	080044d7 	.word	0x080044d7
 800446c:	08004485 	.word	0x08004485
 8004470:	08004499 	.word	0x08004499
 8004474:	4a79      	ldr	r2, [pc, #484]	; (800465c <HAL_GPIO_Init+0x2b4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d013      	beq.n	80044a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800447a:	e02c      	b.n	80044d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	623b      	str	r3, [r7, #32]
          break;
 8004482:	e029      	b.n	80044d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	3304      	adds	r3, #4
 800448a:	623b      	str	r3, [r7, #32]
          break;
 800448c:	e024      	b.n	80044d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	3308      	adds	r3, #8
 8004494:	623b      	str	r3, [r7, #32]
          break;
 8004496:	e01f      	b.n	80044d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	330c      	adds	r3, #12
 800449e:	623b      	str	r3, [r7, #32]
          break;
 80044a0:	e01a      	b.n	80044d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044aa:	2304      	movs	r3, #4
 80044ac:	623b      	str	r3, [r7, #32]
          break;
 80044ae:	e013      	b.n	80044d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d105      	bne.n	80044c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044b8:	2308      	movs	r3, #8
 80044ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	611a      	str	r2, [r3, #16]
          break;
 80044c2:	e009      	b.n	80044d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044c4:	2308      	movs	r3, #8
 80044c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	615a      	str	r2, [r3, #20]
          break;
 80044ce:	e003      	b.n	80044d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044d0:	2300      	movs	r3, #0
 80044d2:	623b      	str	r3, [r7, #32]
          break;
 80044d4:	e000      	b.n	80044d8 <HAL_GPIO_Init+0x130>
          break;
 80044d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2bff      	cmp	r3, #255	; 0xff
 80044dc:	d801      	bhi.n	80044e2 <HAL_GPIO_Init+0x13a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	e001      	b.n	80044e6 <HAL_GPIO_Init+0x13e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3304      	adds	r3, #4
 80044e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2bff      	cmp	r3, #255	; 0xff
 80044ec:	d802      	bhi.n	80044f4 <HAL_GPIO_Init+0x14c>
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	e002      	b.n	80044fa <HAL_GPIO_Init+0x152>
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	3b08      	subs	r3, #8
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	210f      	movs	r1, #15
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	fa01 f303 	lsl.w	r3, r1, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	401a      	ands	r2, r3
 800450c:	6a39      	ldr	r1, [r7, #32]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	431a      	orrs	r2, r3
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80b1 	beq.w	800468a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004528:	4b4d      	ldr	r3, [pc, #308]	; (8004660 <HAL_GPIO_Init+0x2b8>)
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	4a4c      	ldr	r2, [pc, #304]	; (8004660 <HAL_GPIO_Init+0x2b8>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6193      	str	r3, [r2, #24]
 8004534:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_GPIO_Init+0x2b8>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004540:	4a48      	ldr	r2, [pc, #288]	; (8004664 <HAL_GPIO_Init+0x2bc>)
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	3302      	adds	r3, #2
 8004548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	220f      	movs	r2, #15
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43db      	mvns	r3, r3
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a40      	ldr	r2, [pc, #256]	; (8004668 <HAL_GPIO_Init+0x2c0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d013      	beq.n	8004594 <HAL_GPIO_Init+0x1ec>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a3f      	ldr	r2, [pc, #252]	; (800466c <HAL_GPIO_Init+0x2c4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00d      	beq.n	8004590 <HAL_GPIO_Init+0x1e8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3e      	ldr	r2, [pc, #248]	; (8004670 <HAL_GPIO_Init+0x2c8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d007      	beq.n	800458c <HAL_GPIO_Init+0x1e4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a3d      	ldr	r2, [pc, #244]	; (8004674 <HAL_GPIO_Init+0x2cc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_GPIO_Init+0x1e0>
 8004584:	2303      	movs	r3, #3
 8004586:	e006      	b.n	8004596 <HAL_GPIO_Init+0x1ee>
 8004588:	2304      	movs	r3, #4
 800458a:	e004      	b.n	8004596 <HAL_GPIO_Init+0x1ee>
 800458c:	2302      	movs	r3, #2
 800458e:	e002      	b.n	8004596 <HAL_GPIO_Init+0x1ee>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <HAL_GPIO_Init+0x1ee>
 8004594:	2300      	movs	r3, #0
 8004596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004598:	f002 0203 	and.w	r2, r2, #3
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	4093      	lsls	r3, r2
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045a6:	492f      	ldr	r1, [pc, #188]	; (8004664 <HAL_GPIO_Init+0x2bc>)
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	3302      	adds	r3, #2
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045c0:	4b2d      	ldr	r3, [pc, #180]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	492c      	ldr	r1, [pc, #176]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
 80045cc:	e006      	b.n	80045dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045ce:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	4928      	ldr	r1, [pc, #160]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045d8:	4013      	ands	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d006      	beq.n	80045f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4922      	ldr	r1, [pc, #136]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	e006      	b.n	8004604 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045f6:	4b20      	ldr	r3, [pc, #128]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	491e      	ldr	r1, [pc, #120]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 8004600:	4013      	ands	r3, r2
 8004602:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d006      	beq.n	800461e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	4918      	ldr	r1, [pc, #96]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]
 800461c:	e006      	b.n	800462c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800461e:	4b16      	ldr	r3, [pc, #88]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	43db      	mvns	r3, r3
 8004626:	4914      	ldr	r1, [pc, #80]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 8004628:	4013      	ands	r3, r2
 800462a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d021      	beq.n	800467c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	490e      	ldr	r1, [pc, #56]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	60cb      	str	r3, [r1, #12]
 8004644:	e021      	b.n	800468a <HAL_GPIO_Init+0x2e2>
 8004646:	bf00      	nop
 8004648:	10320000 	.word	0x10320000
 800464c:	10310000 	.word	0x10310000
 8004650:	10220000 	.word	0x10220000
 8004654:	10210000 	.word	0x10210000
 8004658:	10120000 	.word	0x10120000
 800465c:	10110000 	.word	0x10110000
 8004660:	40021000 	.word	0x40021000
 8004664:	40010000 	.word	0x40010000
 8004668:	40010800 	.word	0x40010800
 800466c:	40010c00 	.word	0x40010c00
 8004670:	40011000 	.word	0x40011000
 8004674:	40011400 	.word	0x40011400
 8004678:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_GPIO_Init+0x304>)
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	43db      	mvns	r3, r3
 8004684:	4909      	ldr	r1, [pc, #36]	; (80046ac <HAL_GPIO_Init+0x304>)
 8004686:	4013      	ands	r3, r2
 8004688:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	3301      	adds	r3, #1
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	fa22 f303 	lsr.w	r3, r2, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	f47f ae8e 	bne.w	80043bc <HAL_GPIO_Init+0x14>
  }
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	372c      	adds	r7, #44	; 0x2c
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	40010400 	.word	0x40010400

080046b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
 80046bc:	4613      	mov	r3, r2
 80046be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046c0:	787b      	ldrb	r3, [r7, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046cc:	e003      	b.n	80046d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	041a      	lsls	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	611a      	str	r2, [r3, #16]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e12b      	b.n	800494a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fd fe20 	bl	800234c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	; 0x24
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004744:	f003 f838 	bl	80077b8 <HAL_RCC_GetPCLK1Freq>
 8004748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4a81      	ldr	r2, [pc, #516]	; (8004954 <HAL_I2C_Init+0x274>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d807      	bhi.n	8004764 <HAL_I2C_Init+0x84>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4a80      	ldr	r2, [pc, #512]	; (8004958 <HAL_I2C_Init+0x278>)
 8004758:	4293      	cmp	r3, r2
 800475a:	bf94      	ite	ls
 800475c:	2301      	movls	r3, #1
 800475e:	2300      	movhi	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e006      	b.n	8004772 <HAL_I2C_Init+0x92>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a7d      	ldr	r2, [pc, #500]	; (800495c <HAL_I2C_Init+0x27c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	bf94      	ite	ls
 800476c:	2301      	movls	r3, #1
 800476e:	2300      	movhi	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0e7      	b.n	800494a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a78      	ldr	r2, [pc, #480]	; (8004960 <HAL_I2C_Init+0x280>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	0c9b      	lsrs	r3, r3, #18
 8004784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	4a6a      	ldr	r2, [pc, #424]	; (8004954 <HAL_I2C_Init+0x274>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d802      	bhi.n	80047b4 <HAL_I2C_Init+0xd4>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	3301      	adds	r3, #1
 80047b2:	e009      	b.n	80047c8 <HAL_I2C_Init+0xe8>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	4a69      	ldr	r2, [pc, #420]	; (8004964 <HAL_I2C_Init+0x284>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	3301      	adds	r3, #1
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	495c      	ldr	r1, [pc, #368]	; (8004954 <HAL_I2C_Init+0x274>)
 80047e4:	428b      	cmp	r3, r1
 80047e6:	d819      	bhi.n	800481c <HAL_I2C_Init+0x13c>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1e59      	subs	r1, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f6:	1c59      	adds	r1, r3, #1
 80047f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047fc:	400b      	ands	r3, r1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_I2C_Init+0x138>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1e59      	subs	r1, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004810:	3301      	adds	r3, #1
 8004812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004816:	e051      	b.n	80048bc <HAL_I2C_Init+0x1dc>
 8004818:	2304      	movs	r3, #4
 800481a:	e04f      	b.n	80048bc <HAL_I2C_Init+0x1dc>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d111      	bne.n	8004848 <HAL_I2C_Init+0x168>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	1e58      	subs	r0, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	440b      	add	r3, r1
 8004832:	fbb0 f3f3 	udiv	r3, r0, r3
 8004836:	3301      	adds	r3, #1
 8004838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483c:	2b00      	cmp	r3, #0
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	e012      	b.n	800486e <HAL_I2C_Init+0x18e>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	1e58      	subs	r0, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	0099      	lsls	r1, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	fbb0 f3f3 	udiv	r3, r0, r3
 800485e:	3301      	adds	r3, #1
 8004860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004864:	2b00      	cmp	r3, #0
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <HAL_I2C_Init+0x196>
 8004872:	2301      	movs	r3, #1
 8004874:	e022      	b.n	80048bc <HAL_I2C_Init+0x1dc>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10e      	bne.n	800489c <HAL_I2C_Init+0x1bc>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1e58      	subs	r0, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6859      	ldr	r1, [r3, #4]
 8004886:	460b      	mov	r3, r1
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	440b      	add	r3, r1
 800488c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004890:	3301      	adds	r3, #1
 8004892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489a:	e00f      	b.n	80048bc <HAL_I2C_Init+0x1dc>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1e58      	subs	r0, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	0099      	lsls	r1, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b2:	3301      	adds	r3, #1
 80048b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	6809      	ldr	r1, [r1, #0]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69da      	ldr	r2, [r3, #28]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6911      	ldr	r1, [r2, #16]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68d2      	ldr	r2, [r2, #12]
 80048f6:	4311      	orrs	r1, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	430b      	orrs	r3, r1
 80048fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	000186a0 	.word	0x000186a0
 8004958:	001e847f 	.word	0x001e847f
 800495c:	003d08ff 	.word	0x003d08ff
 8004960:	431bde83 	.word	0x431bde83
 8004964:	10624dd3 	.word	0x10624dd3

08004968 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	4608      	mov	r0, r1
 8004972:	4611      	mov	r1, r2
 8004974:	461a      	mov	r2, r3
 8004976:	4603      	mov	r3, r0
 8004978:	817b      	strh	r3, [r7, #10]
 800497a:	460b      	mov	r3, r1
 800497c:	813b      	strh	r3, [r7, #8]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004982:	f7fe fc31 	bl	80031e8 <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b20      	cmp	r3, #32
 8004992:	f040 80d9 	bne.w	8004b48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2319      	movs	r3, #25
 800499c:	2201      	movs	r2, #1
 800499e:	496d      	ldr	r1, [pc, #436]	; (8004b54 <HAL_I2C_Mem_Write+0x1ec>)
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f002 f963 	bl	8006c6c <I2C_WaitOnFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
 80049ae:	e0cc      	b.n	8004b4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_I2C_Mem_Write+0x56>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0c5      	b.n	8004b4a <HAL_I2C_Mem_Write+0x1e2>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d007      	beq.n	80049e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2221      	movs	r2, #33	; 0x21
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2240      	movs	r2, #64	; 0x40
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a3a      	ldr	r2, [r7, #32]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a4d      	ldr	r2, [pc, #308]	; (8004b58 <HAL_I2C_Mem_Write+0x1f0>)
 8004a24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a26:	88f8      	ldrh	r0, [r7, #6]
 8004a28:	893a      	ldrh	r2, [r7, #8]
 8004a2a:	8979      	ldrh	r1, [r7, #10]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	9301      	str	r3, [sp, #4]
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	4603      	mov	r3, r0
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f001 fde6 	bl	8006608 <I2C_RequestMemoryWrite>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d052      	beq.n	8004ae8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e081      	b.n	8004b4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f002 f9e4 	bl	8006e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d107      	bne.n	8004a6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e06b      	b.n	8004b4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	781a      	ldrb	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d11b      	bne.n	8004ae8 <HAL_I2C_Mem_Write+0x180>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d017      	beq.n	8004ae8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1aa      	bne.n	8004a46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f002 f9d0 	bl	8006e9a <I2C_WaitOnBTFFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00d      	beq.n	8004b1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d107      	bne.n	8004b18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e016      	b.n	8004b4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e000      	b.n	8004b4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	00100002 	.word	0x00100002
 8004b58:	ffff0000 	.word	0xffff0000

08004b5c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08c      	sub	sp, #48	; 0x30
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	817b      	strh	r3, [r7, #10]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	813b      	strh	r3, [r7, #8]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b76:	f7fe fb37 	bl	80031e8 <HAL_GetTick>
 8004b7a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	f040 8160 	bne.w	8004e4e <HAL_I2C_Mem_Read_DMA+0x2f2>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b8e:	4b9c      	ldr	r3, [pc, #624]	; (8004e00 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	08db      	lsrs	r3, r3, #3
 8004b94:	4a9b      	ldr	r2, [pc, #620]	; (8004e04 <HAL_I2C_Mem_Read_DMA+0x2a8>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	0a1a      	lsrs	r2, r3, #8
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009a      	lsls	r2, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d116      	bne.n	8004be2 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e136      	b.n	8004e50 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d0db      	beq.n	8004ba8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_I2C_Mem_Read_DMA+0xa2>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e128      	b.n	8004e50 <HAL_I2C_Mem_Read_DMA+0x2f4>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d007      	beq.n	8004c24 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2222      	movs	r2, #34	; 0x22
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2240      	movs	r2, #64	; 0x40
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a69      	ldr	r2, [pc, #420]	; (8004e08 <HAL_I2C_Mem_Read_DMA+0x2ac>)
 8004c64:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80b8 	beq.w	8004de0 <HAL_I2C_Mem_Read_DMA+0x284>
    {
      if (hi2c->hdmarx != NULL)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d024      	beq.n	8004cc2 <HAL_I2C_Mem_Read_DMA+0x166>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	4a63      	ldr	r2, [pc, #396]	; (8004e0c <HAL_I2C_Mem_Read_DMA+0x2b0>)
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	4a62      	ldr	r2, [pc, #392]	; (8004e10 <HAL_I2C_Mem_Read_DMA+0x2b4>)
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	2200      	movs	r2, #0
 8004c96:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3310      	adds	r3, #16
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	461a      	mov	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cae:	f7ff f92b 	bl	8003f08 <HAL_DMA_Start_IT>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d17b      	bne.n	8004db8 <HAL_I2C_Mem_Read_DMA+0x25c>
 8004cc0:	e013      	b.n	8004cea <HAL_I2C_Mem_Read_DMA+0x18e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0b2      	b.n	8004e50 <HAL_I2C_Mem_Read_DMA+0x2f4>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004cea:	88f8      	ldrh	r0, [r7, #6]
 8004cec:	893a      	ldrh	r2, [r7, #8]
 8004cee:	8979      	ldrh	r1, [r7, #10]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	2323      	movs	r3, #35	; 0x23
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f001 fd1a 	bl	8006734 <I2C_RequestMemoryRead>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d023      	beq.n	8004d4e <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff f996 	bl	800403c <HAL_DMA_Abort_IT>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2c:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e080      	b.n	8004e50 <HAL_I2C_Mem_Read_DMA+0x2f4>
        }

        if (hi2c->XferSize == 1U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d108      	bne.n	8004d68 <HAL_I2C_Mem_Read_DMA+0x20c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e007      	b.n	8004d78 <HAL_I2C_Mem_Read_DMA+0x21c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d76:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	e048      	b.n	8004e4a <HAL_I2C_Mem_Read_DMA+0x2ee>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	f043 0210 	orr.w	r2, r3, #16
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e037      	b.n	8004e50 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004de0:	88f8      	ldrh	r0, [r7, #6]
 8004de2:	893a      	ldrh	r2, [r7, #8]
 8004de4:	8979      	ldrh	r1, [r7, #10]
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	2323      	movs	r3, #35	; 0x23
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	4603      	mov	r3, r0
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f001 fc9f 	bl	8006734 <I2C_RequestMemoryRead>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00b      	beq.n	8004e14 <HAL_I2C_Mem_Read_DMA+0x2b8>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e027      	b.n	8004e50 <HAL_I2C_Mem_Read_DMA+0x2f4>
 8004e00:	20000008 	.word	0x20000008
 8004e04:	14f8b589 	.word	0x14f8b589
 8004e08:	ffff0000 	.word	0xffff0000
 8004e0c:	08006905 	.word	0x08006905
 8004e10:	08006aaf 	.word	0x08006aaf
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e38:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <HAL_I2C_Mem_Read_DMA+0x2f4>
  }
  else
  {
    return HAL_BUSY;
 8004e4e:	2302      	movs	r3, #2
  }
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3728      	adds	r7, #40	; 0x28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d003      	beq.n	8004e90 <HAL_I2C_EV_IRQHandler+0x38>
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	f040 80c1 	bne.w	8005012 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10d      	bne.n	8004ec6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004eb0:	d003      	beq.n	8004eba <HAL_I2C_EV_IRQHandler+0x62>
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004eb8:	d101      	bne.n	8004ebe <HAL_I2C_EV_IRQHandler+0x66>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <HAL_I2C_EV_IRQHandler+0x68>
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f000 8132 	beq.w	800512a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00c      	beq.n	8004eea <HAL_I2C_EV_IRQHandler+0x92>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	0a5b      	lsrs	r3, r3, #9
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d006      	beq.n	8004eea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f002 f87d 	bl	8006fdc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fd6e 	bl	80059c4 <I2C_Master_SB>
 8004ee8:	e092      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	08db      	lsrs	r3, r3, #3
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0xb2>
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	0a5b      	lsrs	r3, r3, #9
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fde3 	bl	8005ace <I2C_Master_ADD10>
 8004f08:	e082      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_I2C_EV_IRQHandler+0xd2>
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	0a5b      	lsrs	r3, r3, #9
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fdfc 	bl	8005b20 <I2C_Master_ADDR>
 8004f28:	e072      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	089b      	lsrs	r3, r3, #2
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d03b      	beq.n	8004fae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f44:	f000 80f3 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	09db      	lsrs	r3, r3, #7
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00f      	beq.n	8004f74 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0a9b      	lsrs	r3, r3, #10
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d009      	beq.n	8004f74 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9e8 	bl	8005342 <I2C_MasterTransmit_TXE>
 8004f72:	e04d      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	089b      	lsrs	r3, r3, #2
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80d6 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	0a5b      	lsrs	r3, r3, #9
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 80cf 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004f90:	7bbb      	ldrb	r3, [r7, #14]
 8004f92:	2b21      	cmp	r3, #33	; 0x21
 8004f94:	d103      	bne.n	8004f9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa6f 	bl	800547a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f9c:	e0c7      	b.n	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	f040 80c4 	bne.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fadd 	bl	8005566 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fac:	e0bf      	b.n	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fbc:	f000 80b7 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00f      	beq.n	8004fec <HAL_I2C_EV_IRQHandler+0x194>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	0a9b      	lsrs	r3, r3, #10
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <HAL_I2C_EV_IRQHandler+0x194>
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d103      	bne.n	8004fec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fb52 	bl	800568e <I2C_MasterReceive_RXNE>
 8004fea:	e011      	b.n	8005010 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	089b      	lsrs	r3, r3, #2
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 809a 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	0a5b      	lsrs	r3, r3, #9
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8093 	beq.w	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fbf1 	bl	80057f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800500e:	e08e      	b.n	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005010:	e08d      	b.n	800512e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	e007      	b.n	8005034 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	085b      	lsrs	r3, r3, #1
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d012      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0x20e>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	0a5b      	lsrs	r3, r3, #9
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00c      	beq.n	8005066 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800505c:	69b9      	ldr	r1, [r7, #24]
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 ffb5 	bl	8005fce <I2C_Slave_ADDR>
 8005064:	e066      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_I2C_EV_IRQHandler+0x22e>
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	0a5b      	lsrs	r3, r3, #9
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fff0 	bl	8006064 <I2C_Slave_STOPF>
 8005084:	e056      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005086:	7bbb      	ldrb	r3, [r7, #14]
 8005088:	2b21      	cmp	r3, #33	; 0x21
 800508a:	d002      	beq.n	8005092 <HAL_I2C_EV_IRQHandler+0x23a>
 800508c:	7bbb      	ldrb	r3, [r7, #14]
 800508e:	2b29      	cmp	r3, #41	; 0x29
 8005090:	d125      	bne.n	80050de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	09db      	lsrs	r3, r3, #7
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00f      	beq.n	80050be <HAL_I2C_EV_IRQHandler+0x266>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	0a9b      	lsrs	r3, r3, #10
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_I2C_EV_IRQHandler+0x266>
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fecd 	bl	8005e56 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050bc:	e039      	b.n	8005132 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d033      	beq.n	8005132 <HAL_I2C_EV_IRQHandler+0x2da>
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	0a5b      	lsrs	r3, r3, #9
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d02d      	beq.n	8005132 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fefa 	bl	8005ed0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050dc:	e029      	b.n	8005132 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	099b      	lsrs	r3, r3, #6
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00f      	beq.n	800510a <HAL_I2C_EV_IRQHandler+0x2b2>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	0a9b      	lsrs	r3, r3, #10
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_I2C_EV_IRQHandler+0x2b2>
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	089b      	lsrs	r3, r3, #2
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 ff04 	bl	8005f10 <I2C_SlaveReceive_RXNE>
 8005108:	e014      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00e      	beq.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	0a5b      	lsrs	r3, r3, #9
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 ff32 	bl	8005f8c <I2C_SlaveReceive_BTF>
 8005128:	e004      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800512a:	bf00      	nop
 800512c:	e002      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800512e:	bf00      	nop
 8005130:	e000      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005132:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b08a      	sub	sp, #40	; 0x28
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_I2C_ER_IRQHandler+0x5e>
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	0a1b      	lsrs	r3, r3, #8
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d010      	beq.n	8005198 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005186:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	0a5b      	lsrs	r3, r3, #9
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00e      	beq.n	80051c2 <HAL_I2C_ER_IRQHandler+0x88>
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	f043 0302 	orr.w	r3, r3, #2
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80051c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	0a9b      	lsrs	r3, r3, #10
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d03f      	beq.n	800524e <HAL_I2C_ER_IRQHandler+0x114>
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d039      	beq.n	800524e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80051da:	7efb      	ldrb	r3, [r7, #27]
 80051dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80051f4:	7ebb      	ldrb	r3, [r7, #26]
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d112      	bne.n	8005220 <HAL_I2C_ER_IRQHandler+0xe6>
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10f      	bne.n	8005220 <HAL_I2C_ER_IRQHandler+0xe6>
 8005200:	7cfb      	ldrb	r3, [r7, #19]
 8005202:	2b21      	cmp	r3, #33	; 0x21
 8005204:	d008      	beq.n	8005218 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005206:	7cfb      	ldrb	r3, [r7, #19]
 8005208:	2b29      	cmp	r3, #41	; 0x29
 800520a:	d005      	beq.n	8005218 <HAL_I2C_ER_IRQHandler+0xde>
 800520c:	7cfb      	ldrb	r3, [r7, #19]
 800520e:	2b28      	cmp	r3, #40	; 0x28
 8005210:	d106      	bne.n	8005220 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b21      	cmp	r3, #33	; 0x21
 8005216:	d103      	bne.n	8005220 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f001 f853 	bl	80062c4 <I2C_Slave_AF>
 800521e:	e016      	b.n	800524e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005228:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005232:	7efb      	ldrb	r3, [r7, #27]
 8005234:	2b10      	cmp	r3, #16
 8005236:	d002      	beq.n	800523e <HAL_I2C_ER_IRQHandler+0x104>
 8005238:	7efb      	ldrb	r3, [r7, #27]
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	d107      	bne.n	800524e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	0adb      	lsrs	r3, r3, #11
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00e      	beq.n	8005278 <HAL_I2C_ER_IRQHandler+0x13e>
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	0a1b      	lsrs	r3, r3, #8
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	f043 0308 	orr.w	r3, r3, #8
 800526c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005276:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f001 f88a 	bl	80063a4 <I2C_ITError>
  }
}
 8005290:	bf00      	nop
 8005292:	3728      	adds	r7, #40	; 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr

080052aa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
 80052ec:	4613      	mov	r3, r2
 80052ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr

0800531e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005358:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	d150      	bne.n	800540a <I2C_MasterTransmit_TXE+0xc8>
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	2b21      	cmp	r3, #33	; 0x21
 800536c:	d14d      	bne.n	800540a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b08      	cmp	r3, #8
 8005372:	d01d      	beq.n	80053b0 <I2C_MasterTransmit_TXE+0x6e>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b20      	cmp	r3, #32
 8005378:	d01a      	beq.n	80053b0 <I2C_MasterTransmit_TXE+0x6e>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005380:	d016      	beq.n	80053b0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005390:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2211      	movs	r2, #17
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff ff75 	bl	8005298 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053ae:	e060      	b.n	8005472 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053be:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ce:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d107      	bne.n	80053fa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ff8a 	bl	800530c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053f8:	e03b      	b.n	8005472 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff ff48 	bl	8005298 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005408:	e033      	b.n	8005472 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b21      	cmp	r3, #33	; 0x21
 800540e:	d005      	beq.n	800541c <I2C_MasterTransmit_TXE+0xda>
 8005410:	7bbb      	ldrb	r3, [r7, #14]
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d12d      	bne.n	8005472 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	2b22      	cmp	r3, #34	; 0x22
 800541a:	d12a      	bne.n	8005472 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d108      	bne.n	8005438 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005434:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005436:	e01c      	b.n	8005472 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d103      	bne.n	800544c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f88e 	bl	8005566 <I2C_MemoryTransmit_TXE_BTF>
}
 800544a:	e012      	b.n	8005472 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	781a      	ldrb	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005470:	e7ff      	b.n	8005472 <I2C_MasterTransmit_TXE+0x130>
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b21      	cmp	r3, #33	; 0x21
 8005492:	d164      	bne.n	800555e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d012      	beq.n	80054c4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	781a      	ldrb	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80054c2:	e04c      	b.n	800555e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d01d      	beq.n	8005506 <I2C_MasterTransmit_BTF+0x8c>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d01a      	beq.n	8005506 <I2C_MasterTransmit_BTF+0x8c>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054d6:	d016      	beq.n	8005506 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054e6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2211      	movs	r2, #17
 80054ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2220      	movs	r2, #32
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff feca 	bl	8005298 <HAL_I2C_MasterTxCpltCallback>
}
 8005504:	e02b      	b.n	800555e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005514:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005524:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d107      	bne.n	8005550 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fedf 	bl	800530c <HAL_I2C_MemTxCpltCallback>
}
 800554e:	e006      	b.n	800555e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff fe9d 	bl	8005298 <HAL_I2C_MasterTxCpltCallback>
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557a:	2b00      	cmp	r3, #0
 800557c:	d11d      	bne.n	80055ba <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005582:	2b01      	cmp	r3, #1
 8005584:	d10b      	bne.n	800559e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800558a:	b2da      	uxtb	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005596:	1c9a      	adds	r2, r3, #2
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800559c:	e073      	b.n	8005686 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	121b      	asrs	r3, r3, #8
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055b8:	e065      	b.n	8005686 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d10b      	bne.n	80055da <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055d8:	e055      	b.n	8005686 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d151      	bne.n	8005686 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	2b22      	cmp	r3, #34	; 0x22
 80055e6:	d10d      	bne.n	8005604 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055f6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005602:	e040      	b.n	8005686 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d015      	beq.n	800563a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b21      	cmp	r3, #33	; 0x21
 8005612:	d112      	bne.n	800563a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005638:	e025      	b.n	8005686 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d120      	bne.n	8005686 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b21      	cmp	r3, #33	; 0x21
 8005648:	d11d      	bne.n	8005686 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005658:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005668:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff fe43 	bl	800530c <HAL_I2C_MemTxCpltCallback>
}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b22      	cmp	r3, #34	; 0x22
 80056a0:	f040 80a2 	bne.w	80057e8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d921      	bls.n	80056f6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b03      	cmp	r3, #3
 80056e0:	f040 8082 	bne.w	80057e8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80056f4:	e078      	b.n	80057e8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d074      	beq.n	80057e8 <I2C_MasterReceive_RXNE+0x15a>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d002      	beq.n	800570a <I2C_MasterReceive_RXNE+0x7c>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d16e      	bne.n	80057e8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fc06 	bl	8006f1c <I2C_WaitOnSTOPRequestThroughIT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d142      	bne.n	800579c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005724:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005734:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b29a      	uxth	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d10a      	bne.n	8005786 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fc fc6c 	bl	800205c <HAL_I2C_MemRxCpltCallback>
}
 8005784:	e030      	b.n	80057e8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2212      	movs	r2, #18
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fd88 	bl	80052aa <HAL_I2C_MasterRxCpltCallback>
}
 800579a:	e025      	b.n	80057e8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fd9b 	bl	800531e <HAL_I2C_ErrorCallback>
}
 80057e8:	bf00      	nop
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b04      	cmp	r3, #4
 8005806:	d11b      	bne.n	8005840 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005816:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800583e:	e0bd      	b.n	80059bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b03      	cmp	r3, #3
 8005848:	d129      	bne.n	800589e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005858:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b04      	cmp	r3, #4
 800585e:	d00a      	beq.n	8005876 <I2C_MasterReceive_BTF+0x86>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d007      	beq.n	8005876 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005874:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800589c:	e08e      	b.n	80059bc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d176      	bne.n	8005996 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d002      	beq.n	80058b4 <I2C_MasterReceive_BTF+0xc4>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d108      	bne.n	80058c6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e019      	b.n	80058fa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d002      	beq.n	80058d2 <I2C_MasterReceive_BTF+0xe2>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d108      	bne.n	80058e4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e00a      	b.n	80058fa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d007      	beq.n	80058fa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005954:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d10a      	bne.n	8005980 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7fc fb6f 	bl	800205c <HAL_I2C_MemRxCpltCallback>
}
 800597e:	e01d      	b.n	80059bc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2212      	movs	r2, #18
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fc8b 	bl	80052aa <HAL_I2C_MasterRxCpltCallback>
}
 8005994:	e012      	b.n	80059bc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b40      	cmp	r3, #64	; 0x40
 80059d6:	d117      	bne.n	8005a08 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059f0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80059f2:	e067      	b.n	8005ac4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	611a      	str	r2, [r3, #16]
}
 8005a06:	e05d      	b.n	8005ac4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a10:	d133      	bne.n	8005a7a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b21      	cmp	r3, #33	; 0x21
 8005a1c:	d109      	bne.n	8005a32 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	461a      	mov	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a2e:	611a      	str	r2, [r3, #16]
 8005a30:	e008      	b.n	8005a44 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	f043 0301 	orr.w	r3, r3, #1
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <I2C_Master_SB+0x92>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d108      	bne.n	8005a68 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d032      	beq.n	8005ac4 <I2C_Master_SB+0x100>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d02d      	beq.n	8005ac4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a76:	605a      	str	r2, [r3, #4]
}
 8005a78:	e024      	b.n	8005ac4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10e      	bne.n	8005aa0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	11db      	asrs	r3, r3, #7
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f003 0306 	and.w	r3, r3, #6
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f063 030f 	orn	r3, r3, #15
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	611a      	str	r2, [r3, #16]
}
 8005a9e:	e011      	b.n	8005ac4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10d      	bne.n	8005ac4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	11db      	asrs	r3, r3, #7
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f003 0306 	and.w	r3, r3, #6
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f063 030e 	orn	r3, r3, #14
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	611a      	str	r2, [r3, #16]
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr

08005ace <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <I2C_Master_ADD10+0x26>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d108      	bne.n	8005b06 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00c      	beq.n	8005b16 <I2C_Master_ADD10+0x48>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b14:	605a      	str	r2, [r3, #4]
  }
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bc80      	pop	{r7}
 8005b1e:	4770      	bx	lr

08005b20 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b091      	sub	sp, #68	; 0x44
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b22      	cmp	r3, #34	; 0x22
 8005b48:	f040 8174 	bne.w	8005e34 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10f      	bne.n	8005b74 <I2C_Master_ADDR+0x54>
 8005b54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d10b      	bne.n	8005b74 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	633b      	str	r3, [r7, #48]	; 0x30
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	e16b      	b.n	8005e4c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11d      	bne.n	8005bb8 <I2C_Master_ADDR+0x98>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b84:	d118      	bne.n	8005bb8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b86:	2300      	movs	r3, #0
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005baa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	651a      	str	r2, [r3, #80]	; 0x50
 8005bb6:	e149      	b.n	8005e4c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d113      	bne.n	8005bea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e120      	b.n	8005e2c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	f040 808a 	bne.w	8005d0a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bfc:	d137      	bne.n	8005c6e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1c:	d113      	bne.n	8005c46 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c2c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	e0f2      	b.n	8005e2c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c46:	2300      	movs	r3, #0
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	623b      	str	r3, [r7, #32]
 8005c5a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e0de      	b.n	8005e2c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d02e      	beq.n	8005cd2 <I2C_Master_ADDR+0x1b2>
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d02b      	beq.n	8005cd2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	2b12      	cmp	r3, #18
 8005c7e:	d102      	bne.n	8005c86 <I2C_Master_ADDR+0x166>
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d125      	bne.n	8005cd2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d00e      	beq.n	8005caa <I2C_Master_ADDR+0x18a>
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d00b      	beq.n	8005caa <I2C_Master_ADDR+0x18a>
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d008      	beq.n	8005caa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e007      	b.n	8005cba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	e0ac      	b.n	8005e2c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	e090      	b.n	8005e2c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d158      	bne.n	8005dc6 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d021      	beq.n	8005d5e <I2C_Master_ADDR+0x23e>
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d01e      	beq.n	8005d5e <I2C_Master_ADDR+0x23e>
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d01b      	beq.n	8005d5e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d34:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	e012      	b.n	8005d84 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d6c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d92:	d14b      	bne.n	8005e2c <I2C_Master_ADDR+0x30c>
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d9a:	d00b      	beq.n	8005db4 <I2C_Master_ADDR+0x294>
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d008      	beq.n	8005db4 <I2C_Master_ADDR+0x294>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	2b08      	cmp	r3, #8
 8005da6:	d005      	beq.n	8005db4 <I2C_Master_ADDR+0x294>
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	2b10      	cmp	r3, #16
 8005dac:	d002      	beq.n	8005db4 <I2C_Master_ADDR+0x294>
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d13b      	bne.n	8005e2c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005dc2:	605a      	str	r2, [r3, #4]
 8005dc4:	e032      	b.n	8005e2c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dd4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de4:	d117      	bne.n	8005e16 <I2C_Master_ADDR+0x2f6>
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005dec:	d00b      	beq.n	8005e06 <I2C_Master_ADDR+0x2e6>
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d008      	beq.n	8005e06 <I2C_Master_ADDR+0x2e6>
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d005      	beq.n	8005e06 <I2C_Master_ADDR+0x2e6>
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d002      	beq.n	8005e06 <I2C_Master_ADDR+0x2e6>
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d107      	bne.n	8005e16 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e14:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005e32:	e00b      	b.n	8005e4c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e34:	2300      	movs	r3, #0
 8005e36:	60bb      	str	r3, [r7, #8]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	60bb      	str	r3, [r7, #8]
 8005e48:	68bb      	ldr	r3, [r7, #8]
}
 8005e4a:	e7ff      	b.n	8005e4c <I2C_Master_ADDR+0x32c>
 8005e4c:	bf00      	nop
 8005e4e:	3744      	adds	r7, #68	; 0x44
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bc80      	pop	{r7}
 8005e54:	4770      	bx	lr

08005e56 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d02b      	beq.n	8005ec8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	781a      	ldrb	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d114      	bne.n	8005ec8 <I2C_SlaveTransmit_TXE+0x72>
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b29      	cmp	r3, #41	; 0x29
 8005ea2:	d111      	bne.n	8005ec8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2221      	movs	r2, #33	; 0x21
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2228      	movs	r2, #40	; 0x28
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7ff f9fa 	bl	80052bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d011      	beq.n	8005f06 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	781a      	ldrb	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr

08005f10 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d02c      	beq.n	8005f84 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d114      	bne.n	8005f84 <I2C_SlaveReceive_RXNE+0x74>
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f5e:	d111      	bne.n	8005f84 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2222      	movs	r2, #34	; 0x22
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2228      	movs	r2, #40	; 0x28
 8005f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff f9a5 	bl	80052ce <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d012      	beq.n	8005fc4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bc80      	pop	{r7}
 8005fcc:	4770      	bx	lr

08005fce <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005fe8:	2b28      	cmp	r3, #40	; 0x28
 8005fea:	d127      	bne.n	800603c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ffa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	089b      	lsrs	r3, r3, #2
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006008:	2301      	movs	r3, #1
 800600a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	09db      	lsrs	r3, r3, #7
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	81bb      	strh	r3, [r7, #12]
 800601e:	e002      	b.n	8006026 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800602e:	89ba      	ldrh	r2, [r7, #12]
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff f953 	bl	80052e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800603a:	e00e      	b.n	800605a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800603c:	2300      	movs	r3, #0
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	60bb      	str	r3, [r7, #8]
 8006050:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006072:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006082:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006084:	2300      	movs	r3, #0
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	60bb      	str	r3, [r7, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c0:	d172      	bne.n	80061a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b22      	cmp	r3, #34	; 0x22
 80060c6:	d002      	beq.n	80060ce <I2C_Slave_STOPF+0x6a>
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b2a      	cmp	r3, #42	; 0x2a
 80060cc:	d135      	bne.n	800613a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f043 0204 	orr.w	r2, r3, #4
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006100:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe f914 	bl	8004334 <HAL_DMA_GetState>
 800610c:	4603      	mov	r3, r0
 800610e:	2b01      	cmp	r3, #1
 8006110:	d049      	beq.n	80061a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	4a69      	ldr	r2, [pc, #420]	; (80062bc <I2C_Slave_STOPF+0x258>)
 8006118:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	4618      	mov	r0, r3
 8006120:	f7fd ff8c 	bl	800403c <HAL_DMA_Abort_IT>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d03d      	beq.n	80061a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006138:	e035      	b.n	80061a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	b29a      	uxth	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f043 0204 	orr.w	r2, r3, #4
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800616c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe f8de 	bl	8004334 <HAL_DMA_GetState>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d014      	beq.n	80061a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	4a4e      	ldr	r2, [pc, #312]	; (80062bc <I2C_Slave_STOPF+0x258>)
 8006184:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618a:	4618      	mov	r0, r3
 800618c:	f7fd ff56 	bl	800403c <HAL_DMA_Abort_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061a0:	4610      	mov	r0, r2
 80061a2:	4798      	blx	r3
 80061a4:	e000      	b.n	80061a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d03e      	beq.n	8006230 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d112      	bne.n	80061e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f0:	2b40      	cmp	r3, #64	; 0x40
 80061f2:	d112      	bne.n	800621a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	f043 0204 	orr.w	r2, r3, #4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f8b3 	bl	80063a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800623e:	e039      	b.n	80062b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006240:	7bfb      	ldrb	r3, [r7, #15]
 8006242:	2b2a      	cmp	r3, #42	; 0x2a
 8006244:	d109      	bne.n	800625a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2228      	movs	r2, #40	; 0x28
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff f83a 	bl	80052ce <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b28      	cmp	r3, #40	; 0x28
 8006264:	d111      	bne.n	800628a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <I2C_Slave_STOPF+0x25c>)
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff f839 	bl	80052fa <HAL_I2C_ListenCpltCallback>
}
 8006288:	e014      	b.n	80062b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	2b22      	cmp	r3, #34	; 0x22
 8006290:	d002      	beq.n	8006298 <I2C_Slave_STOPF+0x234>
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b22      	cmp	r3, #34	; 0x22
 8006296:	d10d      	bne.n	80062b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff f80d 	bl	80052ce <HAL_I2C_SlaveRxCpltCallback>
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	08006b1d 	.word	0x08006b1d
 80062c0:	ffff0000 	.word	0xffff0000

080062c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d002      	beq.n	80062e6 <I2C_Slave_AF+0x22>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d129      	bne.n	800633a <I2C_Slave_AF+0x76>
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b28      	cmp	r3, #40	; 0x28
 80062ea:	d126      	bne.n	800633a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a2c      	ldr	r2, [pc, #176]	; (80063a0 <I2C_Slave_AF+0xdc>)
 80062f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006300:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800630a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fe ffe1 	bl	80052fa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006338:	e02e      	b.n	8006398 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b21      	cmp	r3, #33	; 0x21
 800633e:	d126      	bne.n	800638e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a17      	ldr	r2, [pc, #92]	; (80063a0 <I2C_Slave_AF+0xdc>)
 8006344:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2221      	movs	r2, #33	; 0x21
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800636a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006374:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006384:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fe ff98 	bl	80052bc <HAL_I2C_SlaveTxCpltCallback>
}
 800638c:	e004      	b.n	8006398 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006396:	615a      	str	r2, [r3, #20]
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	ffff0000 	.word	0xffff0000

080063a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	2b10      	cmp	r3, #16
 80063c0:	d002      	beq.n	80063c8 <I2C_ITError+0x24>
 80063c2:	7bbb      	ldrb	r3, [r7, #14]
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d10a      	bne.n	80063de <I2C_ITError+0x3a>
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	2b22      	cmp	r3, #34	; 0x22
 80063cc:	d107      	bne.n	80063de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063e4:	2b28      	cmp	r3, #40	; 0x28
 80063e6:	d107      	bne.n	80063f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2228      	movs	r2, #40	; 0x28
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063f6:	e015      	b.n	8006424 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006406:	d00a      	beq.n	800641e <I2C_ITError+0x7a>
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	2b60      	cmp	r3, #96	; 0x60
 800640c:	d007      	beq.n	800641e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800642e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006432:	d161      	bne.n	80064f8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006442:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006448:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800644c:	2b01      	cmp	r3, #1
 800644e:	d020      	beq.n	8006492 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006454:	4a6a      	ldr	r2, [pc, #424]	; (8006600 <I2C_ITError+0x25c>)
 8006456:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645c:	4618      	mov	r0, r3
 800645e:	f7fd fded 	bl	800403c <HAL_DMA_Abort_IT>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8089 	beq.w	800657c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800648c:	4610      	mov	r0, r2
 800648e:	4798      	blx	r3
 8006490:	e074      	b.n	800657c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	4a5a      	ldr	r2, [pc, #360]	; (8006600 <I2C_ITError+0x25c>)
 8006498:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fd fdcc 	bl	800403c <HAL_DMA_Abort_IT>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d068      	beq.n	800657c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d10b      	bne.n	80064d0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691a      	ldr	r2, [r3, #16]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064f2:	4610      	mov	r0, r2
 80064f4:	4798      	blx	r3
 80064f6:	e041      	b.n	800657c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b60      	cmp	r3, #96	; 0x60
 8006502:	d125      	bne.n	8006550 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d10b      	bne.n	8006538 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0201 	bic.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7fe fef1 	bl	8005330 <HAL_I2C_AbortCpltCallback>
 800654e:	e015      	b.n	800657c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d10b      	bne.n	8006576 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fe fed1 	bl	800531e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10e      	bne.n	80065aa <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d007      	beq.n	80065ba <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065b8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d113      	bne.n	80065f6 <I2C_ITError+0x252>
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	2b28      	cmp	r3, #40	; 0x28
 80065d2:	d110      	bne.n	80065f6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a0b      	ldr	r2, [pc, #44]	; (8006604 <I2C_ITError+0x260>)
 80065d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fe fe82 	bl	80052fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	08006b1d 	.word	0x08006b1d
 8006604:	ffff0000 	.word	0xffff0000

08006608 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af02      	add	r7, sp, #8
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	4608      	mov	r0, r1
 8006612:	4611      	mov	r1, r2
 8006614:	461a      	mov	r2, r3
 8006616:	4603      	mov	r3, r0
 8006618:	817b      	strh	r3, [r7, #10]
 800661a:	460b      	mov	r3, r1
 800661c:	813b      	strh	r3, [r7, #8]
 800661e:	4613      	mov	r3, r2
 8006620:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	2200      	movs	r2, #0
 800663a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fb14 	bl	8006c6c <I2C_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00d      	beq.n	8006666 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006658:	d103      	bne.n	8006662 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006660:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e05f      	b.n	8006726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006666:	897b      	ldrh	r3, [r7, #10]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	492d      	ldr	r1, [pc, #180]	; (8006730 <I2C_RequestMemoryWrite+0x128>)
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 fb4c 	bl	8006d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e04c      	b.n	8006726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a4:	6a39      	ldr	r1, [r7, #32]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 fbb6 	bl	8006e18 <I2C_WaitOnTXEFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d107      	bne.n	80066ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e02b      	b.n	8006726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d105      	bne.n	80066e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066d4:	893b      	ldrh	r3, [r7, #8]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	611a      	str	r2, [r3, #16]
 80066de:	e021      	b.n	8006724 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066e0:	893b      	ldrh	r3, [r7, #8]
 80066e2:	0a1b      	lsrs	r3, r3, #8
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f0:	6a39      	ldr	r1, [r7, #32]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fb90 	bl	8006e18 <I2C_WaitOnTXEFlagUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00d      	beq.n	800671a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	2b04      	cmp	r3, #4
 8006704:	d107      	bne.n	8006716 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e005      	b.n	8006726 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800671a:	893b      	ldrh	r3, [r7, #8]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	00010002 	.word	0x00010002

08006734 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	4608      	mov	r0, r1
 800673e:	4611      	mov	r1, r2
 8006740:	461a      	mov	r2, r3
 8006742:	4603      	mov	r3, r0
 8006744:	817b      	strh	r3, [r7, #10]
 8006746:	460b      	mov	r3, r1
 8006748:	813b      	strh	r3, [r7, #8]
 800674a:	4613      	mov	r3, r2
 800674c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800675c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800676c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	2200      	movs	r2, #0
 8006776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fa76 	bl	8006c6c <I2C_WaitOnFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00d      	beq.n	80067a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006794:	d103      	bne.n	800679e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800679c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e0aa      	b.n	80068f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067a2:	897b      	ldrh	r3, [r7, #10]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	6a3a      	ldr	r2, [r7, #32]
 80067b6:	4952      	ldr	r1, [pc, #328]	; (8006900 <I2C_RequestMemoryRead+0x1cc>)
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 faae 	bl	8006d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e097      	b.n	80068f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e0:	6a39      	ldr	r1, [r7, #32]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fb18 	bl	8006e18 <I2C_WaitOnTXEFlagUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00d      	beq.n	800680a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d107      	bne.n	8006806 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e076      	b.n	80068f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d105      	bne.n	800681c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006810:	893b      	ldrh	r3, [r7, #8]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	611a      	str	r2, [r3, #16]
 800681a:	e021      	b.n	8006860 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800681c:	893b      	ldrh	r3, [r7, #8]
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	b29b      	uxth	r3, r3
 8006822:	b2da      	uxtb	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800682a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682c:	6a39      	ldr	r1, [r7, #32]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 faf2 	bl	8006e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00d      	beq.n	8006856 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	2b04      	cmp	r3, #4
 8006840:	d107      	bne.n	8006852 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e050      	b.n	80068f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006856:	893b      	ldrh	r3, [r7, #8]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	6a39      	ldr	r1, [r7, #32]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fad7 	bl	8006e18 <I2C_WaitOnTXEFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00d      	beq.n	800688c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	2b04      	cmp	r3, #4
 8006876:	d107      	bne.n	8006888 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006886:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e035      	b.n	80068f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f9df 	bl	8006c6c <I2C_WaitOnFlagUntilTimeout>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00d      	beq.n	80068d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c2:	d103      	bne.n	80068cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e013      	b.n	80068f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068d0:	897b      	ldrh	r3, [r7, #10]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	6a3a      	ldr	r2, [r7, #32]
 80068e4:	4906      	ldr	r1, [pc, #24]	; (8006900 <I2C_RequestMemoryRead+0x1cc>)
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fa17 	bl	8006d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	00010002 	.word	0x00010002

08006904 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006918:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006920:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006936:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006944:	2200      	movs	r2, #0
 8006946:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	2200      	movs	r2, #0
 8006956:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006958:	7cfb      	ldrb	r3, [r7, #19]
 800695a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800695e:	2b21      	cmp	r3, #33	; 0x21
 8006960:	d007      	beq.n	8006972 <I2C_DMAXferCplt+0x6e>
 8006962:	7cfb      	ldrb	r3, [r7, #19]
 8006964:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006968:	2b22      	cmp	r3, #34	; 0x22
 800696a:	d131      	bne.n	80069d0 <I2C_DMAXferCplt+0xcc>
 800696c:	7cbb      	ldrb	r3, [r7, #18]
 800696e:	2b20      	cmp	r3, #32
 8006970:	d12e      	bne.n	80069d0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006980:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2200      	movs	r2, #0
 8006986:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006988:	7cfb      	ldrb	r3, [r7, #19]
 800698a:	2b29      	cmp	r3, #41	; 0x29
 800698c:	d10a      	bne.n	80069a4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2221      	movs	r2, #33	; 0x21
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2228      	movs	r2, #40	; 0x28
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800699c:	6978      	ldr	r0, [r7, #20]
 800699e:	f7fe fc8d 	bl	80052bc <HAL_I2C_SlaveTxCpltCallback>
 80069a2:	e00c      	b.n	80069be <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	2b2a      	cmp	r3, #42	; 0x2a
 80069a8:	d109      	bne.n	80069be <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2222      	movs	r2, #34	; 0x22
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2228      	movs	r2, #40	; 0x28
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069b8:	6978      	ldr	r0, [r7, #20]
 80069ba:	f7fe fc88 	bl	80052ce <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80069cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80069ce:	e06a      	b.n	8006aa6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d064      	beq.n	8006aa6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d107      	bne.n	80069f6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006a04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a0c:	d009      	beq.n	8006a22 <I2C_DMAXferCplt+0x11e>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d006      	beq.n	8006a22 <I2C_DMAXferCplt+0x11e>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a1a:	d002      	beq.n	8006a22 <I2C_DMAXferCplt+0x11e>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d107      	bne.n	8006a32 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a30:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a40:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a50:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2200      	movs	r2, #0
 8006a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006a60:	6978      	ldr	r0, [r7, #20]
 8006a62:	f7fe fc5c 	bl	800531e <HAL_I2C_ErrorCallback>
}
 8006a66:	e01e      	b.n	8006aa6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	d10a      	bne.n	8006a92 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2200      	movs	r2, #0
 8006a88:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006a8a:	6978      	ldr	r0, [r7, #20]
 8006a8c:	f7fb fae6 	bl	800205c <HAL_I2C_MemRxCpltCallback>
}
 8006a90:	e009      	b.n	8006aa6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2212      	movs	r2, #18
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006aa0:	6978      	ldr	r0, [r7, #20]
 8006aa2:	f7fe fc02 	bl	80052aa <HAL_I2C_MasterRxCpltCallback>
}
 8006aa6:	bf00      	nop
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac8:	2200      	movs	r2, #0
 8006aca:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	2200      	movs	r2, #0
 8006ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aea:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f043 0210 	orr.w	r2, r3, #16
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7fe fc05 	bl	800531e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b34:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b36:	4b4b      	ldr	r3, [pc, #300]	; (8006c64 <I2C_DMAAbort+0x148>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	08db      	lsrs	r3, r3, #3
 8006b3c:	4a4a      	ldr	r2, [pc, #296]	; (8006c68 <I2C_DMAAbort+0x14c>)
 8006b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b42:	0a1a      	lsrs	r2, r3, #8
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	00da      	lsls	r2, r3, #3
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5a:	f043 0220 	orr.w	r2, r3, #32
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006b62:	e00a      	b.n	8006b7a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b78:	d0ea      	beq.n	8006b50 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b86:	2200      	movs	r2, #0
 8006b88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	2200      	movs	r2, #0
 8006b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2200      	movs	r2, #0
 8006bae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	2200      	movs	r2, #0
 8006bce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0201 	bic.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d10e      	bne.n	8006c0a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c02:	6978      	ldr	r0, [r7, #20]
 8006c04:	f7fe fb94 	bl	8005330 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c08:	e027      	b.n	8006c5a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c0a:	7cfb      	ldrb	r3, [r7, #19]
 8006c0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c10:	2b28      	cmp	r3, #40	; 0x28
 8006c12:	d117      	bne.n	8006c44 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0201 	orr.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2228      	movs	r2, #40	; 0x28
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c42:	e007      	b.n	8006c54 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006c54:	6978      	ldr	r0, [r7, #20]
 8006c56:	f7fe fb62 	bl	800531e <HAL_I2C_ErrorCallback>
}
 8006c5a:	bf00      	nop
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000008 	.word	0x20000008
 8006c68:	14f8b589 	.word	0x14f8b589

08006c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c7c:	e025      	b.n	8006cca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d021      	beq.n	8006cca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c86:	f7fc faaf 	bl	80031e8 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d302      	bcc.n	8006c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d116      	bne.n	8006cca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f043 0220 	orr.w	r2, r3, #32
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e023      	b.n	8006d12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10d      	bne.n	8006cf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	43da      	mvns	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	bf0c      	ite	eq
 8006ce6:	2301      	moveq	r3, #1
 8006ce8:	2300      	movne	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	e00c      	b.n	8006d0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	43da      	mvns	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bf0c      	ite	eq
 8006d02:	2301      	moveq	r3, #1
 8006d04:	2300      	movne	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	461a      	mov	r2, r3
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d0b6      	beq.n	8006c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d28:	e051      	b.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d38:	d123      	bne.n	8006d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	f043 0204 	orr.w	r2, r3, #4
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e046      	b.n	8006e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d021      	beq.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8a:	f7fc fa2d 	bl	80031e8 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d302      	bcc.n	8006da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d116      	bne.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f043 0220 	orr.w	r2, r3, #32
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e020      	b.n	8006e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	0c1b      	lsrs	r3, r3, #16
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d10c      	bne.n	8006df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	43da      	mvns	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	bf14      	ite	ne
 8006dea:	2301      	movne	r3, #1
 8006dec:	2300      	moveq	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	e00b      	b.n	8006e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	43da      	mvns	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bf14      	ite	ne
 8006e04:	2301      	movne	r3, #1
 8006e06:	2300      	moveq	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d18d      	bne.n	8006d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e24:	e02d      	b.n	8006e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 f8aa 	bl	8006f80 <I2C_IsAcknowledgeFailed>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e02d      	b.n	8006e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d021      	beq.n	8006e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3e:	f7fc f9d3 	bl	80031e8 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d302      	bcc.n	8006e54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d116      	bne.n	8006e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e007      	b.n	8006e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8c:	2b80      	cmp	r3, #128	; 0x80
 8006e8e:	d1ca      	bne.n	8006e26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ea6:	e02d      	b.n	8006f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f869 	bl	8006f80 <I2C_IsAcknowledgeFailed>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e02d      	b.n	8006f14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d021      	beq.n	8006f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec0:	f7fc f992 	bl	80031e8 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d116      	bne.n	8006f04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	f043 0220 	orr.w	r2, r3, #32
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e007      	b.n	8006f14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f003 0304 	and.w	r3, r3, #4
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d1ca      	bne.n	8006ea8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f28:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	08db      	lsrs	r3, r3, #3
 8006f2e:	4a13      	ldr	r2, [pc, #76]	; (8006f7c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	0a1a      	lsrs	r2, r3, #8
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d107      	bne.n	8006f5a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e008      	b.n	8006f6c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f68:	d0e9      	beq.n	8006f3e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000008 	.word	0x20000008
 8006f7c:	14f8b589 	.word	0x14f8b589

08006f80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f96:	d11b      	bne.n	8006fd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	f043 0204 	orr.w	r2, r3, #4
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr

08006fdc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006fec:	d103      	bne.n	8006ff6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ff4:	e007      	b.n	8007006 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006ffe:	d102      	bne.n	8007006 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2208      	movs	r2, #8
 8007004:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr

08007010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e272      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 8087 	beq.w	800713e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007030:	4b92      	ldr	r3, [pc, #584]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f003 030c 	and.w	r3, r3, #12
 8007038:	2b04      	cmp	r3, #4
 800703a:	d00c      	beq.n	8007056 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800703c:	4b8f      	ldr	r3, [pc, #572]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f003 030c 	and.w	r3, r3, #12
 8007044:	2b08      	cmp	r3, #8
 8007046:	d112      	bne.n	800706e <HAL_RCC_OscConfig+0x5e>
 8007048:	4b8c      	ldr	r3, [pc, #560]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007054:	d10b      	bne.n	800706e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007056:	4b89      	ldr	r3, [pc, #548]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d06c      	beq.n	800713c <HAL_RCC_OscConfig+0x12c>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d168      	bne.n	800713c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e24c      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007076:	d106      	bne.n	8007086 <HAL_RCC_OscConfig+0x76>
 8007078:	4b80      	ldr	r3, [pc, #512]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a7f      	ldr	r2, [pc, #508]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 800707e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e02e      	b.n	80070e4 <HAL_RCC_OscConfig+0xd4>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10c      	bne.n	80070a8 <HAL_RCC_OscConfig+0x98>
 800708e:	4b7b      	ldr	r3, [pc, #492]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a7a      	ldr	r2, [pc, #488]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	4b78      	ldr	r3, [pc, #480]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a77      	ldr	r2, [pc, #476]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80070a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	e01d      	b.n	80070e4 <HAL_RCC_OscConfig+0xd4>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070b0:	d10c      	bne.n	80070cc <HAL_RCC_OscConfig+0xbc>
 80070b2:	4b72      	ldr	r3, [pc, #456]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a71      	ldr	r2, [pc, #452]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80070b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	4b6f      	ldr	r3, [pc, #444]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a6e      	ldr	r2, [pc, #440]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80070c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	e00b      	b.n	80070e4 <HAL_RCC_OscConfig+0xd4>
 80070cc:	4b6b      	ldr	r3, [pc, #428]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a6a      	ldr	r2, [pc, #424]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80070d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	4b68      	ldr	r3, [pc, #416]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a67      	ldr	r2, [pc, #412]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80070de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d013      	beq.n	8007114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ec:	f7fc f87c 	bl	80031e8 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f4:	f7fc f878 	bl	80031e8 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b64      	cmp	r3, #100	; 0x64
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e200      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007106:	4b5d      	ldr	r3, [pc, #372]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0f0      	beq.n	80070f4 <HAL_RCC_OscConfig+0xe4>
 8007112:	e014      	b.n	800713e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007114:	f7fc f868 	bl	80031e8 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800711c:	f7fc f864 	bl	80031e8 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b64      	cmp	r3, #100	; 0x64
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e1ec      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800712e:	4b53      	ldr	r3, [pc, #332]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1f0      	bne.n	800711c <HAL_RCC_OscConfig+0x10c>
 800713a:	e000      	b.n	800713e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800713c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d063      	beq.n	8007212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800714a:	4b4c      	ldr	r3, [pc, #304]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f003 030c 	and.w	r3, r3, #12
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00b      	beq.n	800716e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007156:	4b49      	ldr	r3, [pc, #292]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f003 030c 	and.w	r3, r3, #12
 800715e:	2b08      	cmp	r3, #8
 8007160:	d11c      	bne.n	800719c <HAL_RCC_OscConfig+0x18c>
 8007162:	4b46      	ldr	r3, [pc, #280]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d116      	bne.n	800719c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800716e:	4b43      	ldr	r3, [pc, #268]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_RCC_OscConfig+0x176>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d001      	beq.n	8007186 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e1c0      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007186:	4b3d      	ldr	r3, [pc, #244]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	4939      	ldr	r1, [pc, #228]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007196:	4313      	orrs	r3, r2
 8007198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800719a:	e03a      	b.n	8007212 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d020      	beq.n	80071e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071a4:	4b36      	ldr	r3, [pc, #216]	; (8007280 <HAL_RCC_OscConfig+0x270>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071aa:	f7fc f81d 	bl	80031e8 <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071b0:	e008      	b.n	80071c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b2:	f7fc f819 	bl	80031e8 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e1a1      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071c4:	4b2d      	ldr	r3, [pc, #180]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f0      	beq.n	80071b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071d0:	4b2a      	ldr	r3, [pc, #168]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	00db      	lsls	r3, r3, #3
 80071de:	4927      	ldr	r1, [pc, #156]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	600b      	str	r3, [r1, #0]
 80071e4:	e015      	b.n	8007212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071e6:	4b26      	ldr	r3, [pc, #152]	; (8007280 <HAL_RCC_OscConfig+0x270>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ec:	f7fb fffc 	bl	80031e8 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071f4:	f7fb fff8 	bl	80031e8 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e180      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007206:	4b1d      	ldr	r3, [pc, #116]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f0      	bne.n	80071f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d03a      	beq.n	8007294 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d019      	beq.n	800725a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007226:	4b17      	ldr	r3, [pc, #92]	; (8007284 <HAL_RCC_OscConfig+0x274>)
 8007228:	2201      	movs	r2, #1
 800722a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800722c:	f7fb ffdc 	bl	80031e8 <HAL_GetTick>
 8007230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007232:	e008      	b.n	8007246 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007234:	f7fb ffd8 	bl	80031e8 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b02      	cmp	r3, #2
 8007240:	d901      	bls.n	8007246 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e160      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007246:	4b0d      	ldr	r3, [pc, #52]	; (800727c <HAL_RCC_OscConfig+0x26c>)
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0f0      	beq.n	8007234 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007252:	2001      	movs	r0, #1
 8007254:	f000 fad8 	bl	8007808 <RCC_Delay>
 8007258:	e01c      	b.n	8007294 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800725a:	4b0a      	ldr	r3, [pc, #40]	; (8007284 <HAL_RCC_OscConfig+0x274>)
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007260:	f7fb ffc2 	bl	80031e8 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007266:	e00f      	b.n	8007288 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007268:	f7fb ffbe 	bl	80031e8 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d908      	bls.n	8007288 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e146      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
 800727a:	bf00      	nop
 800727c:	40021000 	.word	0x40021000
 8007280:	42420000 	.word	0x42420000
 8007284:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007288:	4b92      	ldr	r3, [pc, #584]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e9      	bne.n	8007268 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 80a6 	beq.w	80073ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072a2:	2300      	movs	r3, #0
 80072a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072a6:	4b8b      	ldr	r3, [pc, #556]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10d      	bne.n	80072ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072b2:	4b88      	ldr	r3, [pc, #544]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	4a87      	ldr	r2, [pc, #540]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80072b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072bc:	61d3      	str	r3, [r2, #28]
 80072be:	4b85      	ldr	r3, [pc, #532]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c6:	60bb      	str	r3, [r7, #8]
 80072c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ca:	2301      	movs	r3, #1
 80072cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ce:	4b82      	ldr	r3, [pc, #520]	; (80074d8 <HAL_RCC_OscConfig+0x4c8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d118      	bne.n	800730c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072da:	4b7f      	ldr	r3, [pc, #508]	; (80074d8 <HAL_RCC_OscConfig+0x4c8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a7e      	ldr	r2, [pc, #504]	; (80074d8 <HAL_RCC_OscConfig+0x4c8>)
 80072e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072e6:	f7fb ff7f 	bl	80031e8 <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ee:	f7fb ff7b 	bl	80031e8 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b64      	cmp	r3, #100	; 0x64
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e103      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007300:	4b75      	ldr	r3, [pc, #468]	; (80074d8 <HAL_RCC_OscConfig+0x4c8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0f0      	beq.n	80072ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d106      	bne.n	8007322 <HAL_RCC_OscConfig+0x312>
 8007314:	4b6f      	ldr	r3, [pc, #444]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	4a6e      	ldr	r2, [pc, #440]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800731a:	f043 0301 	orr.w	r3, r3, #1
 800731e:	6213      	str	r3, [r2, #32]
 8007320:	e02d      	b.n	800737e <HAL_RCC_OscConfig+0x36e>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10c      	bne.n	8007344 <HAL_RCC_OscConfig+0x334>
 800732a:	4b6a      	ldr	r3, [pc, #424]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	4a69      	ldr	r2, [pc, #420]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	6213      	str	r3, [r2, #32]
 8007336:	4b67      	ldr	r3, [pc, #412]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	4a66      	ldr	r2, [pc, #408]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800733c:	f023 0304 	bic.w	r3, r3, #4
 8007340:	6213      	str	r3, [r2, #32]
 8007342:	e01c      	b.n	800737e <HAL_RCC_OscConfig+0x36e>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b05      	cmp	r3, #5
 800734a:	d10c      	bne.n	8007366 <HAL_RCC_OscConfig+0x356>
 800734c:	4b61      	ldr	r3, [pc, #388]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	4a60      	ldr	r2, [pc, #384]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007352:	f043 0304 	orr.w	r3, r3, #4
 8007356:	6213      	str	r3, [r2, #32]
 8007358:	4b5e      	ldr	r3, [pc, #376]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	4a5d      	ldr	r2, [pc, #372]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800735e:	f043 0301 	orr.w	r3, r3, #1
 8007362:	6213      	str	r3, [r2, #32]
 8007364:	e00b      	b.n	800737e <HAL_RCC_OscConfig+0x36e>
 8007366:	4b5b      	ldr	r3, [pc, #364]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	4a5a      	ldr	r2, [pc, #360]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800736c:	f023 0301 	bic.w	r3, r3, #1
 8007370:	6213      	str	r3, [r2, #32]
 8007372:	4b58      	ldr	r3, [pc, #352]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	4a57      	ldr	r2, [pc, #348]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007378:	f023 0304 	bic.w	r3, r3, #4
 800737c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d015      	beq.n	80073b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007386:	f7fb ff2f 	bl	80031e8 <HAL_GetTick>
 800738a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800738c:	e00a      	b.n	80073a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738e:	f7fb ff2b 	bl	80031e8 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	f241 3288 	movw	r2, #5000	; 0x1388
 800739c:	4293      	cmp	r3, r2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e0b1      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a4:	4b4b      	ldr	r3, [pc, #300]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0ee      	beq.n	800738e <HAL_RCC_OscConfig+0x37e>
 80073b0:	e014      	b.n	80073dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073b2:	f7fb ff19 	bl	80031e8 <HAL_GetTick>
 80073b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073b8:	e00a      	b.n	80073d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ba:	f7fb ff15 	bl	80031e8 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d901      	bls.n	80073d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e09b      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073d0:	4b40      	ldr	r3, [pc, #256]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1ee      	bne.n	80073ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d105      	bne.n	80073ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073e2:	4b3c      	ldr	r3, [pc, #240]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	4a3b      	ldr	r2, [pc, #236]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80073e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8087 	beq.w	8007506 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073f8:	4b36      	ldr	r3, [pc, #216]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f003 030c 	and.w	r3, r3, #12
 8007400:	2b08      	cmp	r3, #8
 8007402:	d061      	beq.n	80074c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	2b02      	cmp	r3, #2
 800740a:	d146      	bne.n	800749a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740c:	4b33      	ldr	r3, [pc, #204]	; (80074dc <HAL_RCC_OscConfig+0x4cc>)
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007412:	f7fb fee9 	bl	80031e8 <HAL_GetTick>
 8007416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800741a:	f7fb fee5 	bl	80031e8 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e06d      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800742c:	4b29      	ldr	r3, [pc, #164]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1f0      	bne.n	800741a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007440:	d108      	bne.n	8007454 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007442:	4b24      	ldr	r3, [pc, #144]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	4921      	ldr	r1, [pc, #132]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007450:	4313      	orrs	r3, r2
 8007452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007454:	4b1f      	ldr	r3, [pc, #124]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a19      	ldr	r1, [r3, #32]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	430b      	orrs	r3, r1
 8007466:	491b      	ldr	r1, [pc, #108]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 8007468:	4313      	orrs	r3, r2
 800746a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800746c:	4b1b      	ldr	r3, [pc, #108]	; (80074dc <HAL_RCC_OscConfig+0x4cc>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007472:	f7fb feb9 	bl	80031e8 <HAL_GetTick>
 8007476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747a:	f7fb feb5 	bl	80031e8 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e03d      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800748c:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d0f0      	beq.n	800747a <HAL_RCC_OscConfig+0x46a>
 8007498:	e035      	b.n	8007506 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749a:	4b10      	ldr	r3, [pc, #64]	; (80074dc <HAL_RCC_OscConfig+0x4cc>)
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7fb fea2 	bl	80031e8 <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a8:	f7fb fe9e 	bl	80031e8 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e026      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074ba:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <HAL_RCC_OscConfig+0x4c4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f0      	bne.n	80074a8 <HAL_RCC_OscConfig+0x498>
 80074c6:	e01e      	b.n	8007506 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	69db      	ldr	r3, [r3, #28]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d107      	bne.n	80074e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e019      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40007000 	.word	0x40007000
 80074dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <HAL_RCC_OscConfig+0x500>)
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d106      	bne.n	8007502 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fe:	429a      	cmp	r2, r3
 8007500:	d001      	beq.n	8007506 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	40021000 	.word	0x40021000

08007514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0d0      	b.n	80076ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007528:	4b6a      	ldr	r3, [pc, #424]	; (80076d4 <HAL_RCC_ClockConfig+0x1c0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d910      	bls.n	8007558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007536:	4b67      	ldr	r3, [pc, #412]	; (80076d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f023 0207 	bic.w	r2, r3, #7
 800753e:	4965      	ldr	r1, [pc, #404]	; (80076d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	4313      	orrs	r3, r2
 8007544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007546:	4b63      	ldr	r3, [pc, #396]	; (80076d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d001      	beq.n	8007558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e0b8      	b.n	80076ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d020      	beq.n	80075a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d005      	beq.n	800757c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007570:	4b59      	ldr	r3, [pc, #356]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4a58      	ldr	r2, [pc, #352]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800757a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007588:	4b53      	ldr	r3, [pc, #332]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4a52      	ldr	r2, [pc, #328]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 800758e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007594:	4b50      	ldr	r3, [pc, #320]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	494d      	ldr	r1, [pc, #308]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d040      	beq.n	8007634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d107      	bne.n	80075ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ba:	4b47      	ldr	r3, [pc, #284]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d115      	bne.n	80075f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e07f      	b.n	80076ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d107      	bne.n	80075e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d2:	4b41      	ldr	r3, [pc, #260]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e073      	b.n	80076ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e2:	4b3d      	ldr	r3, [pc, #244]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e06b      	b.n	80076ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075f2:	4b39      	ldr	r3, [pc, #228]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f023 0203 	bic.w	r2, r3, #3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	4936      	ldr	r1, [pc, #216]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007600:	4313      	orrs	r3, r2
 8007602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007604:	f7fb fdf0 	bl	80031e8 <HAL_GetTick>
 8007608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800760a:	e00a      	b.n	8007622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800760c:	f7fb fdec 	bl	80031e8 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	f241 3288 	movw	r2, #5000	; 0x1388
 800761a:	4293      	cmp	r3, r2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e053      	b.n	80076ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007622:	4b2d      	ldr	r3, [pc, #180]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f003 020c 	and.w	r2, r3, #12
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	429a      	cmp	r2, r3
 8007632:	d1eb      	bne.n	800760c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007634:	4b27      	ldr	r3, [pc, #156]	; (80076d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d210      	bcs.n	8007664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007642:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f023 0207 	bic.w	r2, r3, #7
 800764a:	4922      	ldr	r1, [pc, #136]	; (80076d4 <HAL_RCC_ClockConfig+0x1c0>)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	4313      	orrs	r3, r2
 8007650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007652:	4b20      	ldr	r3, [pc, #128]	; (80076d4 <HAL_RCC_ClockConfig+0x1c0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d001      	beq.n	8007664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e032      	b.n	80076ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d008      	beq.n	8007682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007670:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	4916      	ldr	r1, [pc, #88]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 800767e:	4313      	orrs	r3, r2
 8007680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b00      	cmp	r3, #0
 800768c:	d009      	beq.n	80076a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800768e:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	490e      	ldr	r1, [pc, #56]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076a2:	f000 f821 	bl	80076e8 <HAL_RCC_GetSysClockFreq>
 80076a6:	4602      	mov	r2, r0
 80076a8:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <HAL_RCC_ClockConfig+0x1c4>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	091b      	lsrs	r3, r3, #4
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	490a      	ldr	r1, [pc, #40]	; (80076dc <HAL_RCC_ClockConfig+0x1c8>)
 80076b4:	5ccb      	ldrb	r3, [r1, r3]
 80076b6:	fa22 f303 	lsr.w	r3, r2, r3
 80076ba:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <HAL_RCC_ClockConfig+0x1cc>)
 80076bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076be:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <HAL_RCC_ClockConfig+0x1d0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fb fd4e 	bl	8003164 <HAL_InitTick>

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40022000 	.word	0x40022000
 80076d8:	40021000 	.word	0x40021000
 80076dc:	0800ca38 	.word	0x0800ca38
 80076e0:	20000008 	.word	0x20000008
 80076e4:	2000000c 	.word	0x2000000c

080076e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076e8:	b490      	push	{r4, r7}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80076ee:	4b29      	ldr	r3, [pc, #164]	; (8007794 <HAL_RCC_GetSysClockFreq+0xac>)
 80076f0:	1d3c      	adds	r4, r7, #4
 80076f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80076f8:	f240 2301 	movw	r3, #513	; 0x201
 80076fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	2300      	movs	r3, #0
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	2300      	movs	r3, #0
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007712:	4b21      	ldr	r3, [pc, #132]	; (8007798 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f003 030c 	and.w	r3, r3, #12
 800771e:	2b04      	cmp	r3, #4
 8007720:	d002      	beq.n	8007728 <HAL_RCC_GetSysClockFreq+0x40>
 8007722:	2b08      	cmp	r3, #8
 8007724:	d003      	beq.n	800772e <HAL_RCC_GetSysClockFreq+0x46>
 8007726:	e02b      	b.n	8007780 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007728:	4b1c      	ldr	r3, [pc, #112]	; (800779c <HAL_RCC_GetSysClockFreq+0xb4>)
 800772a:	623b      	str	r3, [r7, #32]
      break;
 800772c:	e02b      	b.n	8007786 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	0c9b      	lsrs	r3, r3, #18
 8007732:	f003 030f 	and.w	r3, r3, #15
 8007736:	3328      	adds	r3, #40	; 0x28
 8007738:	443b      	add	r3, r7
 800773a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800773e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d012      	beq.n	8007770 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800774a:	4b13      	ldr	r3, [pc, #76]	; (8007798 <HAL_RCC_GetSysClockFreq+0xb0>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	0c5b      	lsrs	r3, r3, #17
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	3328      	adds	r3, #40	; 0x28
 8007756:	443b      	add	r3, r7
 8007758:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800775c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	4a0e      	ldr	r2, [pc, #56]	; (800779c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007762:	fb03 f202 	mul.w	r2, r3, r2
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
 800776e:	e004      	b.n	800777a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	4a0b      	ldr	r2, [pc, #44]	; (80077a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007774:	fb02 f303 	mul.w	r3, r2, r3
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	623b      	str	r3, [r7, #32]
      break;
 800777e:	e002      	b.n	8007786 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007780:	4b06      	ldr	r3, [pc, #24]	; (800779c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007782:	623b      	str	r3, [r7, #32]
      break;
 8007784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007786:	6a3b      	ldr	r3, [r7, #32]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3728      	adds	r7, #40	; 0x28
 800778c:	46bd      	mov	sp, r7
 800778e:	bc90      	pop	{r4, r7}
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	0800ca18 	.word	0x0800ca18
 8007798:	40021000 	.word	0x40021000
 800779c:	007a1200 	.word	0x007a1200
 80077a0:	003d0900 	.word	0x003d0900

080077a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077a8:	4b02      	ldr	r3, [pc, #8]	; (80077b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80077aa:	681b      	ldr	r3, [r3, #0]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr
 80077b4:	20000008 	.word	0x20000008

080077b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077bc:	f7ff fff2 	bl	80077a4 <HAL_RCC_GetHCLKFreq>
 80077c0:	4602      	mov	r2, r0
 80077c2:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	0a1b      	lsrs	r3, r3, #8
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	4903      	ldr	r1, [pc, #12]	; (80077dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80077ce:	5ccb      	ldrb	r3, [r1, r3]
 80077d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40021000 	.word	0x40021000
 80077dc:	0800ca48 	.word	0x0800ca48

080077e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077e4:	f7ff ffde 	bl	80077a4 <HAL_RCC_GetHCLKFreq>
 80077e8:	4602      	mov	r2, r0
 80077ea:	4b05      	ldr	r3, [pc, #20]	; (8007800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	0adb      	lsrs	r3, r3, #11
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	4903      	ldr	r1, [pc, #12]	; (8007804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077f6:	5ccb      	ldrb	r3, [r1, r3]
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40021000 	.word	0x40021000
 8007804:	0800ca48 	.word	0x0800ca48

08007808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <RCC_Delay+0x34>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a0a      	ldr	r2, [pc, #40]	; (8007840 <RCC_Delay+0x38>)
 8007816:	fba2 2303 	umull	r2, r3, r2, r3
 800781a:	0a5b      	lsrs	r3, r3, #9
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	fb02 f303 	mul.w	r3, r2, r3
 8007822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007824:	bf00      	nop
  }
  while (Delay --);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1e5a      	subs	r2, r3, #1
 800782a:	60fa      	str	r2, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f9      	bne.n	8007824 <RCC_Delay+0x1c>
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr
 800783c:	20000008 	.word	0x20000008
 8007840:	10624dd3 	.word	0x10624dd3

08007844 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d07d      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007860:	2300      	movs	r3, #0
 8007862:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007864:	4b4f      	ldr	r3, [pc, #316]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10d      	bne.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007870:	4b4c      	ldr	r3, [pc, #304]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	4a4b      	ldr	r2, [pc, #300]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800787a:	61d3      	str	r3, [r2, #28]
 800787c:	4b49      	ldr	r3, [pc, #292]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007884:	60bb      	str	r3, [r7, #8]
 8007886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007888:	2301      	movs	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800788c:	4b46      	ldr	r3, [pc, #280]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007894:	2b00      	cmp	r3, #0
 8007896:	d118      	bne.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007898:	4b43      	ldr	r3, [pc, #268]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a42      	ldr	r2, [pc, #264]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800789e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078a4:	f7fb fca0 	bl	80031e8 <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078aa:	e008      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ac:	f7fb fc9c 	bl	80031e8 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b64      	cmp	r3, #100	; 0x64
 80078b8:	d901      	bls.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e06d      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078be:	4b3a      	ldr	r3, [pc, #232]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0f0      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078ca:	4b36      	ldr	r3, [pc, #216]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d02e      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d027      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078e8:	4b2e      	ldr	r3, [pc, #184]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078f2:	4b2e      	ldr	r3, [pc, #184]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078f8:	4b2c      	ldr	r3, [pc, #176]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80078fe:	4a29      	ldr	r2, [pc, #164]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d014      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800790e:	f7fb fc6b 	bl	80031e8 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007914:	e00a      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007916:	f7fb fc67 	bl	80031e8 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	f241 3288 	movw	r2, #5000	; 0x1388
 8007924:	4293      	cmp	r3, r2
 8007926:	d901      	bls.n	800792c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e036      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800792c:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0ee      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007938:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4917      	ldr	r1, [pc, #92]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007946:	4313      	orrs	r3, r2
 8007948:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d105      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007950:	4b14      	ldr	r3, [pc, #80]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007968:	4b0e      	ldr	r3, [pc, #56]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	490b      	ldr	r1, [pc, #44]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007976:	4313      	orrs	r3, r2
 8007978:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d008      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007986:	4b07      	ldr	r3, [pc, #28]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	4904      	ldr	r1, [pc, #16]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007994:	4313      	orrs	r3, r2
 8007996:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	40021000 	.word	0x40021000
 80079a8:	40007000 	.word	0x40007000
 80079ac:	42420440 	.word	0x42420440

080079b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80079b0:	b590      	push	{r4, r7, lr}
 80079b2:	b08d      	sub	sp, #52	; 0x34
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80079b8:	4b58      	ldr	r3, [pc, #352]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80079ba:	f107 040c 	add.w	r4, r7, #12
 80079be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80079c4:	f240 2301 	movw	r3, #513	; 0x201
 80079c8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
 80079ce:	2300      	movs	r3, #0
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079d2:	2300      	movs	r3, #0
 80079d4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	2300      	movs	r3, #0
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d00a      	beq.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b10      	cmp	r3, #16
 80079e8:	f200 808e 	bhi.w	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d049      	beq.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d079      	beq.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80079f8:	e086      	b.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80079fa:	4b49      	ldr	r3, [pc, #292]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007a00:	4b47      	ldr	r3, [pc, #284]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d07f      	beq.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	0c9b      	lsrs	r3, r3, #18
 8007a10:	f003 030f 	and.w	r3, r3, #15
 8007a14:	3330      	adds	r3, #48	; 0x30
 8007a16:	443b      	add	r3, r7
 8007a18:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007a1c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d017      	beq.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a28:	4b3d      	ldr	r3, [pc, #244]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	0c5b      	lsrs	r3, r3, #17
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	3330      	adds	r3, #48	; 0x30
 8007a34:	443b      	add	r3, r7
 8007a36:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00d      	beq.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007a46:	4a37      	ldr	r2, [pc, #220]	; (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	fb02 f303 	mul.w	r3, r2, r3
 8007a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a56:	e004      	b.n	8007a62 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	4a33      	ldr	r2, [pc, #204]	; (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007a5c:	fb02 f303 	mul.w	r3, r2, r3
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007a62:	4b2f      	ldr	r3, [pc, #188]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a6e:	d102      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007a74:	e04a      	b.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8007a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007a84:	e042      	b.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8007a86:	4b26      	ldr	r3, [pc, #152]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a96:	d108      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8007aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa8:	e01f      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab4:	d109      	bne.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8007ab6:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8007ac2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac8:	e00f      	b.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ad4:	d11c      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007ad6:	4b12      	ldr	r3, [pc, #72]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d016      	beq.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8007ae2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007ae8:	e012      	b.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007aea:	e011      	b.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007aec:	f7ff fe78 	bl	80077e0 <HAL_RCC_GetPCLK2Freq>
 8007af0:	4602      	mov	r2, r0
 8007af2:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	0b9b      	lsrs	r3, r3, #14
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	3301      	adds	r3, #1
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007b06:	e004      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e002      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007b10:	bf00      	nop
    }
  }
  return (frequency);
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3734      	adds	r7, #52	; 0x34
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd90      	pop	{r4, r7, pc}
 8007b1c:	0800ca28 	.word	0x0800ca28
 8007b20:	40021000 	.word	0x40021000
 8007b24:	007a1200 	.word	0x007a1200
 8007b28:	003d0900 	.word	0x003d0900
 8007b2c:	aaaaaaab 	.word	0xaaaaaaab

08007b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e041      	b.n	8007bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7fa fcba 	bl	80024d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f000 ff08 	bl	8008984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d001      	beq.n	8007be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e03a      	b.n	8007c5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f042 0201 	orr.w	r2, r2, #1
 8007bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a18      	ldr	r2, [pc, #96]	; (8007c68 <HAL_TIM_Base_Start_IT+0x98>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00e      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x58>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c12:	d009      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x58>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a14      	ldr	r2, [pc, #80]	; (8007c6c <HAL_TIM_Base_Start_IT+0x9c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <HAL_TIM_Base_Start_IT+0x58>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <HAL_TIM_Base_Start_IT+0xa0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d111      	bne.n	8007c4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b06      	cmp	r3, #6
 8007c38:	d010      	beq.n	8007c5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f042 0201 	orr.w	r2, r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4a:	e007      	b.n	8007c5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0201 	orr.w	r2, r2, #1
 8007c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bc80      	pop	{r7}
 8007c66:	4770      	bx	lr
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40000400 	.word	0x40000400
 8007c70:	40000800 	.word	0x40000800

08007c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e041      	b.n	8007d0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7fa fbce 	bl	800243c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	f000 fe66 	bl	8008984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d109      	bne.n	8007d38 <HAL_TIM_PWM_Start+0x24>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	bf14      	ite	ne
 8007d30:	2301      	movne	r3, #1
 8007d32:	2300      	moveq	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	e022      	b.n	8007d7e <HAL_TIM_PWM_Start+0x6a>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d109      	bne.n	8007d52 <HAL_TIM_PWM_Start+0x3e>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	bf14      	ite	ne
 8007d4a:	2301      	movne	r3, #1
 8007d4c:	2300      	moveq	r3, #0
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	e015      	b.n	8007d7e <HAL_TIM_PWM_Start+0x6a>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d109      	bne.n	8007d6c <HAL_TIM_PWM_Start+0x58>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	bf14      	ite	ne
 8007d64:	2301      	movne	r3, #1
 8007d66:	2300      	moveq	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	e008      	b.n	8007d7e <HAL_TIM_PWM_Start+0x6a>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	bf14      	ite	ne
 8007d78:	2301      	movne	r3, #1
 8007d7a:	2300      	moveq	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e05e      	b.n	8007e44 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d104      	bne.n	8007d96 <HAL_TIM_PWM_Start+0x82>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d94:	e013      	b.n	8007dbe <HAL_TIM_PWM_Start+0xaa>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d104      	bne.n	8007da6 <HAL_TIM_PWM_Start+0x92>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007da4:	e00b      	b.n	8007dbe <HAL_TIM_PWM_Start+0xaa>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d104      	bne.n	8007db6 <HAL_TIM_PWM_Start+0xa2>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007db4:	e003      	b.n	8007dbe <HAL_TIM_PWM_Start+0xaa>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2202      	movs	r2, #2
 8007dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 f9dd 	bl	8009186 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <HAL_TIM_PWM_Start+0x138>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d107      	bne.n	8007de6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007de4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a18      	ldr	r2, [pc, #96]	; (8007e4c <HAL_TIM_PWM_Start+0x138>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00e      	beq.n	8007e0e <HAL_TIM_PWM_Start+0xfa>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df8:	d009      	beq.n	8007e0e <HAL_TIM_PWM_Start+0xfa>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a14      	ldr	r2, [pc, #80]	; (8007e50 <HAL_TIM_PWM_Start+0x13c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d004      	beq.n	8007e0e <HAL_TIM_PWM_Start+0xfa>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <HAL_TIM_PWM_Start+0x140>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d111      	bne.n	8007e32 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0307 	and.w	r3, r3, #7
 8007e18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2b06      	cmp	r3, #6
 8007e1e:	d010      	beq.n	8007e42 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e30:	e007      	b.n	8007e42 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0201 	orr.w	r2, r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40012c00 	.word	0x40012c00
 8007e50:	40000400 	.word	0x40000400
 8007e54:	40000800 	.word	0x40000800

08007e58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e041      	b.n	8007eee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f839 	bl	8007ef6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3304      	adds	r3, #4
 8007e94:	4619      	mov	r1, r3
 8007e96:	4610      	mov	r0, r2
 8007e98:	f000 fd74 	bl	8008984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d104      	bne.n	8007f26 <HAL_TIM_IC_Start_DMA+0x1e>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	e013      	b.n	8007f4e <HAL_TIM_IC_Start_DMA+0x46>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d104      	bne.n	8007f36 <HAL_TIM_IC_Start_DMA+0x2e>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	e00b      	b.n	8007f4e <HAL_TIM_IC_Start_DMA+0x46>
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d104      	bne.n	8007f46 <HAL_TIM_IC_Start_DMA+0x3e>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	e003      	b.n	8007f4e <HAL_TIM_IC_Start_DMA+0x46>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d104      	bne.n	8007f60 <HAL_TIM_IC_Start_DMA+0x58>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	e013      	b.n	8007f88 <HAL_TIM_IC_Start_DMA+0x80>
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d104      	bne.n	8007f70 <HAL_TIM_IC_Start_DMA+0x68>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	e00b      	b.n	8007f88 <HAL_TIM_IC_Start_DMA+0x80>
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d104      	bne.n	8007f80 <HAL_TIM_IC_Start_DMA+0x78>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	e003      	b.n	8007f88 <HAL_TIM_IC_Start_DMA+0x80>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d002      	beq.n	8007f96 <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007f90:	7dbb      	ldrb	r3, [r7, #22]
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d101      	bne.n	8007f9a <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 8007f96:	2302      	movs	r3, #2
 8007f98:	e130      	b.n	80081fc <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d143      	bne.n	8008028 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007fa0:	7dbb      	ldrb	r3, [r7, #22]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d140      	bne.n	8008028 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d104      	bne.n	8007fb6 <HAL_TIM_IC_Start_DMA+0xae>
 8007fac:	887b      	ldrh	r3, [r7, #2]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e122      	b.n	80081fc <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <HAL_TIM_IC_Start_DMA+0xbe>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc4:	e013      	b.n	8007fee <HAL_TIM_IC_Start_DMA+0xe6>
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d104      	bne.n	8007fd6 <HAL_TIM_IC_Start_DMA+0xce>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd4:	e00b      	b.n	8007fee <HAL_TIM_IC_Start_DMA+0xe6>
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d104      	bne.n	8007fe6 <HAL_TIM_IC_Start_DMA+0xde>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe4:	e003      	b.n	8007fee <HAL_TIM_IC_Start_DMA+0xe6>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2202      	movs	r2, #2
 8007fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_IC_Start_DMA+0xf6>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8007ffc:	e016      	b.n	800802c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b04      	cmp	r3, #4
 8008002:	d104      	bne.n	800800e <HAL_TIM_IC_Start_DMA+0x106>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800800c:	e00e      	b.n	800802c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b08      	cmp	r3, #8
 8008012:	d104      	bne.n	800801e <HAL_TIM_IC_Start_DMA+0x116>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800801c:	e006      	b.n	800802c <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8008026:	e001      	b.n	800802c <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e0e7      	b.n	80081fc <HAL_TIM_IC_Start_DMA+0x2f4>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2201      	movs	r2, #1
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	4618      	mov	r0, r3
 8008036:	f001 f8a6 	bl	8009186 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a71      	ldr	r2, [pc, #452]	; (8008204 <HAL_TIM_IC_Start_DMA+0x2fc>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00e      	beq.n	8008062 <HAL_TIM_IC_Start_DMA+0x15a>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804c:	d009      	beq.n	8008062 <HAL_TIM_IC_Start_DMA+0x15a>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a6d      	ldr	r2, [pc, #436]	; (8008208 <HAL_TIM_IC_Start_DMA+0x300>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d004      	beq.n	8008062 <HAL_TIM_IC_Start_DMA+0x15a>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a6b      	ldr	r2, [pc, #428]	; (800820c <HAL_TIM_IC_Start_DMA+0x304>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d111      	bne.n	8008086 <HAL_TIM_IC_Start_DMA+0x17e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2b06      	cmp	r3, #6
 8008072:	d010      	beq.n	8008096 <HAL_TIM_IC_Start_DMA+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008084:	e007      	b.n	8008096 <HAL_TIM_IC_Start_DMA+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f042 0201 	orr.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]
  }

  switch (Channel)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b0c      	cmp	r3, #12
 800809a:	f200 80ad 	bhi.w	80081f8 <HAL_TIM_IC_Start_DMA+0x2f0>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <HAL_TIM_IC_Start_DMA+0x19c>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080d9 	.word	0x080080d9
 80080a8:	080081f9 	.word	0x080081f9
 80080ac:	080081f9 	.word	0x080081f9
 80080b0:	080081f9 	.word	0x080081f9
 80080b4:	08008121 	.word	0x08008121
 80080b8:	080081f9 	.word	0x080081f9
 80080bc:	080081f9 	.word	0x080081f9
 80080c0:	080081f9 	.word	0x080081f9
 80080c4:	08008169 	.word	0x08008169
 80080c8:	080081f9 	.word	0x080081f9
 80080cc:	080081f9 	.word	0x080081f9
 80080d0:	080081f9 	.word	0x080081f9
 80080d4:	080081b1 	.word	0x080081b1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	4a4c      	ldr	r2, [pc, #304]	; (8008210 <HAL_TIM_IC_Start_DMA+0x308>)
 80080de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	4a4b      	ldr	r2, [pc, #300]	; (8008214 <HAL_TIM_IC_Start_DMA+0x30c>)
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	4a4a      	ldr	r2, [pc, #296]	; (8008218 <HAL_TIM_IC_Start_DMA+0x310>)
 80080ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3334      	adds	r3, #52	; 0x34
 80080fa:	4619      	mov	r1, r3
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	887b      	ldrh	r3, [r7, #2]
 8008100:	f7fb ff02 	bl	8003f08 <HAL_DMA_Start_IT>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <HAL_TIM_IC_Start_DMA+0x206>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e076      	b.n	80081fc <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800811c:	60da      	str	r2, [r3, #12]
      break;
 800811e:	e06c      	b.n	80081fa <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008124:	4a3a      	ldr	r2, [pc, #232]	; (8008210 <HAL_TIM_IC_Start_DMA+0x308>)
 8008126:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812c:	4a39      	ldr	r2, [pc, #228]	; (8008214 <HAL_TIM_IC_Start_DMA+0x30c>)
 800812e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	4a38      	ldr	r2, [pc, #224]	; (8008218 <HAL_TIM_IC_Start_DMA+0x310>)
 8008136:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3338      	adds	r3, #56	; 0x38
 8008142:	4619      	mov	r1, r3
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	887b      	ldrh	r3, [r7, #2]
 8008148:	f7fb fede 	bl	8003f08 <HAL_DMA_Start_IT>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <HAL_TIM_IC_Start_DMA+0x24e>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e052      	b.n	80081fc <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008164:	60da      	str	r2, [r3, #12]
      break;
 8008166:	e048      	b.n	80081fa <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	4a28      	ldr	r2, [pc, #160]	; (8008210 <HAL_TIM_IC_Start_DMA+0x308>)
 800816e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	4a27      	ldr	r2, [pc, #156]	; (8008214 <HAL_TIM_IC_Start_DMA+0x30c>)
 8008176:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	4a26      	ldr	r2, [pc, #152]	; (8008218 <HAL_TIM_IC_Start_DMA+0x310>)
 800817e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	333c      	adds	r3, #60	; 0x3c
 800818a:	4619      	mov	r1, r3
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	887b      	ldrh	r3, [r7, #2]
 8008190:	f7fb feba 	bl	8003f08 <HAL_DMA_Start_IT>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <HAL_TIM_IC_Start_DMA+0x296>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e02e      	b.n	80081fc <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ac:	60da      	str	r2, [r3, #12]
      break;
 80081ae:	e024      	b.n	80081fa <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b4:	4a16      	ldr	r2, [pc, #88]	; (8008210 <HAL_TIM_IC_Start_DMA+0x308>)
 80081b6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	4a15      	ldr	r2, [pc, #84]	; (8008214 <HAL_TIM_IC_Start_DMA+0x30c>)
 80081be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	4a14      	ldr	r2, [pc, #80]	; (8008218 <HAL_TIM_IC_Start_DMA+0x310>)
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3340      	adds	r3, #64	; 0x40
 80081d2:	4619      	mov	r1, r3
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	887b      	ldrh	r3, [r7, #2]
 80081d8:	f7fb fe96 	bl	8003f08 <HAL_DMA_Start_IT>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d001      	beq.n	80081e6 <HAL_TIM_IC_Start_DMA+0x2de>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e00a      	b.n	80081fc <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68da      	ldr	r2, [r3, #12]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081f4:	60da      	str	r2, [r3, #12]
      break;
 80081f6:	e000      	b.n	80081fa <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    default:
      break;
 80081f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	08008853 	.word	0x08008853
 8008214:	0800891b 	.word	0x0800891b
 8008218:	080087c1 	.word	0x080087c1

0800821c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b02      	cmp	r3, #2
 8008230:	d122      	bne.n	8008278 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b02      	cmp	r3, #2
 800823e:	d11b      	bne.n	8008278 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0202 	mvn.w	r2, #2
 8008248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7f9 fe9e 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8008264:	e005      	b.n	8008272 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa7d 	bl	8008766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fa8c 	bl	800878a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b04      	cmp	r3, #4
 8008284:	d122      	bne.n	80082cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b04      	cmp	r3, #4
 8008292:	d11b      	bne.n	80082cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0204 	mvn.w	r2, #4
 800829c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2202      	movs	r2, #2
 80082a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7f9 fe74 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 80082b8:	e005      	b.n	80082c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa53 	bl	8008766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fa62 	bl	800878a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	2b08      	cmp	r3, #8
 80082d8:	d122      	bne.n	8008320 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f003 0308 	and.w	r3, r3, #8
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d11b      	bne.n	8008320 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0208 	mvn.w	r2, #8
 80082f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2204      	movs	r2, #4
 80082f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	f003 0303 	and.w	r3, r3, #3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7f9 fe4a 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 800830c:	e005      	b.n	800831a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fa29 	bl	8008766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fa38 	bl	800878a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f003 0310 	and.w	r3, r3, #16
 800832a:	2b10      	cmp	r3, #16
 800832c:	d122      	bne.n	8008374 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b10      	cmp	r3, #16
 800833a:	d11b      	bne.n	8008374 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0210 	mvn.w	r2, #16
 8008344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2208      	movs	r2, #8
 800834a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7f9 fe20 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8008360:	e005      	b.n	800836e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f9ff 	bl	8008766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fa0e 	bl	800878a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b01      	cmp	r3, #1
 8008380:	d10e      	bne.n	80083a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b01      	cmp	r3, #1
 800838e:	d107      	bne.n	80083a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f06f 0201 	mvn.w	r2, #1
 8008398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f9da 	bl	8008754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083aa:	2b80      	cmp	r3, #128	; 0x80
 80083ac:	d10e      	bne.n	80083cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b8:	2b80      	cmp	r3, #128	; 0x80
 80083ba:	d107      	bne.n	80083cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 ffba 	bl	8009340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	d10e      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b40      	cmp	r3, #64	; 0x40
 80083e6:	d107      	bne.n	80083f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f9d2 	bl	800879c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0320 	and.w	r3, r3, #32
 8008402:	2b20      	cmp	r3, #32
 8008404:	d10e      	bne.n	8008424 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b20      	cmp	r3, #32
 8008412:	d107      	bne.n	8008424 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0220 	mvn.w	r2, #32
 800841c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 ff85 	bl	800932e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008442:	2302      	movs	r3, #2
 8008444:	e082      	b.n	800854c <HAL_TIM_IC_ConfigChannel+0x120>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d11b      	bne.n	800848c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	6819      	ldr	r1, [r3, #0]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f000 fd06 	bl	8008e74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 020c 	bic.w	r2, r2, #12
 8008476:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6999      	ldr	r1, [r3, #24]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	619a      	str	r2, [r3, #24]
 800848a:	e05a      	b.n	8008542 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b04      	cmp	r3, #4
 8008490:	d11c      	bne.n	80084cc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	6819      	ldr	r1, [r3, #0]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f000 fd6f 	bl	8008f84 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	699a      	ldr	r2, [r3, #24]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80084b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6999      	ldr	r1, [r3, #24]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	021a      	lsls	r2, r3, #8
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	619a      	str	r2, [r3, #24]
 80084ca:	e03a      	b.n	8008542 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b08      	cmp	r3, #8
 80084d0:	d11b      	bne.n	800850a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6818      	ldr	r0, [r3, #0]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	6819      	ldr	r1, [r3, #0]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f000 fdba 	bl	800905a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 020c 	bic.w	r2, r2, #12
 80084f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69d9      	ldr	r1, [r3, #28]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	61da      	str	r2, [r3, #28]
 8008508:	e01b      	b.n	8008542 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	6819      	ldr	r1, [r3, #0]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f000 fdd9 	bl	80090d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800852c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69d9      	ldr	r1, [r3, #28]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	021a      	lsls	r2, r3, #8
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	430a      	orrs	r2, r1
 8008540:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800856a:	2302      	movs	r3, #2
 800856c:	e0ac      	b.n	80086c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2b0c      	cmp	r3, #12
 800857a:	f200 809f 	bhi.w	80086bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800857e:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	080085b9 	.word	0x080085b9
 8008588:	080086bd 	.word	0x080086bd
 800858c:	080086bd 	.word	0x080086bd
 8008590:	080086bd 	.word	0x080086bd
 8008594:	080085f9 	.word	0x080085f9
 8008598:	080086bd 	.word	0x080086bd
 800859c:	080086bd 	.word	0x080086bd
 80085a0:	080086bd 	.word	0x080086bd
 80085a4:	0800863b 	.word	0x0800863b
 80085a8:	080086bd 	.word	0x080086bd
 80085ac:	080086bd 	.word	0x080086bd
 80085b0:	080086bd 	.word	0x080086bd
 80085b4:	0800867b 	.word	0x0800867b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fa42 	bl	8008a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0208 	orr.w	r2, r2, #8
 80085d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f022 0204 	bic.w	r2, r2, #4
 80085e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6999      	ldr	r1, [r3, #24]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	619a      	str	r2, [r3, #24]
      break;
 80085f6:	e062      	b.n	80086be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fa88 	bl	8008b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	699a      	ldr	r2, [r3, #24]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	699a      	ldr	r2, [r3, #24]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6999      	ldr	r1, [r3, #24]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	021a      	lsls	r2, r3, #8
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	619a      	str	r2, [r3, #24]
      break;
 8008638:	e041      	b.n	80086be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fad1 	bl	8008be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f042 0208 	orr.w	r2, r2, #8
 8008654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0204 	bic.w	r2, r2, #4
 8008664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69d9      	ldr	r1, [r3, #28]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	61da      	str	r2, [r3, #28]
      break;
 8008678:	e021      	b.n	80086be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fb1b 	bl	8008cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	69da      	ldr	r2, [r3, #28]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69d9      	ldr	r1, [r3, #28]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	021a      	lsls	r2, r3, #8
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	61da      	str	r2, [r3, #28]
      break;
 80086ba:	e000      	b.n	80086be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80086bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d101      	bne.n	80086e8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80086e4:	2302      	movs	r3, #2
 80086e6:	e031      	b.n	800874c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fb2c 	bl	8008d58 <TIM_SlaveTimer_SetConfig>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d009      	beq.n	800871a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e018      	b.n	800874c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008728:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68da      	ldr	r2, [r3, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008738:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr

08008766 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr

08008778 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	bc80      	pop	{r7}
 8008788:	4770      	bx	lr

0800878a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	bc80      	pop	{r7}
 800879a:	4770      	bx	lr

0800879c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc80      	pop	{r7}
 80087ac:	4770      	bx	lr

080087ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80087b6:	bf00      	nop
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bc80      	pop	{r7}
 80087be:	4770      	bx	lr

080087c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d107      	bne.n	80087e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087e6:	e02a      	b.n	800883e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d107      	bne.n	8008802 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2202      	movs	r2, #2
 80087f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008800:	e01d      	b.n	800883e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d107      	bne.n	800881c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2204      	movs	r2, #4
 8008810:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800881a:	e010      	b.n	800883e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	429a      	cmp	r2, r3
 8008824:	d107      	bne.n	8008836 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2208      	movs	r2, #8
 800882a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008834:	e003      	b.n	800883e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f7ff ffb5 	bl	80087ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	771a      	strb	r2, [r3, #28]
}
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	687a      	ldr	r2, [r7, #4]
 8008866:	429a      	cmp	r2, r3
 8008868:	d10f      	bne.n	800888a <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2201      	movs	r2, #1
 800886e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d146      	bne.n	8008906 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008888:	e03d      	b.n	8008906 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d10f      	bne.n	80088b4 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2202      	movs	r2, #2
 8008898:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d131      	bne.n	8008906 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088b2:	e028      	b.n	8008906 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d10f      	bne.n	80088de <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2204      	movs	r2, #4
 80088c2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d11c      	bne.n	8008906 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088dc:	e013      	b.n	8008906 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d10e      	bne.n	8008906 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2208      	movs	r2, #8
 80088ec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d107      	bne.n	8008906 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7f9 fb4a 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	771a      	strb	r2, [r3, #28]
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	429a      	cmp	r2, r3
 8008930:	d103      	bne.n	800893a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	771a      	strb	r2, [r3, #28]
 8008938:	e019      	b.n	800896e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	429a      	cmp	r2, r3
 8008942:	d103      	bne.n	800894c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2202      	movs	r2, #2
 8008948:	771a      	strb	r2, [r3, #28]
 800894a:	e010      	b.n	800896e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d103      	bne.n	800895e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2204      	movs	r2, #4
 800895a:	771a      	strb	r2, [r3, #28]
 800895c:	e007      	b.n	800896e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	429a      	cmp	r2, r3
 8008966:	d102      	bne.n	800896e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2208      	movs	r2, #8
 800896c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f7ff ff02 	bl	8008778 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	771a      	strb	r2, [r3, #28]
}
 800897a:	bf00      	nop
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a29      	ldr	r2, [pc, #164]	; (8008a3c <TIM_Base_SetConfig+0xb8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00b      	beq.n	80089b4 <TIM_Base_SetConfig+0x30>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a2:	d007      	beq.n	80089b4 <TIM_Base_SetConfig+0x30>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a26      	ldr	r2, [pc, #152]	; (8008a40 <TIM_Base_SetConfig+0xbc>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_Base_SetConfig+0x30>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a25      	ldr	r2, [pc, #148]	; (8008a44 <TIM_Base_SetConfig+0xc0>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d108      	bne.n	80089c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a1c      	ldr	r2, [pc, #112]	; (8008a3c <TIM_Base_SetConfig+0xb8>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d00b      	beq.n	80089e6 <TIM_Base_SetConfig+0x62>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d4:	d007      	beq.n	80089e6 <TIM_Base_SetConfig+0x62>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a19      	ldr	r2, [pc, #100]	; (8008a40 <TIM_Base_SetConfig+0xbc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d003      	beq.n	80089e6 <TIM_Base_SetConfig+0x62>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a18      	ldr	r2, [pc, #96]	; (8008a44 <TIM_Base_SetConfig+0xc0>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d108      	bne.n	80089f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a07      	ldr	r2, [pc, #28]	; (8008a3c <TIM_Base_SetConfig+0xb8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d103      	bne.n	8008a2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	691a      	ldr	r2, [r3, #16]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	615a      	str	r2, [r3, #20]
}
 8008a32:	bf00      	nop
 8008a34:	3714      	adds	r7, #20
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr
 8008a3c:	40012c00 	.word	0x40012c00
 8008a40:	40000400 	.word	0x40000400
 8008a44:	40000800 	.word	0x40000800

08008a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
 8008a56:	f023 0201 	bic.w	r2, r3, #1
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f023 0303 	bic.w	r3, r3, #3
 8008a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f023 0302 	bic.w	r3, r3, #2
 8008a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a1c      	ldr	r2, [pc, #112]	; (8008b10 <TIM_OC1_SetConfig+0xc8>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d10c      	bne.n	8008abe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f023 0308 	bic.w	r3, r3, #8
 8008aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f023 0304 	bic.w	r3, r3, #4
 8008abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <TIM_OC1_SetConfig+0xc8>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d111      	bne.n	8008aea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	621a      	str	r2, [r3, #32]
}
 8008b04:	bf00      	nop
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bc80      	pop	{r7}
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	40012c00 	.word	0x40012c00

08008b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f023 0210 	bic.w	r2, r3, #16
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f023 0320 	bic.w	r3, r3, #32
 8008b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a1d      	ldr	r2, [pc, #116]	; (8008be4 <TIM_OC2_SetConfig+0xd0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d10d      	bne.n	8008b90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a14      	ldr	r2, [pc, #80]	; (8008be4 <TIM_OC2_SetConfig+0xd0>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d113      	bne.n	8008bc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	621a      	str	r2, [r3, #32]
}
 8008bda:	bf00      	nop
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bc80      	pop	{r7}
 8008be2:	4770      	bx	lr
 8008be4:	40012c00 	.word	0x40012c00

08008be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f023 0303 	bic.w	r3, r3, #3
 8008c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	021b      	lsls	r3, r3, #8
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a1d      	ldr	r2, [pc, #116]	; (8008cb8 <TIM_OC3_SetConfig+0xd0>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d10d      	bne.n	8008c62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	021b      	lsls	r3, r3, #8
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a14      	ldr	r2, [pc, #80]	; (8008cb8 <TIM_OC3_SetConfig+0xd0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d113      	bne.n	8008c92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	621a      	str	r2, [r3, #32]
}
 8008cac:	bf00      	nop
 8008cae:	371c      	adds	r7, #28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	40012c00 	.word	0x40012c00

08008cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	021b      	lsls	r3, r3, #8
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	031b      	lsls	r3, r3, #12
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a0f      	ldr	r2, [pc, #60]	; (8008d54 <TIM_OC4_SetConfig+0x98>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d109      	bne.n	8008d30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	019b      	lsls	r3, r3, #6
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	621a      	str	r2, [r3, #32]
}
 8008d4a:	bf00      	nop
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bc80      	pop	{r7}
 8008d52:	4770      	bx	lr
 8008d54:	40012c00 	.word	0x40012c00

08008d58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d70:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f023 0307 	bic.w	r3, r3, #7
 8008d82:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2b70      	cmp	r3, #112	; 0x70
 8008d9c:	d01a      	beq.n	8008dd4 <TIM_SlaveTimer_SetConfig+0x7c>
 8008d9e:	2b70      	cmp	r3, #112	; 0x70
 8008da0:	d860      	bhi.n	8008e64 <TIM_SlaveTimer_SetConfig+0x10c>
 8008da2:	2b60      	cmp	r3, #96	; 0x60
 8008da4:	d054      	beq.n	8008e50 <TIM_SlaveTimer_SetConfig+0xf8>
 8008da6:	2b60      	cmp	r3, #96	; 0x60
 8008da8:	d85c      	bhi.n	8008e64 <TIM_SlaveTimer_SetConfig+0x10c>
 8008daa:	2b50      	cmp	r3, #80	; 0x50
 8008dac:	d046      	beq.n	8008e3c <TIM_SlaveTimer_SetConfig+0xe4>
 8008dae:	2b50      	cmp	r3, #80	; 0x50
 8008db0:	d858      	bhi.n	8008e64 <TIM_SlaveTimer_SetConfig+0x10c>
 8008db2:	2b40      	cmp	r3, #64	; 0x40
 8008db4:	d019      	beq.n	8008dea <TIM_SlaveTimer_SetConfig+0x92>
 8008db6:	2b40      	cmp	r3, #64	; 0x40
 8008db8:	d854      	bhi.n	8008e64 <TIM_SlaveTimer_SetConfig+0x10c>
 8008dba:	2b30      	cmp	r3, #48	; 0x30
 8008dbc:	d054      	beq.n	8008e68 <TIM_SlaveTimer_SetConfig+0x110>
 8008dbe:	2b30      	cmp	r3, #48	; 0x30
 8008dc0:	d850      	bhi.n	8008e64 <TIM_SlaveTimer_SetConfig+0x10c>
 8008dc2:	2b20      	cmp	r3, #32
 8008dc4:	d050      	beq.n	8008e68 <TIM_SlaveTimer_SetConfig+0x110>
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d84c      	bhi.n	8008e64 <TIM_SlaveTimer_SetConfig+0x10c>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d04c      	beq.n	8008e68 <TIM_SlaveTimer_SetConfig+0x110>
 8008dce:	2b10      	cmp	r3, #16
 8008dd0:	d04a      	beq.n	8008e68 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8008dd2:	e047      	b.n	8008e64 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6818      	ldr	r0, [r3, #0]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	68d9      	ldr	r1, [r3, #12]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	f000 f9b0 	bl	8009148 <TIM_ETR_SetConfig>
      break;
 8008de8:	e03f      	b.n	8008e6a <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	d101      	bne.n	8008df6 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e03a      	b.n	8008e6c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6a1a      	ldr	r2, [r3, #32]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0201 	bic.w	r2, r2, #1
 8008e0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e1c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	621a      	str	r2, [r3, #32]
      break;
 8008e3a:	e016      	b.n	8008e6a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	6899      	ldr	r1, [r3, #8]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	f000 f86d 	bl	8008f28 <TIM_TI1_ConfigInputStage>
      break;
 8008e4e:	e00c      	b.n	8008e6a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	6899      	ldr	r1, [r3, #8]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f000 f8cd 	bl	8008ffc <TIM_TI2_ConfigInputStage>
      break;
 8008e62:	e002      	b.n	8008e6a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8008e64:	bf00      	nop
 8008e66:	e000      	b.n	8008e6a <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8008e68:	bf00      	nop
  }
  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	f023 0201 	bic.w	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4a1f      	ldr	r2, [pc, #124]	; (8008f1c <TIM_TI1_SetConfig+0xa8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00b      	beq.n	8008eba <TIM_TI1_SetConfig+0x46>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea8:	d007      	beq.n	8008eba <TIM_TI1_SetConfig+0x46>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4a1c      	ldr	r2, [pc, #112]	; (8008f20 <TIM_TI1_SetConfig+0xac>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d003      	beq.n	8008eba <TIM_TI1_SetConfig+0x46>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4a1b      	ldr	r2, [pc, #108]	; (8008f24 <TIM_TI1_SetConfig+0xb0>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d101      	bne.n	8008ebe <TIM_TI1_SetConfig+0x4a>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <TIM_TI1_SetConfig+0x4c>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d008      	beq.n	8008ed6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f023 0303 	bic.w	r3, r3, #3
 8008eca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	617b      	str	r3, [r7, #20]
 8008ed4:	e003      	b.n	8008ede <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f043 0301 	orr.w	r3, r3, #1
 8008edc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	011b      	lsls	r3, r3, #4
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f023 030a 	bic.w	r3, r3, #10
 8008ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f003 030a 	and.w	r3, r3, #10
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	621a      	str	r2, [r3, #32]
}
 8008f12:	bf00      	nop
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bc80      	pop	{r7}
 8008f1a:	4770      	bx	lr
 8008f1c:	40012c00 	.word	0x40012c00
 8008f20:	40000400 	.word	0x40000400
 8008f24:	40000800 	.word	0x40000800

08008f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	f023 0201 	bic.w	r2, r3, #1
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	011b      	lsls	r3, r3, #4
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f023 030a 	bic.w	r3, r3, #10
 8008f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	697a      	ldr	r2, [r7, #20]
 8008f78:	621a      	str	r2, [r3, #32]
}
 8008f7a:	bf00      	nop
 8008f7c:	371c      	adds	r7, #28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bc80      	pop	{r7}
 8008f82:	4770      	bx	lr

08008f84 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	f023 0210 	bic.w	r2, r3, #16
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	031b      	lsls	r3, r3, #12
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	621a      	str	r2, [r3, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr

08008ffc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	f023 0210 	bic.w	r2, r3, #16
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	031b      	lsls	r3, r3, #12
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	4313      	orrs	r3, r2
 8009030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	693a      	ldr	r2, [r7, #16]
 8009040:	4313      	orrs	r3, r2
 8009042:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	621a      	str	r2, [r3, #32]
}
 8009050:	bf00      	nop
 8009052:	371c      	adds	r7, #28
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr

0800905a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800905a:	b480      	push	{r7}
 800905c:	b087      	sub	sp, #28
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f023 0303 	bic.w	r3, r3, #3
 8009086:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009096:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	b2db      	uxtb	r3, r3
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	693a      	ldr	r2, [r7, #16]
 80090c4:	621a      	str	r2, [r3, #32]
}
 80090c6:	bf00      	nop
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	4313      	orrs	r3, r2
 8009106:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800910e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	031b      	lsls	r3, r3, #12
 8009114:	b29b      	uxth	r3, r3
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009122:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	031b      	lsls	r3, r3, #12
 8009128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	4313      	orrs	r3, r2
 8009130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	621a      	str	r2, [r3, #32]
}
 800913e:	bf00      	nop
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	bc80      	pop	{r7}
 8009146:	4770      	bx	lr

08009148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	021a      	lsls	r2, r3, #8
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	431a      	orrs	r2, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4313      	orrs	r3, r2
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	4313      	orrs	r3, r2
 8009174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	609a      	str	r2, [r3, #8]
}
 800917c:	bf00      	nop
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr

08009186 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009186:	b480      	push	{r7}
 8009188:	b087      	sub	sp, #28
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f003 031f 	and.w	r3, r3, #31
 8009198:	2201      	movs	r2, #1
 800919a:	fa02 f303 	lsl.w	r3, r2, r3
 800919e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6a1a      	ldr	r2, [r3, #32]
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	43db      	mvns	r3, r3
 80091a8:	401a      	ands	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a1a      	ldr	r2, [r3, #32]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f003 031f 	and.w	r3, r3, #31
 80091b8:	6879      	ldr	r1, [r7, #4]
 80091ba:	fa01 f303 	lsl.w	r3, r1, r3
 80091be:	431a      	orrs	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	621a      	str	r2, [r3, #32]
}
 80091c4:	bf00      	nop
 80091c6:	371c      	adds	r7, #28
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bc80      	pop	{r7}
 80091cc:	4770      	bx	lr
	...

080091d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d101      	bne.n	80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091e4:	2302      	movs	r3, #2
 80091e6:	e046      	b.n	8009276 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2202      	movs	r2, #2
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4313      	orrs	r3, r2
 8009218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a16      	ldr	r2, [pc, #88]	; (8009280 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00e      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009234:	d009      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a12      	ldr	r2, [pc, #72]	; (8009284 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d004      	beq.n	800924a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a10      	ldr	r2, [pc, #64]	; (8009288 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d10c      	bne.n	8009264 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	4313      	orrs	r3, r2
 800925a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr
 8009280:	40012c00 	.word	0x40012c00
 8009284:	40000400 	.word	0x40000400
 8009288:	40000800 	.word	0x40000800

0800928c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80092a4:	2302      	movs	r3, #2
 80092a6:	e03d      	b.n	8009324 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	4313      	orrs	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	bc80      	pop	{r7}
 800932c:	4770      	bx	lr

0800932e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr

08009340 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr

08009352 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e03f      	b.n	80093e4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d106      	bne.n	800937e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7f9 f991 	bl	80026a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2224      	movs	r2, #36	; 0x24
 8009382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68da      	ldr	r2, [r3, #12]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009394:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fba8 	bl	8009aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691a      	ldr	r2, [r3, #16]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	695a      	ldr	r2, [r3, #20]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2220      	movs	r2, #32
 80093d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2220      	movs	r2, #32
 80093de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	4613      	mov	r3, r2
 80093f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b20      	cmp	r3, #32
 8009404:	d11d      	bne.n	8009442 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <HAL_UART_Receive_IT+0x26>
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e016      	b.n	8009444 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800941c:	2b01      	cmp	r3, #1
 800941e:	d101      	bne.n	8009424 <HAL_UART_Receive_IT+0x38>
 8009420:	2302      	movs	r3, #2
 8009422:	e00f      	b.n	8009444 <HAL_UART_Receive_IT+0x58>
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	461a      	mov	r2, r3
 8009436:	68b9      	ldr	r1, [r7, #8]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 f9ce 	bl	80097da <UART_Start_Receive_IT>
 800943e:	4603      	mov	r3, r0
 8009440:	e000      	b.n	8009444 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009442:	2302      	movs	r3, #2
  }
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08a      	sub	sp, #40	; 0x28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800946c:	2300      	movs	r3, #0
 800946e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	f003 030f 	and.w	r3, r3, #15
 800947a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10d      	bne.n	800949e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b00      	cmp	r3, #0
 800948a:	d008      	beq.n	800949e <HAL_UART_IRQHandler+0x52>
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	f003 0320 	and.w	r3, r3, #32
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa7f 	bl	800999a <UART_Receive_IT>
      return;
 800949c:	e17b      	b.n	8009796 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 80b1 	beq.w	8009608 <HAL_UART_IRQHandler+0x1bc>
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d105      	bne.n	80094bc <HAL_UART_IRQHandler+0x70>
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 80a6 	beq.w	8009608 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <HAL_UART_IRQHandler+0x90>
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d4:	f043 0201 	orr.w	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	f003 0304 	and.w	r3, r3, #4
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <HAL_UART_IRQHandler+0xb0>
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f4:	f043 0202 	orr.w	r2, r3, #2
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80094fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00a      	beq.n	800951c <HAL_UART_IRQHandler+0xd0>
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009514:	f043 0204 	orr.w	r2, r3, #4
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	f003 0308 	and.w	r3, r3, #8
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00f      	beq.n	8009546 <HAL_UART_IRQHandler+0xfa>
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <HAL_UART_IRQHandler+0xee>
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	f043 0208 	orr.w	r2, r3, #8
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 811e 	beq.w	800978c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	f003 0320 	and.w	r3, r3, #32
 8009556:	2b00      	cmp	r3, #0
 8009558:	d007      	beq.n	800956a <HAL_UART_IRQHandler+0x11e>
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fa18 	bl	800999a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009574:	2b00      	cmp	r3, #0
 8009576:	bf14      	ite	ne
 8009578:	2301      	movne	r3, #1
 800957a:	2300      	moveq	r3, #0
 800957c:	b2db      	uxtb	r3, r3
 800957e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	f003 0308 	and.w	r3, r3, #8
 8009588:	2b00      	cmp	r3, #0
 800958a:	d102      	bne.n	8009592 <HAL_UART_IRQHandler+0x146>
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d031      	beq.n	80095f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f95a 	bl	800984c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d023      	beq.n	80095ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	695a      	ldr	r2, [r3, #20]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d013      	beq.n	80095e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	4a76      	ldr	r2, [pc, #472]	; (800979c <HAL_UART_IRQHandler+0x350>)
 80095c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fa fd36 	bl	800403c <HAL_DMA_Abort_IT>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d016      	beq.n	8009604 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80095e0:	4610      	mov	r0, r2
 80095e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e4:	e00e      	b.n	8009604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f8e3 	bl	80097b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ec:	e00a      	b.n	8009604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f8df 	bl	80097b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095f4:	e006      	b.n	8009604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f8db 	bl	80097b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009602:	e0c3      	b.n	800978c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009604:	bf00      	nop
    return;
 8009606:	e0c1      	b.n	800978c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960c:	2b01      	cmp	r3, #1
 800960e:	f040 80a1 	bne.w	8009754 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	f003 0310 	and.w	r3, r3, #16
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 809b 	beq.w	8009754 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	f003 0310 	and.w	r3, r3, #16
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 8095 	beq.w	8009754 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800962a:	2300      	movs	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	60fb      	str	r3, [r7, #12]
 800963e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964a:	2b00      	cmp	r3, #0
 800964c:	d04e      	beq.n	80096ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009658:	8a3b      	ldrh	r3, [r7, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 8098 	beq.w	8009790 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009664:	8a3a      	ldrh	r2, [r7, #16]
 8009666:	429a      	cmp	r2, r3
 8009668:	f080 8092 	bcs.w	8009790 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	8a3a      	ldrh	r2, [r7, #16]
 8009670:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	2b20      	cmp	r3, #32
 800967a:	d02b      	beq.n	80096d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800968a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	695a      	ldr	r2, [r3, #20]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0201 	bic.w	r2, r2, #1
 800969a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695a      	ldr	r2, [r3, #20]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2220      	movs	r2, #32
 80096b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0210 	bic.w	r2, r2, #16
 80096c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fa fc79 	bl	8003fc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096dc:	b29b      	uxth	r3, r3
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f86d 	bl	80097c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80096ea:	e051      	b.n	8009790 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096fe:	b29b      	uxth	r3, r3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d047      	beq.n	8009794 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009704:	8a7b      	ldrh	r3, [r7, #18]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d044      	beq.n	8009794 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68da      	ldr	r2, [r3, #12]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009718:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	695a      	ldr	r2, [r3, #20]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0201 	bic.w	r2, r2, #1
 8009728:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68da      	ldr	r2, [r3, #12]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0210 	bic.w	r2, r2, #16
 8009746:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009748:	8a7b      	ldrh	r3, [r7, #18]
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f839 	bl	80097c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009752:	e01f      	b.n	8009794 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800975a:	2b00      	cmp	r3, #0
 800975c:	d008      	beq.n	8009770 <HAL_UART_IRQHandler+0x324>
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f8af 	bl	80098cc <UART_Transmit_IT>
    return;
 800976e:	e012      	b.n	8009796 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <HAL_UART_IRQHandler+0x34a>
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009780:	2b00      	cmp	r3, #0
 8009782:	d008      	beq.n	8009796 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f8f0 	bl	800996a <UART_EndTransmit_IT>
    return;
 800978a:	e004      	b.n	8009796 <HAL_UART_IRQHandler+0x34a>
    return;
 800978c:	bf00      	nop
 800978e:	e002      	b.n	8009796 <HAL_UART_IRQHandler+0x34a>
      return;
 8009790:	bf00      	nop
 8009792:	e000      	b.n	8009796 <HAL_UART_IRQHandler+0x34a>
      return;
 8009794:	bf00      	nop
  }
}
 8009796:	3728      	adds	r7, #40	; 0x28
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	080098a5 	.word	0x080098a5

080097a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bc80      	pop	{r7}
 80097b0:	4770      	bx	lr

080097b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80097ba:	bf00      	nop
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	bc80      	pop	{r7}
 80097c2:	4770      	bx	lr

080097c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	460b      	mov	r3, r1
 80097ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bc80      	pop	{r7}
 80097d8:	4770      	bx	lr

080097da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097da:	b480      	push	{r7}
 80097dc:	b085      	sub	sp, #20
 80097de:	af00      	add	r7, sp, #0
 80097e0:	60f8      	str	r0, [r7, #12]
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	4613      	mov	r3, r2
 80097e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	88fa      	ldrh	r2, [r7, #6]
 80097f2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	88fa      	ldrh	r2, [r7, #6]
 80097f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2222      	movs	r2, #34	; 0x22
 8009804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800981e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	695a      	ldr	r2, [r3, #20]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0201 	orr.w	r2, r2, #1
 800982e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0220 	orr.w	r2, r2, #32
 800983e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	bc80      	pop	{r7}
 800984a:	4770      	bx	lr

0800984c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009862:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	695a      	ldr	r2, [r3, #20]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 0201 	bic.w	r2, r2, #1
 8009872:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009878:	2b01      	cmp	r3, #1
 800987a:	d107      	bne.n	800988c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 0210 	bic.w	r2, r2, #16
 800988a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	631a      	str	r2, [r3, #48]	; 0x30
}
 800989a:	bf00      	nop
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	bc80      	pop	{r7}
 80098a2:	4770      	bx	lr

080098a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff ff77 	bl	80097b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098c4:	bf00      	nop
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b21      	cmp	r3, #33	; 0x21
 80098de:	d13e      	bne.n	800995e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e8:	d114      	bne.n	8009914 <UART_Transmit_IT+0x48>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d110      	bne.n	8009914 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	461a      	mov	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009906:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	1c9a      	adds	r2, r3, #2
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	621a      	str	r2, [r3, #32]
 8009912:	e008      	b.n	8009926 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	1c59      	adds	r1, r3, #1
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6211      	str	r1, [r2, #32]
 800991e:	781a      	ldrb	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800992a:	b29b      	uxth	r3, r3
 800992c:	3b01      	subs	r3, #1
 800992e:	b29b      	uxth	r3, r3
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	4619      	mov	r1, r3
 8009934:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10f      	bne.n	800995a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68da      	ldr	r2, [r3, #12]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009948:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68da      	ldr	r2, [r3, #12]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009958:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	e000      	b.n	8009960 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800995e:	2302      	movs	r3, #2
  }
}
 8009960:	4618      	mov	r0, r3
 8009962:	3714      	adds	r7, #20
 8009964:	46bd      	mov	sp, r7
 8009966:	bc80      	pop	{r7}
 8009968:	4770      	bx	lr

0800996a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009980:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2220      	movs	r2, #32
 8009986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff ff08 	bl	80097a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b086      	sub	sp, #24
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b22      	cmp	r3, #34	; 0x22
 80099ac:	f040 8099 	bne.w	8009ae2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b8:	d117      	bne.n	80099ea <UART_Receive_IT+0x50>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d113      	bne.n	80099ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ca:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099d8:	b29a      	uxth	r2, r3
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e2:	1c9a      	adds	r2, r3, #2
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	629a      	str	r2, [r3, #40]	; 0x28
 80099e8:	e026      	b.n	8009a38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80099f0:	2300      	movs	r3, #0
 80099f2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099fc:	d007      	beq.n	8009a0e <UART_Receive_IT+0x74>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10a      	bne.n	8009a1c <UART_Receive_IT+0x82>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d106      	bne.n	8009a1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	e008      	b.n	8009a2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	4619      	mov	r1, r3
 8009a46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d148      	bne.n	8009ade <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68da      	ldr	r2, [r3, #12]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0220 	bic.w	r2, r2, #32
 8009a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	695a      	ldr	r2, [r3, #20]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0201 	bic.w	r2, r2, #1
 8009a7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d123      	bne.n	8009ad4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f022 0210 	bic.w	r2, r2, #16
 8009aa0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b10      	cmp	r3, #16
 8009aae:	d10a      	bne.n	8009ac6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff fe79 	bl	80097c4 <HAL_UARTEx_RxEventCallback>
 8009ad2:	e002      	b.n	8009ada <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7f8 fb41 	bl	800215c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	e002      	b.n	8009ae4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e000      	b.n	8009ae4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009ae2:	2302      	movs	r3, #2
  }
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68da      	ldr	r2, [r3, #12]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	431a      	orrs	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	695b      	ldr	r3, [r3, #20]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009b26:	f023 030c 	bic.w	r3, r3, #12
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	6812      	ldr	r2, [r2, #0]
 8009b2e:	68b9      	ldr	r1, [r7, #8]
 8009b30:	430b      	orrs	r3, r1
 8009b32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a2c      	ldr	r2, [pc, #176]	; (8009c00 <UART_SetConfig+0x114>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d103      	bne.n	8009b5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009b54:	f7fd fe44 	bl	80077e0 <HAL_RCC_GetPCLK2Freq>
 8009b58:	60f8      	str	r0, [r7, #12]
 8009b5a:	e002      	b.n	8009b62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009b5c:	f7fd fe2c 	bl	80077b8 <HAL_RCC_GetPCLK1Freq>
 8009b60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009a      	lsls	r2, r3, #2
 8009b6c:	441a      	add	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b78:	4a22      	ldr	r2, [pc, #136]	; (8009c04 <UART_SetConfig+0x118>)
 8009b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	0119      	lsls	r1, r3, #4
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009a      	lsls	r2, r3, #2
 8009b8c:	441a      	add	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b98:	4b1a      	ldr	r3, [pc, #104]	; (8009c04 <UART_SetConfig+0x118>)
 8009b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8009b9e:	095b      	lsrs	r3, r3, #5
 8009ba0:	2064      	movs	r0, #100	; 0x64
 8009ba2:	fb00 f303 	mul.w	r3, r0, r3
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	3332      	adds	r3, #50	; 0x32
 8009bac:	4a15      	ldr	r2, [pc, #84]	; (8009c04 <UART_SetConfig+0x118>)
 8009bae:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb2:	095b      	lsrs	r3, r3, #5
 8009bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bb8:	4419      	add	r1, r3
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4413      	add	r3, r2
 8009bc2:	009a      	lsls	r2, r3, #2
 8009bc4:	441a      	add	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	; (8009c04 <UART_SetConfig+0x118>)
 8009bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8009bd6:	095b      	lsrs	r3, r3, #5
 8009bd8:	2064      	movs	r0, #100	; 0x64
 8009bda:	fb00 f303 	mul.w	r3, r0, r3
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	3332      	adds	r3, #50	; 0x32
 8009be4:	4a07      	ldr	r2, [pc, #28]	; (8009c04 <UART_SetConfig+0x118>)
 8009be6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bea:	095b      	lsrs	r3, r3, #5
 8009bec:	f003 020f 	and.w	r2, r3, #15
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	440a      	add	r2, r1
 8009bf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009bf8:	bf00      	nop
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	40013800 	.word	0x40013800
 8009c04:	51eb851f 	.word	0x51eb851f

08009c08 <__errno>:
 8009c08:	4b01      	ldr	r3, [pc, #4]	; (8009c10 <__errno+0x8>)
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	20000014 	.word	0x20000014

08009c14 <__libc_init_array>:
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	2600      	movs	r6, #0
 8009c18:	4d0c      	ldr	r5, [pc, #48]	; (8009c4c <__libc_init_array+0x38>)
 8009c1a:	4c0d      	ldr	r4, [pc, #52]	; (8009c50 <__libc_init_array+0x3c>)
 8009c1c:	1b64      	subs	r4, r4, r5
 8009c1e:	10a4      	asrs	r4, r4, #2
 8009c20:	42a6      	cmp	r6, r4
 8009c22:	d109      	bne.n	8009c38 <__libc_init_array+0x24>
 8009c24:	f002 feec 	bl	800ca00 <_init>
 8009c28:	2600      	movs	r6, #0
 8009c2a:	4d0a      	ldr	r5, [pc, #40]	; (8009c54 <__libc_init_array+0x40>)
 8009c2c:	4c0a      	ldr	r4, [pc, #40]	; (8009c58 <__libc_init_array+0x44>)
 8009c2e:	1b64      	subs	r4, r4, r5
 8009c30:	10a4      	asrs	r4, r4, #2
 8009c32:	42a6      	cmp	r6, r4
 8009c34:	d105      	bne.n	8009c42 <__libc_init_array+0x2e>
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c3c:	4798      	blx	r3
 8009c3e:	3601      	adds	r6, #1
 8009c40:	e7ee      	b.n	8009c20 <__libc_init_array+0xc>
 8009c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c46:	4798      	blx	r3
 8009c48:	3601      	adds	r6, #1
 8009c4a:	e7f2      	b.n	8009c32 <__libc_init_array+0x1e>
 8009c4c:	0800ce2c 	.word	0x0800ce2c
 8009c50:	0800ce2c 	.word	0x0800ce2c
 8009c54:	0800ce2c 	.word	0x0800ce2c
 8009c58:	0800ce30 	.word	0x0800ce30

08009c5c <memset>:
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	4402      	add	r2, r0
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d100      	bne.n	8009c66 <memset+0xa>
 8009c64:	4770      	bx	lr
 8009c66:	f803 1b01 	strb.w	r1, [r3], #1
 8009c6a:	e7f9      	b.n	8009c60 <memset+0x4>

08009c6c <__cvt>:
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c72:	461f      	mov	r7, r3
 8009c74:	bfbb      	ittet	lt
 8009c76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009c7a:	461f      	movlt	r7, r3
 8009c7c:	2300      	movge	r3, #0
 8009c7e:	232d      	movlt	r3, #45	; 0x2d
 8009c80:	b088      	sub	sp, #32
 8009c82:	4614      	mov	r4, r2
 8009c84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009c88:	7013      	strb	r3, [r2, #0]
 8009c8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009c90:	f023 0820 	bic.w	r8, r3, #32
 8009c94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c98:	d005      	beq.n	8009ca6 <__cvt+0x3a>
 8009c9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c9e:	d100      	bne.n	8009ca2 <__cvt+0x36>
 8009ca0:	3501      	adds	r5, #1
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	e000      	b.n	8009ca8 <__cvt+0x3c>
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	aa07      	add	r2, sp, #28
 8009caa:	9204      	str	r2, [sp, #16]
 8009cac:	aa06      	add	r2, sp, #24
 8009cae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009cb2:	e9cd 3500 	strd	r3, r5, [sp]
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	463b      	mov	r3, r7
 8009cba:	f000 fcc5 	bl	800a648 <_dtoa_r>
 8009cbe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	d102      	bne.n	8009ccc <__cvt+0x60>
 8009cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cc8:	07db      	lsls	r3, r3, #31
 8009cca:	d522      	bpl.n	8009d12 <__cvt+0xa6>
 8009ccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cd0:	eb06 0905 	add.w	r9, r6, r5
 8009cd4:	d110      	bne.n	8009cf8 <__cvt+0x8c>
 8009cd6:	7833      	ldrb	r3, [r6, #0]
 8009cd8:	2b30      	cmp	r3, #48	; 0x30
 8009cda:	d10a      	bne.n	8009cf2 <__cvt+0x86>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 fe60 	bl	80009a8 <__aeabi_dcmpeq>
 8009ce8:	b918      	cbnz	r0, 8009cf2 <__cvt+0x86>
 8009cea:	f1c5 0501 	rsb	r5, r5, #1
 8009cee:	f8ca 5000 	str.w	r5, [sl]
 8009cf2:	f8da 3000 	ldr.w	r3, [sl]
 8009cf6:	4499      	add	r9, r3
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4639      	mov	r1, r7
 8009d00:	f7f6 fe52 	bl	80009a8 <__aeabi_dcmpeq>
 8009d04:	b108      	cbz	r0, 8009d0a <__cvt+0x9e>
 8009d06:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d0a:	2230      	movs	r2, #48	; 0x30
 8009d0c:	9b07      	ldr	r3, [sp, #28]
 8009d0e:	454b      	cmp	r3, r9
 8009d10:	d307      	bcc.n	8009d22 <__cvt+0xb6>
 8009d12:	4630      	mov	r0, r6
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d18:	1b9b      	subs	r3, r3, r6
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	b008      	add	sp, #32
 8009d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d22:	1c59      	adds	r1, r3, #1
 8009d24:	9107      	str	r1, [sp, #28]
 8009d26:	701a      	strb	r2, [r3, #0]
 8009d28:	e7f0      	b.n	8009d0c <__cvt+0xa0>

08009d2a <__exponent>:
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	f803 2b02 	strb.w	r2, [r3], #2
 8009d34:	bfb6      	itet	lt
 8009d36:	222d      	movlt	r2, #45	; 0x2d
 8009d38:	222b      	movge	r2, #43	; 0x2b
 8009d3a:	4249      	neglt	r1, r1
 8009d3c:	2909      	cmp	r1, #9
 8009d3e:	7042      	strb	r2, [r0, #1]
 8009d40:	dd2b      	ble.n	8009d9a <__exponent+0x70>
 8009d42:	f10d 0407 	add.w	r4, sp, #7
 8009d46:	46a4      	mov	ip, r4
 8009d48:	270a      	movs	r7, #10
 8009d4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d4e:	460a      	mov	r2, r1
 8009d50:	46a6      	mov	lr, r4
 8009d52:	fb07 1516 	mls	r5, r7, r6, r1
 8009d56:	2a63      	cmp	r2, #99	; 0x63
 8009d58:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d66:	dcf0      	bgt.n	8009d4a <__exponent+0x20>
 8009d68:	3130      	adds	r1, #48	; 0x30
 8009d6a:	f1ae 0502 	sub.w	r5, lr, #2
 8009d6e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d72:	4629      	mov	r1, r5
 8009d74:	1c44      	adds	r4, r0, #1
 8009d76:	4561      	cmp	r1, ip
 8009d78:	d30a      	bcc.n	8009d90 <__exponent+0x66>
 8009d7a:	f10d 0209 	add.w	r2, sp, #9
 8009d7e:	eba2 020e 	sub.w	r2, r2, lr
 8009d82:	4565      	cmp	r5, ip
 8009d84:	bf88      	it	hi
 8009d86:	2200      	movhi	r2, #0
 8009d88:	4413      	add	r3, r2
 8009d8a:	1a18      	subs	r0, r3, r0
 8009d8c:	b003      	add	sp, #12
 8009d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d94:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d98:	e7ed      	b.n	8009d76 <__exponent+0x4c>
 8009d9a:	2330      	movs	r3, #48	; 0x30
 8009d9c:	3130      	adds	r1, #48	; 0x30
 8009d9e:	7083      	strb	r3, [r0, #2]
 8009da0:	70c1      	strb	r1, [r0, #3]
 8009da2:	1d03      	adds	r3, r0, #4
 8009da4:	e7f1      	b.n	8009d8a <__exponent+0x60>
	...

08009da8 <_printf_float>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	b091      	sub	sp, #68	; 0x44
 8009dae:	460c      	mov	r4, r1
 8009db0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009db4:	4616      	mov	r6, r2
 8009db6:	461f      	mov	r7, r3
 8009db8:	4605      	mov	r5, r0
 8009dba:	f001 fa33 	bl	800b224 <_localeconv_r>
 8009dbe:	6803      	ldr	r3, [r0, #0]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc4:	f7f6 f9c4 	bl	8000150 <strlen>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	930e      	str	r3, [sp, #56]	; 0x38
 8009dcc:	f8d8 3000 	ldr.w	r3, [r8]
 8009dd0:	900a      	str	r0, [sp, #40]	; 0x28
 8009dd2:	3307      	adds	r3, #7
 8009dd4:	f023 0307 	bic.w	r3, r3, #7
 8009dd8:	f103 0208 	add.w	r2, r3, #8
 8009ddc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009de0:	f8d4 b000 	ldr.w	fp, [r4]
 8009de4:	f8c8 2000 	str.w	r2, [r8]
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009df0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009df4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009df8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfe:	4640      	mov	r0, r8
 8009e00:	4b9c      	ldr	r3, [pc, #624]	; (800a074 <_printf_float+0x2cc>)
 8009e02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e04:	f7f6 fe02 	bl	8000a0c <__aeabi_dcmpun>
 8009e08:	bb70      	cbnz	r0, 8009e68 <_printf_float+0xc0>
 8009e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0e:	4640      	mov	r0, r8
 8009e10:	4b98      	ldr	r3, [pc, #608]	; (800a074 <_printf_float+0x2cc>)
 8009e12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e14:	f7f6 fddc 	bl	80009d0 <__aeabi_dcmple>
 8009e18:	bb30      	cbnz	r0, 8009e68 <_printf_float+0xc0>
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4640      	mov	r0, r8
 8009e20:	4651      	mov	r1, sl
 8009e22:	f7f6 fdcb 	bl	80009bc <__aeabi_dcmplt>
 8009e26:	b110      	cbz	r0, 8009e2e <_printf_float+0x86>
 8009e28:	232d      	movs	r3, #45	; 0x2d
 8009e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e2e:	4b92      	ldr	r3, [pc, #584]	; (800a078 <_printf_float+0x2d0>)
 8009e30:	4892      	ldr	r0, [pc, #584]	; (800a07c <_printf_float+0x2d4>)
 8009e32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009e36:	bf94      	ite	ls
 8009e38:	4698      	movls	r8, r3
 8009e3a:	4680      	movhi	r8, r0
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	f04f 0a00 	mov.w	sl, #0
 8009e42:	6123      	str	r3, [r4, #16]
 8009e44:	f02b 0304 	bic.w	r3, fp, #4
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	4633      	mov	r3, r6
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4628      	mov	r0, r5
 8009e50:	9700      	str	r7, [sp, #0]
 8009e52:	aa0f      	add	r2, sp, #60	; 0x3c
 8009e54:	f000 f9d4 	bl	800a200 <_printf_common>
 8009e58:	3001      	adds	r0, #1
 8009e5a:	f040 8090 	bne.w	8009f7e <_printf_float+0x1d6>
 8009e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e62:	b011      	add	sp, #68	; 0x44
 8009e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e68:	4642      	mov	r2, r8
 8009e6a:	4653      	mov	r3, sl
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	4651      	mov	r1, sl
 8009e70:	f7f6 fdcc 	bl	8000a0c <__aeabi_dcmpun>
 8009e74:	b148      	cbz	r0, 8009e8a <_printf_float+0xe2>
 8009e76:	f1ba 0f00 	cmp.w	sl, #0
 8009e7a:	bfb8      	it	lt
 8009e7c:	232d      	movlt	r3, #45	; 0x2d
 8009e7e:	4880      	ldr	r0, [pc, #512]	; (800a080 <_printf_float+0x2d8>)
 8009e80:	bfb8      	it	lt
 8009e82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e86:	4b7f      	ldr	r3, [pc, #508]	; (800a084 <_printf_float+0x2dc>)
 8009e88:	e7d3      	b.n	8009e32 <_printf_float+0x8a>
 8009e8a:	6863      	ldr	r3, [r4, #4]
 8009e8c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	d142      	bne.n	8009f1a <_printf_float+0x172>
 8009e94:	2306      	movs	r3, #6
 8009e96:	6063      	str	r3, [r4, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	9206      	str	r2, [sp, #24]
 8009e9c:	aa0e      	add	r2, sp, #56	; 0x38
 8009e9e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009ea2:	aa0d      	add	r2, sp, #52	; 0x34
 8009ea4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009ea8:	9203      	str	r2, [sp, #12]
 8009eaa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009eae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	6863      	ldr	r3, [r4, #4]
 8009eb6:	4642      	mov	r2, r8
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	4628      	mov	r0, r5
 8009ebc:	4653      	mov	r3, sl
 8009ebe:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ec0:	f7ff fed4 	bl	8009c6c <__cvt>
 8009ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ec6:	4680      	mov	r8, r0
 8009ec8:	2947      	cmp	r1, #71	; 0x47
 8009eca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009ecc:	d108      	bne.n	8009ee0 <_printf_float+0x138>
 8009ece:	1cc8      	adds	r0, r1, #3
 8009ed0:	db02      	blt.n	8009ed8 <_printf_float+0x130>
 8009ed2:	6863      	ldr	r3, [r4, #4]
 8009ed4:	4299      	cmp	r1, r3
 8009ed6:	dd40      	ble.n	8009f5a <_printf_float+0x1b2>
 8009ed8:	f1a9 0902 	sub.w	r9, r9, #2
 8009edc:	fa5f f989 	uxtb.w	r9, r9
 8009ee0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009ee4:	d81f      	bhi.n	8009f26 <_printf_float+0x17e>
 8009ee6:	464a      	mov	r2, r9
 8009ee8:	3901      	subs	r1, #1
 8009eea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009eee:	910d      	str	r1, [sp, #52]	; 0x34
 8009ef0:	f7ff ff1b 	bl	8009d2a <__exponent>
 8009ef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ef6:	4682      	mov	sl, r0
 8009ef8:	1813      	adds	r3, r2, r0
 8009efa:	2a01      	cmp	r2, #1
 8009efc:	6123      	str	r3, [r4, #16]
 8009efe:	dc02      	bgt.n	8009f06 <_printf_float+0x15e>
 8009f00:	6822      	ldr	r2, [r4, #0]
 8009f02:	07d2      	lsls	r2, r2, #31
 8009f04:	d501      	bpl.n	8009f0a <_printf_float+0x162>
 8009f06:	3301      	adds	r3, #1
 8009f08:	6123      	str	r3, [r4, #16]
 8009f0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d09b      	beq.n	8009e4a <_printf_float+0xa2>
 8009f12:	232d      	movs	r3, #45	; 0x2d
 8009f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f18:	e797      	b.n	8009e4a <_printf_float+0xa2>
 8009f1a:	2947      	cmp	r1, #71	; 0x47
 8009f1c:	d1bc      	bne.n	8009e98 <_printf_float+0xf0>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1ba      	bne.n	8009e98 <_printf_float+0xf0>
 8009f22:	2301      	movs	r3, #1
 8009f24:	e7b7      	b.n	8009e96 <_printf_float+0xee>
 8009f26:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009f2a:	d118      	bne.n	8009f5e <_printf_float+0x1b6>
 8009f2c:	2900      	cmp	r1, #0
 8009f2e:	6863      	ldr	r3, [r4, #4]
 8009f30:	dd0b      	ble.n	8009f4a <_printf_float+0x1a2>
 8009f32:	6121      	str	r1, [r4, #16]
 8009f34:	b913      	cbnz	r3, 8009f3c <_printf_float+0x194>
 8009f36:	6822      	ldr	r2, [r4, #0]
 8009f38:	07d0      	lsls	r0, r2, #31
 8009f3a:	d502      	bpl.n	8009f42 <_printf_float+0x19a>
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	440b      	add	r3, r1
 8009f40:	6123      	str	r3, [r4, #16]
 8009f42:	f04f 0a00 	mov.w	sl, #0
 8009f46:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f48:	e7df      	b.n	8009f0a <_printf_float+0x162>
 8009f4a:	b913      	cbnz	r3, 8009f52 <_printf_float+0x1aa>
 8009f4c:	6822      	ldr	r2, [r4, #0]
 8009f4e:	07d2      	lsls	r2, r2, #31
 8009f50:	d501      	bpl.n	8009f56 <_printf_float+0x1ae>
 8009f52:	3302      	adds	r3, #2
 8009f54:	e7f4      	b.n	8009f40 <_printf_float+0x198>
 8009f56:	2301      	movs	r3, #1
 8009f58:	e7f2      	b.n	8009f40 <_printf_float+0x198>
 8009f5a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f60:	4299      	cmp	r1, r3
 8009f62:	db05      	blt.n	8009f70 <_printf_float+0x1c8>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	6121      	str	r1, [r4, #16]
 8009f68:	07d8      	lsls	r0, r3, #31
 8009f6a:	d5ea      	bpl.n	8009f42 <_printf_float+0x19a>
 8009f6c:	1c4b      	adds	r3, r1, #1
 8009f6e:	e7e7      	b.n	8009f40 <_printf_float+0x198>
 8009f70:	2900      	cmp	r1, #0
 8009f72:	bfcc      	ite	gt
 8009f74:	2201      	movgt	r2, #1
 8009f76:	f1c1 0202 	rsble	r2, r1, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	e7e0      	b.n	8009f40 <_printf_float+0x198>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	055a      	lsls	r2, r3, #21
 8009f82:	d407      	bmi.n	8009f94 <_printf_float+0x1ec>
 8009f84:	6923      	ldr	r3, [r4, #16]
 8009f86:	4642      	mov	r2, r8
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d12b      	bne.n	8009fea <_printf_float+0x242>
 8009f92:	e764      	b.n	8009e5e <_printf_float+0xb6>
 8009f94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009f98:	f240 80dd 	bls.w	800a156 <_printf_float+0x3ae>
 8009f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f7f6 fd00 	bl	80009a8 <__aeabi_dcmpeq>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d033      	beq.n	800a014 <_printf_float+0x26c>
 8009fac:	2301      	movs	r3, #1
 8009fae:	4631      	mov	r1, r6
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	4a35      	ldr	r2, [pc, #212]	; (800a088 <_printf_float+0x2e0>)
 8009fb4:	47b8      	blx	r7
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	f43f af51 	beq.w	8009e5e <_printf_float+0xb6>
 8009fbc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	db02      	blt.n	8009fca <_printf_float+0x222>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	07d8      	lsls	r0, r3, #31
 8009fc8:	d50f      	bpl.n	8009fea <_printf_float+0x242>
 8009fca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b8      	blx	r7
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f43f af42 	beq.w	8009e5e <_printf_float+0xb6>
 8009fda:	f04f 0800 	mov.w	r8, #0
 8009fde:	f104 091a 	add.w	r9, r4, #26
 8009fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	4543      	cmp	r3, r8
 8009fe8:	dc09      	bgt.n	8009ffe <_printf_float+0x256>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	079b      	lsls	r3, r3, #30
 8009fee:	f100 8102 	bmi.w	800a1f6 <_printf_float+0x44e>
 8009ff2:	68e0      	ldr	r0, [r4, #12]
 8009ff4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ff6:	4298      	cmp	r0, r3
 8009ff8:	bfb8      	it	lt
 8009ffa:	4618      	movlt	r0, r3
 8009ffc:	e731      	b.n	8009e62 <_printf_float+0xba>
 8009ffe:	2301      	movs	r3, #1
 800a000:	464a      	mov	r2, r9
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	47b8      	blx	r7
 800a008:	3001      	adds	r0, #1
 800a00a:	f43f af28 	beq.w	8009e5e <_printf_float+0xb6>
 800a00e:	f108 0801 	add.w	r8, r8, #1
 800a012:	e7e6      	b.n	8009fe2 <_printf_float+0x23a>
 800a014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a016:	2b00      	cmp	r3, #0
 800a018:	dc38      	bgt.n	800a08c <_printf_float+0x2e4>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4631      	mov	r1, r6
 800a01e:	4628      	mov	r0, r5
 800a020:	4a19      	ldr	r2, [pc, #100]	; (800a088 <_printf_float+0x2e0>)
 800a022:	47b8      	blx	r7
 800a024:	3001      	adds	r0, #1
 800a026:	f43f af1a 	beq.w	8009e5e <_printf_float+0xb6>
 800a02a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a02e:	4313      	orrs	r3, r2
 800a030:	d102      	bne.n	800a038 <_printf_float+0x290>
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	07d9      	lsls	r1, r3, #31
 800a036:	d5d8      	bpl.n	8009fea <_printf_float+0x242>
 800a038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	f43f af0b 	beq.w	8009e5e <_printf_float+0xb6>
 800a048:	f04f 0900 	mov.w	r9, #0
 800a04c:	f104 0a1a 	add.w	sl, r4, #26
 800a050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a052:	425b      	negs	r3, r3
 800a054:	454b      	cmp	r3, r9
 800a056:	dc01      	bgt.n	800a05c <_printf_float+0x2b4>
 800a058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a05a:	e794      	b.n	8009f86 <_printf_float+0x1de>
 800a05c:	2301      	movs	r3, #1
 800a05e:	4652      	mov	r2, sl
 800a060:	4631      	mov	r1, r6
 800a062:	4628      	mov	r0, r5
 800a064:	47b8      	blx	r7
 800a066:	3001      	adds	r0, #1
 800a068:	f43f aef9 	beq.w	8009e5e <_printf_float+0xb6>
 800a06c:	f109 0901 	add.w	r9, r9, #1
 800a070:	e7ee      	b.n	800a050 <_printf_float+0x2a8>
 800a072:	bf00      	nop
 800a074:	7fefffff 	.word	0x7fefffff
 800a078:	0800ca54 	.word	0x0800ca54
 800a07c:	0800ca58 	.word	0x0800ca58
 800a080:	0800ca60 	.word	0x0800ca60
 800a084:	0800ca5c 	.word	0x0800ca5c
 800a088:	0800ca64 	.word	0x0800ca64
 800a08c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a08e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a090:	429a      	cmp	r2, r3
 800a092:	bfa8      	it	ge
 800a094:	461a      	movge	r2, r3
 800a096:	2a00      	cmp	r2, #0
 800a098:	4691      	mov	r9, r2
 800a09a:	dc37      	bgt.n	800a10c <_printf_float+0x364>
 800a09c:	f04f 0b00 	mov.w	fp, #0
 800a0a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0a4:	f104 021a 	add.w	r2, r4, #26
 800a0a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a0ac:	ebaa 0309 	sub.w	r3, sl, r9
 800a0b0:	455b      	cmp	r3, fp
 800a0b2:	dc33      	bgt.n	800a11c <_printf_float+0x374>
 800a0b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	db3b      	blt.n	800a134 <_printf_float+0x38c>
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	07da      	lsls	r2, r3, #31
 800a0c0:	d438      	bmi.n	800a134 <_printf_float+0x38c>
 800a0c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0c6:	eba3 020a 	sub.w	r2, r3, sl
 800a0ca:	eba3 0901 	sub.w	r9, r3, r1
 800a0ce:	4591      	cmp	r9, r2
 800a0d0:	bfa8      	it	ge
 800a0d2:	4691      	movge	r9, r2
 800a0d4:	f1b9 0f00 	cmp.w	r9, #0
 800a0d8:	dc34      	bgt.n	800a144 <_printf_float+0x39c>
 800a0da:	f04f 0800 	mov.w	r8, #0
 800a0de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0e2:	f104 0a1a 	add.w	sl, r4, #26
 800a0e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0ea:	1a9b      	subs	r3, r3, r2
 800a0ec:	eba3 0309 	sub.w	r3, r3, r9
 800a0f0:	4543      	cmp	r3, r8
 800a0f2:	f77f af7a 	ble.w	8009fea <_printf_float+0x242>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	4652      	mov	r2, sl
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b8      	blx	r7
 800a100:	3001      	adds	r0, #1
 800a102:	f43f aeac 	beq.w	8009e5e <_printf_float+0xb6>
 800a106:	f108 0801 	add.w	r8, r8, #1
 800a10a:	e7ec      	b.n	800a0e6 <_printf_float+0x33e>
 800a10c:	4613      	mov	r3, r2
 800a10e:	4631      	mov	r1, r6
 800a110:	4642      	mov	r2, r8
 800a112:	4628      	mov	r0, r5
 800a114:	47b8      	blx	r7
 800a116:	3001      	adds	r0, #1
 800a118:	d1c0      	bne.n	800a09c <_printf_float+0x2f4>
 800a11a:	e6a0      	b.n	8009e5e <_printf_float+0xb6>
 800a11c:	2301      	movs	r3, #1
 800a11e:	4631      	mov	r1, r6
 800a120:	4628      	mov	r0, r5
 800a122:	920b      	str	r2, [sp, #44]	; 0x2c
 800a124:	47b8      	blx	r7
 800a126:	3001      	adds	r0, #1
 800a128:	f43f ae99 	beq.w	8009e5e <_printf_float+0xb6>
 800a12c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a12e:	f10b 0b01 	add.w	fp, fp, #1
 800a132:	e7b9      	b.n	800a0a8 <_printf_float+0x300>
 800a134:	4631      	mov	r1, r6
 800a136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a13a:	4628      	mov	r0, r5
 800a13c:	47b8      	blx	r7
 800a13e:	3001      	adds	r0, #1
 800a140:	d1bf      	bne.n	800a0c2 <_printf_float+0x31a>
 800a142:	e68c      	b.n	8009e5e <_printf_float+0xb6>
 800a144:	464b      	mov	r3, r9
 800a146:	4631      	mov	r1, r6
 800a148:	4628      	mov	r0, r5
 800a14a:	eb08 020a 	add.w	r2, r8, sl
 800a14e:	47b8      	blx	r7
 800a150:	3001      	adds	r0, #1
 800a152:	d1c2      	bne.n	800a0da <_printf_float+0x332>
 800a154:	e683      	b.n	8009e5e <_printf_float+0xb6>
 800a156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a158:	2a01      	cmp	r2, #1
 800a15a:	dc01      	bgt.n	800a160 <_printf_float+0x3b8>
 800a15c:	07db      	lsls	r3, r3, #31
 800a15e:	d537      	bpl.n	800a1d0 <_printf_float+0x428>
 800a160:	2301      	movs	r3, #1
 800a162:	4642      	mov	r2, r8
 800a164:	4631      	mov	r1, r6
 800a166:	4628      	mov	r0, r5
 800a168:	47b8      	blx	r7
 800a16a:	3001      	adds	r0, #1
 800a16c:	f43f ae77 	beq.w	8009e5e <_printf_float+0xb6>
 800a170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a174:	4631      	mov	r1, r6
 800a176:	4628      	mov	r0, r5
 800a178:	47b8      	blx	r7
 800a17a:	3001      	adds	r0, #1
 800a17c:	f43f ae6f 	beq.w	8009e5e <_printf_float+0xb6>
 800a180:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a184:	2200      	movs	r2, #0
 800a186:	2300      	movs	r3, #0
 800a188:	f7f6 fc0e 	bl	80009a8 <__aeabi_dcmpeq>
 800a18c:	b9d8      	cbnz	r0, 800a1c6 <_printf_float+0x41e>
 800a18e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a190:	f108 0201 	add.w	r2, r8, #1
 800a194:	3b01      	subs	r3, #1
 800a196:	4631      	mov	r1, r6
 800a198:	4628      	mov	r0, r5
 800a19a:	47b8      	blx	r7
 800a19c:	3001      	adds	r0, #1
 800a19e:	d10e      	bne.n	800a1be <_printf_float+0x416>
 800a1a0:	e65d      	b.n	8009e5e <_printf_float+0xb6>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	464a      	mov	r2, r9
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	47b8      	blx	r7
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	f43f ae56 	beq.w	8009e5e <_printf_float+0xb6>
 800a1b2:	f108 0801 	add.w	r8, r8, #1
 800a1b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	4543      	cmp	r3, r8
 800a1bc:	dcf1      	bgt.n	800a1a2 <_printf_float+0x3fa>
 800a1be:	4653      	mov	r3, sl
 800a1c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a1c4:	e6e0      	b.n	8009f88 <_printf_float+0x1e0>
 800a1c6:	f04f 0800 	mov.w	r8, #0
 800a1ca:	f104 091a 	add.w	r9, r4, #26
 800a1ce:	e7f2      	b.n	800a1b6 <_printf_float+0x40e>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	4642      	mov	r2, r8
 800a1d4:	e7df      	b.n	800a196 <_printf_float+0x3ee>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	464a      	mov	r2, r9
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4628      	mov	r0, r5
 800a1de:	47b8      	blx	r7
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	f43f ae3c 	beq.w	8009e5e <_printf_float+0xb6>
 800a1e6:	f108 0801 	add.w	r8, r8, #1
 800a1ea:	68e3      	ldr	r3, [r4, #12]
 800a1ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a1ee:	1a5b      	subs	r3, r3, r1
 800a1f0:	4543      	cmp	r3, r8
 800a1f2:	dcf0      	bgt.n	800a1d6 <_printf_float+0x42e>
 800a1f4:	e6fd      	b.n	8009ff2 <_printf_float+0x24a>
 800a1f6:	f04f 0800 	mov.w	r8, #0
 800a1fa:	f104 0919 	add.w	r9, r4, #25
 800a1fe:	e7f4      	b.n	800a1ea <_printf_float+0x442>

0800a200 <_printf_common>:
 800a200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a204:	4616      	mov	r6, r2
 800a206:	4699      	mov	r9, r3
 800a208:	688a      	ldr	r2, [r1, #8]
 800a20a:	690b      	ldr	r3, [r1, #16]
 800a20c:	4607      	mov	r7, r0
 800a20e:	4293      	cmp	r3, r2
 800a210:	bfb8      	it	lt
 800a212:	4613      	movlt	r3, r2
 800a214:	6033      	str	r3, [r6, #0]
 800a216:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a21a:	460c      	mov	r4, r1
 800a21c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a220:	b10a      	cbz	r2, 800a226 <_printf_common+0x26>
 800a222:	3301      	adds	r3, #1
 800a224:	6033      	str	r3, [r6, #0]
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	0699      	lsls	r1, r3, #26
 800a22a:	bf42      	ittt	mi
 800a22c:	6833      	ldrmi	r3, [r6, #0]
 800a22e:	3302      	addmi	r3, #2
 800a230:	6033      	strmi	r3, [r6, #0]
 800a232:	6825      	ldr	r5, [r4, #0]
 800a234:	f015 0506 	ands.w	r5, r5, #6
 800a238:	d106      	bne.n	800a248 <_printf_common+0x48>
 800a23a:	f104 0a19 	add.w	sl, r4, #25
 800a23e:	68e3      	ldr	r3, [r4, #12]
 800a240:	6832      	ldr	r2, [r6, #0]
 800a242:	1a9b      	subs	r3, r3, r2
 800a244:	42ab      	cmp	r3, r5
 800a246:	dc28      	bgt.n	800a29a <_printf_common+0x9a>
 800a248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a24c:	1e13      	subs	r3, r2, #0
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	bf18      	it	ne
 800a252:	2301      	movne	r3, #1
 800a254:	0692      	lsls	r2, r2, #26
 800a256:	d42d      	bmi.n	800a2b4 <_printf_common+0xb4>
 800a258:	4649      	mov	r1, r9
 800a25a:	4638      	mov	r0, r7
 800a25c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a260:	47c0      	blx	r8
 800a262:	3001      	adds	r0, #1
 800a264:	d020      	beq.n	800a2a8 <_printf_common+0xa8>
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	68e5      	ldr	r5, [r4, #12]
 800a26a:	f003 0306 	and.w	r3, r3, #6
 800a26e:	2b04      	cmp	r3, #4
 800a270:	bf18      	it	ne
 800a272:	2500      	movne	r5, #0
 800a274:	6832      	ldr	r2, [r6, #0]
 800a276:	f04f 0600 	mov.w	r6, #0
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	bf08      	it	eq
 800a27e:	1aad      	subeq	r5, r5, r2
 800a280:	6922      	ldr	r2, [r4, #16]
 800a282:	bf08      	it	eq
 800a284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a288:	4293      	cmp	r3, r2
 800a28a:	bfc4      	itt	gt
 800a28c:	1a9b      	subgt	r3, r3, r2
 800a28e:	18ed      	addgt	r5, r5, r3
 800a290:	341a      	adds	r4, #26
 800a292:	42b5      	cmp	r5, r6
 800a294:	d11a      	bne.n	800a2cc <_printf_common+0xcc>
 800a296:	2000      	movs	r0, #0
 800a298:	e008      	b.n	800a2ac <_printf_common+0xac>
 800a29a:	2301      	movs	r3, #1
 800a29c:	4652      	mov	r2, sl
 800a29e:	4649      	mov	r1, r9
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	47c0      	blx	r8
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d103      	bne.n	800a2b0 <_printf_common+0xb0>
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b0:	3501      	adds	r5, #1
 800a2b2:	e7c4      	b.n	800a23e <_printf_common+0x3e>
 800a2b4:	2030      	movs	r0, #48	; 0x30
 800a2b6:	18e1      	adds	r1, r4, r3
 800a2b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2c2:	4422      	add	r2, r4
 800a2c4:	3302      	adds	r3, #2
 800a2c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2ca:	e7c5      	b.n	800a258 <_printf_common+0x58>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	4622      	mov	r2, r4
 800a2d0:	4649      	mov	r1, r9
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	47c0      	blx	r8
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	d0e6      	beq.n	800a2a8 <_printf_common+0xa8>
 800a2da:	3601      	adds	r6, #1
 800a2dc:	e7d9      	b.n	800a292 <_printf_common+0x92>
	...

0800a2e0 <_printf_i>:
 800a2e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	7e0f      	ldrb	r7, [r1, #24]
 800a2e6:	4691      	mov	r9, r2
 800a2e8:	2f78      	cmp	r7, #120	; 0x78
 800a2ea:	4680      	mov	r8, r0
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	469a      	mov	sl, r3
 800a2f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2f6:	d807      	bhi.n	800a308 <_printf_i+0x28>
 800a2f8:	2f62      	cmp	r7, #98	; 0x62
 800a2fa:	d80a      	bhi.n	800a312 <_printf_i+0x32>
 800a2fc:	2f00      	cmp	r7, #0
 800a2fe:	f000 80d9 	beq.w	800a4b4 <_printf_i+0x1d4>
 800a302:	2f58      	cmp	r7, #88	; 0x58
 800a304:	f000 80a4 	beq.w	800a450 <_printf_i+0x170>
 800a308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a30c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a310:	e03a      	b.n	800a388 <_printf_i+0xa8>
 800a312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a316:	2b15      	cmp	r3, #21
 800a318:	d8f6      	bhi.n	800a308 <_printf_i+0x28>
 800a31a:	a101      	add	r1, pc, #4	; (adr r1, 800a320 <_printf_i+0x40>)
 800a31c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a320:	0800a379 	.word	0x0800a379
 800a324:	0800a38d 	.word	0x0800a38d
 800a328:	0800a309 	.word	0x0800a309
 800a32c:	0800a309 	.word	0x0800a309
 800a330:	0800a309 	.word	0x0800a309
 800a334:	0800a309 	.word	0x0800a309
 800a338:	0800a38d 	.word	0x0800a38d
 800a33c:	0800a309 	.word	0x0800a309
 800a340:	0800a309 	.word	0x0800a309
 800a344:	0800a309 	.word	0x0800a309
 800a348:	0800a309 	.word	0x0800a309
 800a34c:	0800a49b 	.word	0x0800a49b
 800a350:	0800a3bd 	.word	0x0800a3bd
 800a354:	0800a47d 	.word	0x0800a47d
 800a358:	0800a309 	.word	0x0800a309
 800a35c:	0800a309 	.word	0x0800a309
 800a360:	0800a4bd 	.word	0x0800a4bd
 800a364:	0800a309 	.word	0x0800a309
 800a368:	0800a3bd 	.word	0x0800a3bd
 800a36c:	0800a309 	.word	0x0800a309
 800a370:	0800a309 	.word	0x0800a309
 800a374:	0800a485 	.word	0x0800a485
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	1d1a      	adds	r2, r3, #4
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	602a      	str	r2, [r5, #0]
 800a380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a388:	2301      	movs	r3, #1
 800a38a:	e0a4      	b.n	800a4d6 <_printf_i+0x1f6>
 800a38c:	6820      	ldr	r0, [r4, #0]
 800a38e:	6829      	ldr	r1, [r5, #0]
 800a390:	0606      	lsls	r6, r0, #24
 800a392:	f101 0304 	add.w	r3, r1, #4
 800a396:	d50a      	bpl.n	800a3ae <_printf_i+0xce>
 800a398:	680e      	ldr	r6, [r1, #0]
 800a39a:	602b      	str	r3, [r5, #0]
 800a39c:	2e00      	cmp	r6, #0
 800a39e:	da03      	bge.n	800a3a8 <_printf_i+0xc8>
 800a3a0:	232d      	movs	r3, #45	; 0x2d
 800a3a2:	4276      	negs	r6, r6
 800a3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a8:	230a      	movs	r3, #10
 800a3aa:	485e      	ldr	r0, [pc, #376]	; (800a524 <_printf_i+0x244>)
 800a3ac:	e019      	b.n	800a3e2 <_printf_i+0x102>
 800a3ae:	680e      	ldr	r6, [r1, #0]
 800a3b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	bf18      	it	ne
 800a3b8:	b236      	sxthne	r6, r6
 800a3ba:	e7ef      	b.n	800a39c <_printf_i+0xbc>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	6820      	ldr	r0, [r4, #0]
 800a3c0:	1d19      	adds	r1, r3, #4
 800a3c2:	6029      	str	r1, [r5, #0]
 800a3c4:	0601      	lsls	r1, r0, #24
 800a3c6:	d501      	bpl.n	800a3cc <_printf_i+0xec>
 800a3c8:	681e      	ldr	r6, [r3, #0]
 800a3ca:	e002      	b.n	800a3d2 <_printf_i+0xf2>
 800a3cc:	0646      	lsls	r6, r0, #25
 800a3ce:	d5fb      	bpl.n	800a3c8 <_printf_i+0xe8>
 800a3d0:	881e      	ldrh	r6, [r3, #0]
 800a3d2:	2f6f      	cmp	r7, #111	; 0x6f
 800a3d4:	bf0c      	ite	eq
 800a3d6:	2308      	moveq	r3, #8
 800a3d8:	230a      	movne	r3, #10
 800a3da:	4852      	ldr	r0, [pc, #328]	; (800a524 <_printf_i+0x244>)
 800a3dc:	2100      	movs	r1, #0
 800a3de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3e2:	6865      	ldr	r5, [r4, #4]
 800a3e4:	2d00      	cmp	r5, #0
 800a3e6:	bfa8      	it	ge
 800a3e8:	6821      	ldrge	r1, [r4, #0]
 800a3ea:	60a5      	str	r5, [r4, #8]
 800a3ec:	bfa4      	itt	ge
 800a3ee:	f021 0104 	bicge.w	r1, r1, #4
 800a3f2:	6021      	strge	r1, [r4, #0]
 800a3f4:	b90e      	cbnz	r6, 800a3fa <_printf_i+0x11a>
 800a3f6:	2d00      	cmp	r5, #0
 800a3f8:	d04d      	beq.n	800a496 <_printf_i+0x1b6>
 800a3fa:	4615      	mov	r5, r2
 800a3fc:	fbb6 f1f3 	udiv	r1, r6, r3
 800a400:	fb03 6711 	mls	r7, r3, r1, r6
 800a404:	5dc7      	ldrb	r7, [r0, r7]
 800a406:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a40a:	4637      	mov	r7, r6
 800a40c:	42bb      	cmp	r3, r7
 800a40e:	460e      	mov	r6, r1
 800a410:	d9f4      	bls.n	800a3fc <_printf_i+0x11c>
 800a412:	2b08      	cmp	r3, #8
 800a414:	d10b      	bne.n	800a42e <_printf_i+0x14e>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	07de      	lsls	r6, r3, #31
 800a41a:	d508      	bpl.n	800a42e <_printf_i+0x14e>
 800a41c:	6923      	ldr	r3, [r4, #16]
 800a41e:	6861      	ldr	r1, [r4, #4]
 800a420:	4299      	cmp	r1, r3
 800a422:	bfde      	ittt	le
 800a424:	2330      	movle	r3, #48	; 0x30
 800a426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a42a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a42e:	1b52      	subs	r2, r2, r5
 800a430:	6122      	str	r2, [r4, #16]
 800a432:	464b      	mov	r3, r9
 800a434:	4621      	mov	r1, r4
 800a436:	4640      	mov	r0, r8
 800a438:	f8cd a000 	str.w	sl, [sp]
 800a43c:	aa03      	add	r2, sp, #12
 800a43e:	f7ff fedf 	bl	800a200 <_printf_common>
 800a442:	3001      	adds	r0, #1
 800a444:	d14c      	bne.n	800a4e0 <_printf_i+0x200>
 800a446:	f04f 30ff 	mov.w	r0, #4294967295
 800a44a:	b004      	add	sp, #16
 800a44c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a450:	4834      	ldr	r0, [pc, #208]	; (800a524 <_printf_i+0x244>)
 800a452:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a456:	6829      	ldr	r1, [r5, #0]
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a45e:	6029      	str	r1, [r5, #0]
 800a460:	061d      	lsls	r5, r3, #24
 800a462:	d514      	bpl.n	800a48e <_printf_i+0x1ae>
 800a464:	07df      	lsls	r7, r3, #31
 800a466:	bf44      	itt	mi
 800a468:	f043 0320 	orrmi.w	r3, r3, #32
 800a46c:	6023      	strmi	r3, [r4, #0]
 800a46e:	b91e      	cbnz	r6, 800a478 <_printf_i+0x198>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	f023 0320 	bic.w	r3, r3, #32
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	2310      	movs	r3, #16
 800a47a:	e7af      	b.n	800a3dc <_printf_i+0xfc>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	f043 0320 	orr.w	r3, r3, #32
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	2378      	movs	r3, #120	; 0x78
 800a486:	4828      	ldr	r0, [pc, #160]	; (800a528 <_printf_i+0x248>)
 800a488:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a48c:	e7e3      	b.n	800a456 <_printf_i+0x176>
 800a48e:	0659      	lsls	r1, r3, #25
 800a490:	bf48      	it	mi
 800a492:	b2b6      	uxthmi	r6, r6
 800a494:	e7e6      	b.n	800a464 <_printf_i+0x184>
 800a496:	4615      	mov	r5, r2
 800a498:	e7bb      	b.n	800a412 <_printf_i+0x132>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	6826      	ldr	r6, [r4, #0]
 800a49e:	1d18      	adds	r0, r3, #4
 800a4a0:	6961      	ldr	r1, [r4, #20]
 800a4a2:	6028      	str	r0, [r5, #0]
 800a4a4:	0635      	lsls	r5, r6, #24
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	d501      	bpl.n	800a4ae <_printf_i+0x1ce>
 800a4aa:	6019      	str	r1, [r3, #0]
 800a4ac:	e002      	b.n	800a4b4 <_printf_i+0x1d4>
 800a4ae:	0670      	lsls	r0, r6, #25
 800a4b0:	d5fb      	bpl.n	800a4aa <_printf_i+0x1ca>
 800a4b2:	8019      	strh	r1, [r3, #0]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4615      	mov	r5, r2
 800a4b8:	6123      	str	r3, [r4, #16]
 800a4ba:	e7ba      	b.n	800a432 <_printf_i+0x152>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	2100      	movs	r1, #0
 800a4c0:	1d1a      	adds	r2, r3, #4
 800a4c2:	602a      	str	r2, [r5, #0]
 800a4c4:	681d      	ldr	r5, [r3, #0]
 800a4c6:	6862      	ldr	r2, [r4, #4]
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f000 feb7 	bl	800b23c <memchr>
 800a4ce:	b108      	cbz	r0, 800a4d4 <_printf_i+0x1f4>
 800a4d0:	1b40      	subs	r0, r0, r5
 800a4d2:	6060      	str	r0, [r4, #4]
 800a4d4:	6863      	ldr	r3, [r4, #4]
 800a4d6:	6123      	str	r3, [r4, #16]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4de:	e7a8      	b.n	800a432 <_printf_i+0x152>
 800a4e0:	462a      	mov	r2, r5
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	47d0      	blx	sl
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	d0ab      	beq.n	800a446 <_printf_i+0x166>
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	079b      	lsls	r3, r3, #30
 800a4f2:	d413      	bmi.n	800a51c <_printf_i+0x23c>
 800a4f4:	68e0      	ldr	r0, [r4, #12]
 800a4f6:	9b03      	ldr	r3, [sp, #12]
 800a4f8:	4298      	cmp	r0, r3
 800a4fa:	bfb8      	it	lt
 800a4fc:	4618      	movlt	r0, r3
 800a4fe:	e7a4      	b.n	800a44a <_printf_i+0x16a>
 800a500:	2301      	movs	r3, #1
 800a502:	4632      	mov	r2, r6
 800a504:	4649      	mov	r1, r9
 800a506:	4640      	mov	r0, r8
 800a508:	47d0      	blx	sl
 800a50a:	3001      	adds	r0, #1
 800a50c:	d09b      	beq.n	800a446 <_printf_i+0x166>
 800a50e:	3501      	adds	r5, #1
 800a510:	68e3      	ldr	r3, [r4, #12]
 800a512:	9903      	ldr	r1, [sp, #12]
 800a514:	1a5b      	subs	r3, r3, r1
 800a516:	42ab      	cmp	r3, r5
 800a518:	dcf2      	bgt.n	800a500 <_printf_i+0x220>
 800a51a:	e7eb      	b.n	800a4f4 <_printf_i+0x214>
 800a51c:	2500      	movs	r5, #0
 800a51e:	f104 0619 	add.w	r6, r4, #25
 800a522:	e7f5      	b.n	800a510 <_printf_i+0x230>
 800a524:	0800ca66 	.word	0x0800ca66
 800a528:	0800ca77 	.word	0x0800ca77

0800a52c <quorem>:
 800a52c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a530:	6903      	ldr	r3, [r0, #16]
 800a532:	690c      	ldr	r4, [r1, #16]
 800a534:	4607      	mov	r7, r0
 800a536:	42a3      	cmp	r3, r4
 800a538:	f2c0 8082 	blt.w	800a640 <quorem+0x114>
 800a53c:	3c01      	subs	r4, #1
 800a53e:	f100 0514 	add.w	r5, r0, #20
 800a542:	f101 0814 	add.w	r8, r1, #20
 800a546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a554:	3301      	adds	r3, #1
 800a556:	429a      	cmp	r2, r3
 800a558:	fbb2 f6f3 	udiv	r6, r2, r3
 800a55c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a560:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a564:	d331      	bcc.n	800a5ca <quorem+0x9e>
 800a566:	f04f 0e00 	mov.w	lr, #0
 800a56a:	4640      	mov	r0, r8
 800a56c:	46ac      	mov	ip, r5
 800a56e:	46f2      	mov	sl, lr
 800a570:	f850 2b04 	ldr.w	r2, [r0], #4
 800a574:	b293      	uxth	r3, r2
 800a576:	fb06 e303 	mla	r3, r6, r3, lr
 800a57a:	0c12      	lsrs	r2, r2, #16
 800a57c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a580:	b29b      	uxth	r3, r3
 800a582:	fb06 e202 	mla	r2, r6, r2, lr
 800a586:	ebaa 0303 	sub.w	r3, sl, r3
 800a58a:	f8dc a000 	ldr.w	sl, [ip]
 800a58e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a592:	fa1f fa8a 	uxth.w	sl, sl
 800a596:	4453      	add	r3, sl
 800a598:	f8dc a000 	ldr.w	sl, [ip]
 800a59c:	b292      	uxth	r2, r2
 800a59e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5ac:	4581      	cmp	r9, r0
 800a5ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5b2:	f84c 3b04 	str.w	r3, [ip], #4
 800a5b6:	d2db      	bcs.n	800a570 <quorem+0x44>
 800a5b8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5bc:	b92b      	cbnz	r3, 800a5ca <quorem+0x9e>
 800a5be:	9b01      	ldr	r3, [sp, #4]
 800a5c0:	3b04      	subs	r3, #4
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	d32f      	bcc.n	800a628 <quorem+0xfc>
 800a5c8:	613c      	str	r4, [r7, #16]
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	f001 f8d0 	bl	800b770 <__mcmp>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	db25      	blt.n	800a620 <quorem+0xf4>
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f04f 0c00 	mov.w	ip, #0
 800a5da:	3601      	adds	r6, #1
 800a5dc:	f858 1b04 	ldr.w	r1, [r8], #4
 800a5e0:	f8d0 e000 	ldr.w	lr, [r0]
 800a5e4:	b28b      	uxth	r3, r1
 800a5e6:	ebac 0303 	sub.w	r3, ip, r3
 800a5ea:	fa1f f28e 	uxth.w	r2, lr
 800a5ee:	4413      	add	r3, r2
 800a5f0:	0c0a      	lsrs	r2, r1, #16
 800a5f2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a600:	45c1      	cmp	r9, r8
 800a602:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a606:	f840 3b04 	str.w	r3, [r0], #4
 800a60a:	d2e7      	bcs.n	800a5dc <quorem+0xb0>
 800a60c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a614:	b922      	cbnz	r2, 800a620 <quorem+0xf4>
 800a616:	3b04      	subs	r3, #4
 800a618:	429d      	cmp	r5, r3
 800a61a:	461a      	mov	r2, r3
 800a61c:	d30a      	bcc.n	800a634 <quorem+0x108>
 800a61e:	613c      	str	r4, [r7, #16]
 800a620:	4630      	mov	r0, r6
 800a622:	b003      	add	sp, #12
 800a624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a628:	6812      	ldr	r2, [r2, #0]
 800a62a:	3b04      	subs	r3, #4
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	d1cb      	bne.n	800a5c8 <quorem+0x9c>
 800a630:	3c01      	subs	r4, #1
 800a632:	e7c6      	b.n	800a5c2 <quorem+0x96>
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	3b04      	subs	r3, #4
 800a638:	2a00      	cmp	r2, #0
 800a63a:	d1f0      	bne.n	800a61e <quorem+0xf2>
 800a63c:	3c01      	subs	r4, #1
 800a63e:	e7eb      	b.n	800a618 <quorem+0xec>
 800a640:	2000      	movs	r0, #0
 800a642:	e7ee      	b.n	800a622 <quorem+0xf6>
 800a644:	0000      	movs	r0, r0
	...

0800a648 <_dtoa_r>:
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a64c:	4616      	mov	r6, r2
 800a64e:	461f      	mov	r7, r3
 800a650:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a652:	b099      	sub	sp, #100	; 0x64
 800a654:	4605      	mov	r5, r0
 800a656:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a65a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a65e:	b974      	cbnz	r4, 800a67e <_dtoa_r+0x36>
 800a660:	2010      	movs	r0, #16
 800a662:	f000 fde3 	bl	800b22c <malloc>
 800a666:	4602      	mov	r2, r0
 800a668:	6268      	str	r0, [r5, #36]	; 0x24
 800a66a:	b920      	cbnz	r0, 800a676 <_dtoa_r+0x2e>
 800a66c:	21ea      	movs	r1, #234	; 0xea
 800a66e:	4ba8      	ldr	r3, [pc, #672]	; (800a910 <_dtoa_r+0x2c8>)
 800a670:	48a8      	ldr	r0, [pc, #672]	; (800a914 <_dtoa_r+0x2cc>)
 800a672:	f001 fa81 	bl	800bb78 <__assert_func>
 800a676:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a67a:	6004      	str	r4, [r0, #0]
 800a67c:	60c4      	str	r4, [r0, #12]
 800a67e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a680:	6819      	ldr	r1, [r3, #0]
 800a682:	b151      	cbz	r1, 800a69a <_dtoa_r+0x52>
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	2301      	movs	r3, #1
 800a688:	4093      	lsls	r3, r2
 800a68a:	604a      	str	r2, [r1, #4]
 800a68c:	608b      	str	r3, [r1, #8]
 800a68e:	4628      	mov	r0, r5
 800a690:	f000 fe30 	bl	800b2f4 <_Bfree>
 800a694:	2200      	movs	r2, #0
 800a696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a698:	601a      	str	r2, [r3, #0]
 800a69a:	1e3b      	subs	r3, r7, #0
 800a69c:	bfaf      	iteee	ge
 800a69e:	2300      	movge	r3, #0
 800a6a0:	2201      	movlt	r2, #1
 800a6a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a6a6:	9305      	strlt	r3, [sp, #20]
 800a6a8:	bfa8      	it	ge
 800a6aa:	f8c8 3000 	strge.w	r3, [r8]
 800a6ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a6b2:	4b99      	ldr	r3, [pc, #612]	; (800a918 <_dtoa_r+0x2d0>)
 800a6b4:	bfb8      	it	lt
 800a6b6:	f8c8 2000 	strlt.w	r2, [r8]
 800a6ba:	ea33 0309 	bics.w	r3, r3, r9
 800a6be:	d119      	bne.n	800a6f4 <_dtoa_r+0xac>
 800a6c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6cc:	4333      	orrs	r3, r6
 800a6ce:	f000 857f 	beq.w	800b1d0 <_dtoa_r+0xb88>
 800a6d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6d4:	b953      	cbnz	r3, 800a6ec <_dtoa_r+0xa4>
 800a6d6:	4b91      	ldr	r3, [pc, #580]	; (800a91c <_dtoa_r+0x2d4>)
 800a6d8:	e022      	b.n	800a720 <_dtoa_r+0xd8>
 800a6da:	4b91      	ldr	r3, [pc, #580]	; (800a920 <_dtoa_r+0x2d8>)
 800a6dc:	9303      	str	r3, [sp, #12]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	9803      	ldr	r0, [sp, #12]
 800a6e6:	b019      	add	sp, #100	; 0x64
 800a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ec:	4b8b      	ldr	r3, [pc, #556]	; (800a91c <_dtoa_r+0x2d4>)
 800a6ee:	9303      	str	r3, [sp, #12]
 800a6f0:	3303      	adds	r3, #3
 800a6f2:	e7f5      	b.n	800a6e0 <_dtoa_r+0x98>
 800a6f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a6f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a6fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a700:	2200      	movs	r2, #0
 800a702:	2300      	movs	r3, #0
 800a704:	f7f6 f950 	bl	80009a8 <__aeabi_dcmpeq>
 800a708:	4680      	mov	r8, r0
 800a70a:	b158      	cbz	r0, 800a724 <_dtoa_r+0xdc>
 800a70c:	2301      	movs	r3, #1
 800a70e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 8558 	beq.w	800b1ca <_dtoa_r+0xb82>
 800a71a:	4882      	ldr	r0, [pc, #520]	; (800a924 <_dtoa_r+0x2dc>)
 800a71c:	6018      	str	r0, [r3, #0]
 800a71e:	1e43      	subs	r3, r0, #1
 800a720:	9303      	str	r3, [sp, #12]
 800a722:	e7df      	b.n	800a6e4 <_dtoa_r+0x9c>
 800a724:	ab16      	add	r3, sp, #88	; 0x58
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	ab17      	add	r3, sp, #92	; 0x5c
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	4628      	mov	r0, r5
 800a72e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a732:	f001 f8c5 	bl	800b8c0 <__d2b>
 800a736:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a73a:	4683      	mov	fp, r0
 800a73c:	2c00      	cmp	r4, #0
 800a73e:	d07f      	beq.n	800a840 <_dtoa_r+0x1f8>
 800a740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a746:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a74a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a74e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a752:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a756:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a75a:	2200      	movs	r2, #0
 800a75c:	4b72      	ldr	r3, [pc, #456]	; (800a928 <_dtoa_r+0x2e0>)
 800a75e:	f7f5 fd03 	bl	8000168 <__aeabi_dsub>
 800a762:	a365      	add	r3, pc, #404	; (adr r3, 800a8f8 <_dtoa_r+0x2b0>)
 800a764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a768:	f7f5 feb6 	bl	80004d8 <__aeabi_dmul>
 800a76c:	a364      	add	r3, pc, #400	; (adr r3, 800a900 <_dtoa_r+0x2b8>)
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	f7f5 fcfb 	bl	800016c <__adddf3>
 800a776:	4606      	mov	r6, r0
 800a778:	4620      	mov	r0, r4
 800a77a:	460f      	mov	r7, r1
 800a77c:	f7f5 fe42 	bl	8000404 <__aeabi_i2d>
 800a780:	a361      	add	r3, pc, #388	; (adr r3, 800a908 <_dtoa_r+0x2c0>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 fea7 	bl	80004d8 <__aeabi_dmul>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	4630      	mov	r0, r6
 800a790:	4639      	mov	r1, r7
 800a792:	f7f5 fceb 	bl	800016c <__adddf3>
 800a796:	4606      	mov	r6, r0
 800a798:	460f      	mov	r7, r1
 800a79a:	f7f6 f94d 	bl	8000a38 <__aeabi_d2iz>
 800a79e:	2200      	movs	r2, #0
 800a7a0:	4682      	mov	sl, r0
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	f7f6 f908 	bl	80009bc <__aeabi_dcmplt>
 800a7ac:	b148      	cbz	r0, 800a7c2 <_dtoa_r+0x17a>
 800a7ae:	4650      	mov	r0, sl
 800a7b0:	f7f5 fe28 	bl	8000404 <__aeabi_i2d>
 800a7b4:	4632      	mov	r2, r6
 800a7b6:	463b      	mov	r3, r7
 800a7b8:	f7f6 f8f6 	bl	80009a8 <__aeabi_dcmpeq>
 800a7bc:	b908      	cbnz	r0, 800a7c2 <_dtoa_r+0x17a>
 800a7be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7c2:	f1ba 0f16 	cmp.w	sl, #22
 800a7c6:	d858      	bhi.n	800a87a <_dtoa_r+0x232>
 800a7c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7cc:	4b57      	ldr	r3, [pc, #348]	; (800a92c <_dtoa_r+0x2e4>)
 800a7ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d6:	f7f6 f8f1 	bl	80009bc <__aeabi_dcmplt>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d04f      	beq.n	800a87e <_dtoa_r+0x236>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a7e8:	1b1c      	subs	r4, r3, r4
 800a7ea:	1e63      	subs	r3, r4, #1
 800a7ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ee:	bf49      	itett	mi
 800a7f0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a7f4:	2300      	movpl	r3, #0
 800a7f6:	9306      	strmi	r3, [sp, #24]
 800a7f8:	2300      	movmi	r3, #0
 800a7fa:	bf54      	ite	pl
 800a7fc:	9306      	strpl	r3, [sp, #24]
 800a7fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a800:	f1ba 0f00 	cmp.w	sl, #0
 800a804:	db3d      	blt.n	800a882 <_dtoa_r+0x23a>
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a80c:	4453      	add	r3, sl
 800a80e:	9309      	str	r3, [sp, #36]	; 0x24
 800a810:	2300      	movs	r3, #0
 800a812:	930a      	str	r3, [sp, #40]	; 0x28
 800a814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a816:	2b09      	cmp	r3, #9
 800a818:	f200 808c 	bhi.w	800a934 <_dtoa_r+0x2ec>
 800a81c:	2b05      	cmp	r3, #5
 800a81e:	bfc4      	itt	gt
 800a820:	3b04      	subgt	r3, #4
 800a822:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a826:	bfc8      	it	gt
 800a828:	2400      	movgt	r4, #0
 800a82a:	f1a3 0302 	sub.w	r3, r3, #2
 800a82e:	bfd8      	it	le
 800a830:	2401      	movle	r4, #1
 800a832:	2b03      	cmp	r3, #3
 800a834:	f200 808a 	bhi.w	800a94c <_dtoa_r+0x304>
 800a838:	e8df f003 	tbb	[pc, r3]
 800a83c:	5b4d4f2d 	.word	0x5b4d4f2d
 800a840:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a844:	441c      	add	r4, r3
 800a846:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a84a:	2b20      	cmp	r3, #32
 800a84c:	bfc3      	ittte	gt
 800a84e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a852:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a856:	fa09 f303 	lslgt.w	r3, r9, r3
 800a85a:	f1c3 0320 	rsble	r3, r3, #32
 800a85e:	bfc6      	itte	gt
 800a860:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a864:	4318      	orrgt	r0, r3
 800a866:	fa06 f003 	lslle.w	r0, r6, r3
 800a86a:	f7f5 fdbb 	bl	80003e4 <__aeabi_ui2d>
 800a86e:	2301      	movs	r3, #1
 800a870:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a874:	3c01      	subs	r4, #1
 800a876:	9313      	str	r3, [sp, #76]	; 0x4c
 800a878:	e76f      	b.n	800a75a <_dtoa_r+0x112>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e7b2      	b.n	800a7e4 <_dtoa_r+0x19c>
 800a87e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a880:	e7b1      	b.n	800a7e6 <_dtoa_r+0x19e>
 800a882:	9b06      	ldr	r3, [sp, #24]
 800a884:	eba3 030a 	sub.w	r3, r3, sl
 800a888:	9306      	str	r3, [sp, #24]
 800a88a:	f1ca 0300 	rsb	r3, sl, #0
 800a88e:	930a      	str	r3, [sp, #40]	; 0x28
 800a890:	2300      	movs	r3, #0
 800a892:	930e      	str	r3, [sp, #56]	; 0x38
 800a894:	e7be      	b.n	800a814 <_dtoa_r+0x1cc>
 800a896:	2300      	movs	r3, #0
 800a898:	930b      	str	r3, [sp, #44]	; 0x2c
 800a89a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	dc58      	bgt.n	800a952 <_dtoa_r+0x30a>
 800a8a0:	f04f 0901 	mov.w	r9, #1
 800a8a4:	464b      	mov	r3, r9
 800a8a6:	f8cd 9020 	str.w	r9, [sp, #32]
 800a8aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a8b2:	6042      	str	r2, [r0, #4]
 800a8b4:	2204      	movs	r2, #4
 800a8b6:	f102 0614 	add.w	r6, r2, #20
 800a8ba:	429e      	cmp	r6, r3
 800a8bc:	6841      	ldr	r1, [r0, #4]
 800a8be:	d94e      	bls.n	800a95e <_dtoa_r+0x316>
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 fcd7 	bl	800b274 <_Balloc>
 800a8c6:	9003      	str	r0, [sp, #12]
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d14c      	bne.n	800a966 <_dtoa_r+0x31e>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8d2:	4b17      	ldr	r3, [pc, #92]	; (800a930 <_dtoa_r+0x2e8>)
 800a8d4:	e6cc      	b.n	800a670 <_dtoa_r+0x28>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e7de      	b.n	800a898 <_dtoa_r+0x250>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8e0:	eb0a 0903 	add.w	r9, sl, r3
 800a8e4:	f109 0301 	add.w	r3, r9, #1
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	9308      	str	r3, [sp, #32]
 800a8ec:	bfb8      	it	lt
 800a8ee:	2301      	movlt	r3, #1
 800a8f0:	e7dd      	b.n	800a8ae <_dtoa_r+0x266>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e7f2      	b.n	800a8dc <_dtoa_r+0x294>
 800a8f6:	bf00      	nop
 800a8f8:	636f4361 	.word	0x636f4361
 800a8fc:	3fd287a7 	.word	0x3fd287a7
 800a900:	8b60c8b3 	.word	0x8b60c8b3
 800a904:	3fc68a28 	.word	0x3fc68a28
 800a908:	509f79fb 	.word	0x509f79fb
 800a90c:	3fd34413 	.word	0x3fd34413
 800a910:	0800ca95 	.word	0x0800ca95
 800a914:	0800caac 	.word	0x0800caac
 800a918:	7ff00000 	.word	0x7ff00000
 800a91c:	0800ca91 	.word	0x0800ca91
 800a920:	0800ca88 	.word	0x0800ca88
 800a924:	0800ca65 	.word	0x0800ca65
 800a928:	3ff80000 	.word	0x3ff80000
 800a92c:	0800cba0 	.word	0x0800cba0
 800a930:	0800cb07 	.word	0x0800cb07
 800a934:	2401      	movs	r4, #1
 800a936:	2300      	movs	r3, #0
 800a938:	940b      	str	r4, [sp, #44]	; 0x2c
 800a93a:	9322      	str	r3, [sp, #136]	; 0x88
 800a93c:	f04f 39ff 	mov.w	r9, #4294967295
 800a940:	2200      	movs	r2, #0
 800a942:	2312      	movs	r3, #18
 800a944:	f8cd 9020 	str.w	r9, [sp, #32]
 800a948:	9223      	str	r2, [sp, #140]	; 0x8c
 800a94a:	e7b0      	b.n	800a8ae <_dtoa_r+0x266>
 800a94c:	2301      	movs	r3, #1
 800a94e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a950:	e7f4      	b.n	800a93c <_dtoa_r+0x2f4>
 800a952:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a956:	464b      	mov	r3, r9
 800a958:	f8cd 9020 	str.w	r9, [sp, #32]
 800a95c:	e7a7      	b.n	800a8ae <_dtoa_r+0x266>
 800a95e:	3101      	adds	r1, #1
 800a960:	6041      	str	r1, [r0, #4]
 800a962:	0052      	lsls	r2, r2, #1
 800a964:	e7a7      	b.n	800a8b6 <_dtoa_r+0x26e>
 800a966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a968:	9a03      	ldr	r2, [sp, #12]
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	9b08      	ldr	r3, [sp, #32]
 800a96e:	2b0e      	cmp	r3, #14
 800a970:	f200 80a8 	bhi.w	800aac4 <_dtoa_r+0x47c>
 800a974:	2c00      	cmp	r4, #0
 800a976:	f000 80a5 	beq.w	800aac4 <_dtoa_r+0x47c>
 800a97a:	f1ba 0f00 	cmp.w	sl, #0
 800a97e:	dd34      	ble.n	800a9ea <_dtoa_r+0x3a2>
 800a980:	4a9a      	ldr	r2, [pc, #616]	; (800abec <_dtoa_r+0x5a4>)
 800a982:	f00a 030f 	and.w	r3, sl, #15
 800a986:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a98a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a98e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a992:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a996:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a99a:	d016      	beq.n	800a9ca <_dtoa_r+0x382>
 800a99c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9a0:	4b93      	ldr	r3, [pc, #588]	; (800abf0 <_dtoa_r+0x5a8>)
 800a9a2:	2703      	movs	r7, #3
 800a9a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9a8:	f7f5 fec0 	bl	800072c <__aeabi_ddiv>
 800a9ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9b0:	f004 040f 	and.w	r4, r4, #15
 800a9b4:	4e8e      	ldr	r6, [pc, #568]	; (800abf0 <_dtoa_r+0x5a8>)
 800a9b6:	b954      	cbnz	r4, 800a9ce <_dtoa_r+0x386>
 800a9b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9c0:	f7f5 feb4 	bl	800072c <__aeabi_ddiv>
 800a9c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9c8:	e029      	b.n	800aa1e <_dtoa_r+0x3d6>
 800a9ca:	2702      	movs	r7, #2
 800a9cc:	e7f2      	b.n	800a9b4 <_dtoa_r+0x36c>
 800a9ce:	07e1      	lsls	r1, r4, #31
 800a9d0:	d508      	bpl.n	800a9e4 <_dtoa_r+0x39c>
 800a9d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9da:	f7f5 fd7d 	bl	80004d8 <__aeabi_dmul>
 800a9de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9e2:	3701      	adds	r7, #1
 800a9e4:	1064      	asrs	r4, r4, #1
 800a9e6:	3608      	adds	r6, #8
 800a9e8:	e7e5      	b.n	800a9b6 <_dtoa_r+0x36e>
 800a9ea:	f000 80a5 	beq.w	800ab38 <_dtoa_r+0x4f0>
 800a9ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9f2:	f1ca 0400 	rsb	r4, sl, #0
 800a9f6:	4b7d      	ldr	r3, [pc, #500]	; (800abec <_dtoa_r+0x5a4>)
 800a9f8:	f004 020f 	and.w	r2, r4, #15
 800a9fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa04:	f7f5 fd68 	bl	80004d8 <__aeabi_dmul>
 800aa08:	2702      	movs	r7, #2
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa10:	4e77      	ldr	r6, [pc, #476]	; (800abf0 <_dtoa_r+0x5a8>)
 800aa12:	1124      	asrs	r4, r4, #4
 800aa14:	2c00      	cmp	r4, #0
 800aa16:	f040 8084 	bne.w	800ab22 <_dtoa_r+0x4da>
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1d2      	bne.n	800a9c4 <_dtoa_r+0x37c>
 800aa1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 808b 	beq.w	800ab3c <_dtoa_r+0x4f4>
 800aa26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aa2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa32:	2200      	movs	r2, #0
 800aa34:	4b6f      	ldr	r3, [pc, #444]	; (800abf4 <_dtoa_r+0x5ac>)
 800aa36:	f7f5 ffc1 	bl	80009bc <__aeabi_dcmplt>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d07e      	beq.n	800ab3c <_dtoa_r+0x4f4>
 800aa3e:	9b08      	ldr	r3, [sp, #32]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d07b      	beq.n	800ab3c <_dtoa_r+0x4f4>
 800aa44:	f1b9 0f00 	cmp.w	r9, #0
 800aa48:	dd38      	ble.n	800aabc <_dtoa_r+0x474>
 800aa4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa4e:	2200      	movs	r2, #0
 800aa50:	4b69      	ldr	r3, [pc, #420]	; (800abf8 <_dtoa_r+0x5b0>)
 800aa52:	f7f5 fd41 	bl	80004d8 <__aeabi_dmul>
 800aa56:	464c      	mov	r4, r9
 800aa58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa5c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800aa60:	3701      	adds	r7, #1
 800aa62:	4638      	mov	r0, r7
 800aa64:	f7f5 fcce 	bl	8000404 <__aeabi_i2d>
 800aa68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa6c:	f7f5 fd34 	bl	80004d8 <__aeabi_dmul>
 800aa70:	2200      	movs	r2, #0
 800aa72:	4b62      	ldr	r3, [pc, #392]	; (800abfc <_dtoa_r+0x5b4>)
 800aa74:	f7f5 fb7a 	bl	800016c <__adddf3>
 800aa78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800aa7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa80:	9611      	str	r6, [sp, #68]	; 0x44
 800aa82:	2c00      	cmp	r4, #0
 800aa84:	d15d      	bne.n	800ab42 <_dtoa_r+0x4fa>
 800aa86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	4b5c      	ldr	r3, [pc, #368]	; (800ac00 <_dtoa_r+0x5b8>)
 800aa8e:	f7f5 fb6b 	bl	8000168 <__aeabi_dsub>
 800aa92:	4602      	mov	r2, r0
 800aa94:	460b      	mov	r3, r1
 800aa96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa9a:	4633      	mov	r3, r6
 800aa9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa9e:	f7f5 ffab 	bl	80009f8 <__aeabi_dcmpgt>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	f040 829c 	bne.w	800afe0 <_dtoa_r+0x998>
 800aaa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aaae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aab2:	f7f5 ff83 	bl	80009bc <__aeabi_dcmplt>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	f040 8290 	bne.w	800afdc <_dtoa_r+0x994>
 800aabc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800aac0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f2c0 8152 	blt.w	800ad70 <_dtoa_r+0x728>
 800aacc:	f1ba 0f0e 	cmp.w	sl, #14
 800aad0:	f300 814e 	bgt.w	800ad70 <_dtoa_r+0x728>
 800aad4:	4b45      	ldr	r3, [pc, #276]	; (800abec <_dtoa_r+0x5a4>)
 800aad6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aada:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aade:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800aae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f280 80db 	bge.w	800aca0 <_dtoa_r+0x658>
 800aaea:	9b08      	ldr	r3, [sp, #32]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f300 80d7 	bgt.w	800aca0 <_dtoa_r+0x658>
 800aaf2:	f040 8272 	bne.w	800afda <_dtoa_r+0x992>
 800aaf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aafa:	2200      	movs	r2, #0
 800aafc:	4b40      	ldr	r3, [pc, #256]	; (800ac00 <_dtoa_r+0x5b8>)
 800aafe:	f7f5 fceb 	bl	80004d8 <__aeabi_dmul>
 800ab02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab06:	f7f5 ff6d 	bl	80009e4 <__aeabi_dcmpge>
 800ab0a:	9c08      	ldr	r4, [sp, #32]
 800ab0c:	4626      	mov	r6, r4
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	f040 8248 	bne.w	800afa4 <_dtoa_r+0x95c>
 800ab14:	2331      	movs	r3, #49	; 0x31
 800ab16:	9f03      	ldr	r7, [sp, #12]
 800ab18:	f10a 0a01 	add.w	sl, sl, #1
 800ab1c:	f807 3b01 	strb.w	r3, [r7], #1
 800ab20:	e244      	b.n	800afac <_dtoa_r+0x964>
 800ab22:	07e2      	lsls	r2, r4, #31
 800ab24:	d505      	bpl.n	800ab32 <_dtoa_r+0x4ea>
 800ab26:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab2a:	f7f5 fcd5 	bl	80004d8 <__aeabi_dmul>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	3701      	adds	r7, #1
 800ab32:	1064      	asrs	r4, r4, #1
 800ab34:	3608      	adds	r6, #8
 800ab36:	e76d      	b.n	800aa14 <_dtoa_r+0x3cc>
 800ab38:	2702      	movs	r7, #2
 800ab3a:	e770      	b.n	800aa1e <_dtoa_r+0x3d6>
 800ab3c:	46d0      	mov	r8, sl
 800ab3e:	9c08      	ldr	r4, [sp, #32]
 800ab40:	e78f      	b.n	800aa62 <_dtoa_r+0x41a>
 800ab42:	9903      	ldr	r1, [sp, #12]
 800ab44:	4b29      	ldr	r3, [pc, #164]	; (800abec <_dtoa_r+0x5a4>)
 800ab46:	4421      	add	r1, r4
 800ab48:	9112      	str	r1, [sp, #72]	; 0x48
 800ab4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ab54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab58:	2900      	cmp	r1, #0
 800ab5a:	d055      	beq.n	800ac08 <_dtoa_r+0x5c0>
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	4929      	ldr	r1, [pc, #164]	; (800ac04 <_dtoa_r+0x5bc>)
 800ab60:	f7f5 fde4 	bl	800072c <__aeabi_ddiv>
 800ab64:	463b      	mov	r3, r7
 800ab66:	4632      	mov	r2, r6
 800ab68:	f7f5 fafe 	bl	8000168 <__aeabi_dsub>
 800ab6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab70:	9f03      	ldr	r7, [sp, #12]
 800ab72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab76:	f7f5 ff5f 	bl	8000a38 <__aeabi_d2iz>
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	f7f5 fc42 	bl	8000404 <__aeabi_i2d>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab88:	f7f5 faee 	bl	8000168 <__aeabi_dsub>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	3430      	adds	r4, #48	; 0x30
 800ab92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab9a:	f807 4b01 	strb.w	r4, [r7], #1
 800ab9e:	f7f5 ff0d 	bl	80009bc <__aeabi_dcmplt>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d174      	bne.n	800ac90 <_dtoa_r+0x648>
 800aba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abaa:	2000      	movs	r0, #0
 800abac:	4911      	ldr	r1, [pc, #68]	; (800abf4 <_dtoa_r+0x5ac>)
 800abae:	f7f5 fadb 	bl	8000168 <__aeabi_dsub>
 800abb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abb6:	f7f5 ff01 	bl	80009bc <__aeabi_dcmplt>
 800abba:	2800      	cmp	r0, #0
 800abbc:	f040 80b7 	bne.w	800ad2e <_dtoa_r+0x6e6>
 800abc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800abc2:	429f      	cmp	r7, r3
 800abc4:	f43f af7a 	beq.w	800aabc <_dtoa_r+0x474>
 800abc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abcc:	2200      	movs	r2, #0
 800abce:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <_dtoa_r+0x5b0>)
 800abd0:	f7f5 fc82 	bl	80004d8 <__aeabi_dmul>
 800abd4:	2200      	movs	r2, #0
 800abd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abde:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <_dtoa_r+0x5b0>)
 800abe0:	f7f5 fc7a 	bl	80004d8 <__aeabi_dmul>
 800abe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abe8:	e7c3      	b.n	800ab72 <_dtoa_r+0x52a>
 800abea:	bf00      	nop
 800abec:	0800cba0 	.word	0x0800cba0
 800abf0:	0800cb78 	.word	0x0800cb78
 800abf4:	3ff00000 	.word	0x3ff00000
 800abf8:	40240000 	.word	0x40240000
 800abfc:	401c0000 	.word	0x401c0000
 800ac00:	40140000 	.word	0x40140000
 800ac04:	3fe00000 	.word	0x3fe00000
 800ac08:	4630      	mov	r0, r6
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	f7f5 fc64 	bl	80004d8 <__aeabi_dmul>
 800ac10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac16:	9c03      	ldr	r4, [sp, #12]
 800ac18:	9314      	str	r3, [sp, #80]	; 0x50
 800ac1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac1e:	f7f5 ff0b 	bl	8000a38 <__aeabi_d2iz>
 800ac22:	9015      	str	r0, [sp, #84]	; 0x54
 800ac24:	f7f5 fbee 	bl	8000404 <__aeabi_i2d>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac30:	f7f5 fa9a 	bl	8000168 <__aeabi_dsub>
 800ac34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac36:	4606      	mov	r6, r0
 800ac38:	3330      	adds	r3, #48	; 0x30
 800ac3a:	f804 3b01 	strb.w	r3, [r4], #1
 800ac3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac40:	460f      	mov	r7, r1
 800ac42:	429c      	cmp	r4, r3
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	d124      	bne.n	800ac94 <_dtoa_r+0x64c>
 800ac4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac4e:	4bb0      	ldr	r3, [pc, #704]	; (800af10 <_dtoa_r+0x8c8>)
 800ac50:	f7f5 fa8c 	bl	800016c <__adddf3>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f5 fecc 	bl	80009f8 <__aeabi_dcmpgt>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d163      	bne.n	800ad2c <_dtoa_r+0x6e4>
 800ac64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac68:	2000      	movs	r0, #0
 800ac6a:	49a9      	ldr	r1, [pc, #676]	; (800af10 <_dtoa_r+0x8c8>)
 800ac6c:	f7f5 fa7c 	bl	8000168 <__aeabi_dsub>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4630      	mov	r0, r6
 800ac76:	4639      	mov	r1, r7
 800ac78:	f7f5 fea0 	bl	80009bc <__aeabi_dcmplt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f43f af1d 	beq.w	800aabc <_dtoa_r+0x474>
 800ac82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ac84:	1e7b      	subs	r3, r7, #1
 800ac86:	9314      	str	r3, [sp, #80]	; 0x50
 800ac88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ac8c:	2b30      	cmp	r3, #48	; 0x30
 800ac8e:	d0f8      	beq.n	800ac82 <_dtoa_r+0x63a>
 800ac90:	46c2      	mov	sl, r8
 800ac92:	e03b      	b.n	800ad0c <_dtoa_r+0x6c4>
 800ac94:	4b9f      	ldr	r3, [pc, #636]	; (800af14 <_dtoa_r+0x8cc>)
 800ac96:	f7f5 fc1f 	bl	80004d8 <__aeabi_dmul>
 800ac9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac9e:	e7bc      	b.n	800ac1a <_dtoa_r+0x5d2>
 800aca0:	9f03      	ldr	r7, [sp, #12]
 800aca2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800aca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acaa:	4640      	mov	r0, r8
 800acac:	4649      	mov	r1, r9
 800acae:	f7f5 fd3d 	bl	800072c <__aeabi_ddiv>
 800acb2:	f7f5 fec1 	bl	8000a38 <__aeabi_d2iz>
 800acb6:	4604      	mov	r4, r0
 800acb8:	f7f5 fba4 	bl	8000404 <__aeabi_i2d>
 800acbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acc0:	f7f5 fc0a 	bl	80004d8 <__aeabi_dmul>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 fa4c 	bl	8000168 <__aeabi_dsub>
 800acd0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800acd4:	f807 6b01 	strb.w	r6, [r7], #1
 800acd8:	9e03      	ldr	r6, [sp, #12]
 800acda:	f8dd c020 	ldr.w	ip, [sp, #32]
 800acde:	1bbe      	subs	r6, r7, r6
 800ace0:	45b4      	cmp	ip, r6
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	d136      	bne.n	800ad56 <_dtoa_r+0x70e>
 800ace8:	f7f5 fa40 	bl	800016c <__adddf3>
 800acec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acf0:	4680      	mov	r8, r0
 800acf2:	4689      	mov	r9, r1
 800acf4:	f7f5 fe80 	bl	80009f8 <__aeabi_dcmpgt>
 800acf8:	bb58      	cbnz	r0, 800ad52 <_dtoa_r+0x70a>
 800acfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acfe:	4640      	mov	r0, r8
 800ad00:	4649      	mov	r1, r9
 800ad02:	f7f5 fe51 	bl	80009a8 <__aeabi_dcmpeq>
 800ad06:	b108      	cbz	r0, 800ad0c <_dtoa_r+0x6c4>
 800ad08:	07e1      	lsls	r1, r4, #31
 800ad0a:	d422      	bmi.n	800ad52 <_dtoa_r+0x70a>
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	4659      	mov	r1, fp
 800ad10:	f000 faf0 	bl	800b2f4 <_Bfree>
 800ad14:	2300      	movs	r3, #0
 800ad16:	703b      	strb	r3, [r7, #0]
 800ad18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad1a:	f10a 0001 	add.w	r0, sl, #1
 800ad1e:	6018      	str	r0, [r3, #0]
 800ad20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f43f acde 	beq.w	800a6e4 <_dtoa_r+0x9c>
 800ad28:	601f      	str	r7, [r3, #0]
 800ad2a:	e4db      	b.n	800a6e4 <_dtoa_r+0x9c>
 800ad2c:	4627      	mov	r7, r4
 800ad2e:	463b      	mov	r3, r7
 800ad30:	461f      	mov	r7, r3
 800ad32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad36:	2a39      	cmp	r2, #57	; 0x39
 800ad38:	d107      	bne.n	800ad4a <_dtoa_r+0x702>
 800ad3a:	9a03      	ldr	r2, [sp, #12]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d1f7      	bne.n	800ad30 <_dtoa_r+0x6e8>
 800ad40:	2230      	movs	r2, #48	; 0x30
 800ad42:	9903      	ldr	r1, [sp, #12]
 800ad44:	f108 0801 	add.w	r8, r8, #1
 800ad48:	700a      	strb	r2, [r1, #0]
 800ad4a:	781a      	ldrb	r2, [r3, #0]
 800ad4c:	3201      	adds	r2, #1
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	e79e      	b.n	800ac90 <_dtoa_r+0x648>
 800ad52:	46d0      	mov	r8, sl
 800ad54:	e7eb      	b.n	800ad2e <_dtoa_r+0x6e6>
 800ad56:	2200      	movs	r2, #0
 800ad58:	4b6e      	ldr	r3, [pc, #440]	; (800af14 <_dtoa_r+0x8cc>)
 800ad5a:	f7f5 fbbd 	bl	80004d8 <__aeabi_dmul>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2300      	movs	r3, #0
 800ad62:	4680      	mov	r8, r0
 800ad64:	4689      	mov	r9, r1
 800ad66:	f7f5 fe1f 	bl	80009a8 <__aeabi_dcmpeq>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d09b      	beq.n	800aca6 <_dtoa_r+0x65e>
 800ad6e:	e7cd      	b.n	800ad0c <_dtoa_r+0x6c4>
 800ad70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad72:	2a00      	cmp	r2, #0
 800ad74:	f000 80d0 	beq.w	800af18 <_dtoa_r+0x8d0>
 800ad78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ad7a:	2a01      	cmp	r2, #1
 800ad7c:	f300 80ae 	bgt.w	800aedc <_dtoa_r+0x894>
 800ad80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad82:	2a00      	cmp	r2, #0
 800ad84:	f000 80a6 	beq.w	800aed4 <_dtoa_r+0x88c>
 800ad88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad8e:	9f06      	ldr	r7, [sp, #24]
 800ad90:	9a06      	ldr	r2, [sp, #24]
 800ad92:	2101      	movs	r1, #1
 800ad94:	441a      	add	r2, r3
 800ad96:	9206      	str	r2, [sp, #24]
 800ad98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	441a      	add	r2, r3
 800ad9e:	9209      	str	r2, [sp, #36]	; 0x24
 800ada0:	f000 fb5e 	bl	800b460 <__i2b>
 800ada4:	4606      	mov	r6, r0
 800ada6:	2f00      	cmp	r7, #0
 800ada8:	dd0c      	ble.n	800adc4 <_dtoa_r+0x77c>
 800adaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adac:	2b00      	cmp	r3, #0
 800adae:	dd09      	ble.n	800adc4 <_dtoa_r+0x77c>
 800adb0:	42bb      	cmp	r3, r7
 800adb2:	bfa8      	it	ge
 800adb4:	463b      	movge	r3, r7
 800adb6:	9a06      	ldr	r2, [sp, #24]
 800adb8:	1aff      	subs	r7, r7, r3
 800adba:	1ad2      	subs	r2, r2, r3
 800adbc:	9206      	str	r2, [sp, #24]
 800adbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	9309      	str	r3, [sp, #36]	; 0x24
 800adc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc6:	b1f3      	cbz	r3, 800ae06 <_dtoa_r+0x7be>
 800adc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 80a8 	beq.w	800af20 <_dtoa_r+0x8d8>
 800add0:	2c00      	cmp	r4, #0
 800add2:	dd10      	ble.n	800adf6 <_dtoa_r+0x7ae>
 800add4:	4631      	mov	r1, r6
 800add6:	4622      	mov	r2, r4
 800add8:	4628      	mov	r0, r5
 800adda:	f000 fbff 	bl	800b5dc <__pow5mult>
 800adde:	465a      	mov	r2, fp
 800ade0:	4601      	mov	r1, r0
 800ade2:	4606      	mov	r6, r0
 800ade4:	4628      	mov	r0, r5
 800ade6:	f000 fb51 	bl	800b48c <__multiply>
 800adea:	4680      	mov	r8, r0
 800adec:	4659      	mov	r1, fp
 800adee:	4628      	mov	r0, r5
 800adf0:	f000 fa80 	bl	800b2f4 <_Bfree>
 800adf4:	46c3      	mov	fp, r8
 800adf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adf8:	1b1a      	subs	r2, r3, r4
 800adfa:	d004      	beq.n	800ae06 <_dtoa_r+0x7be>
 800adfc:	4659      	mov	r1, fp
 800adfe:	4628      	mov	r0, r5
 800ae00:	f000 fbec 	bl	800b5dc <__pow5mult>
 800ae04:	4683      	mov	fp, r0
 800ae06:	2101      	movs	r1, #1
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f000 fb29 	bl	800b460 <__i2b>
 800ae0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae10:	4604      	mov	r4, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f340 8086 	ble.w	800af24 <_dtoa_r+0x8dc>
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4601      	mov	r1, r0
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	f000 fbdd 	bl	800b5dc <__pow5mult>
 800ae22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae24:	4604      	mov	r4, r0
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	dd7f      	ble.n	800af2a <_dtoa_r+0x8e2>
 800ae2a:	f04f 0800 	mov.w	r8, #0
 800ae2e:	6923      	ldr	r3, [r4, #16]
 800ae30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae34:	6918      	ldr	r0, [r3, #16]
 800ae36:	f000 fac5 	bl	800b3c4 <__hi0bits>
 800ae3a:	f1c0 0020 	rsb	r0, r0, #32
 800ae3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae40:	4418      	add	r0, r3
 800ae42:	f010 001f 	ands.w	r0, r0, #31
 800ae46:	f000 8092 	beq.w	800af6e <_dtoa_r+0x926>
 800ae4a:	f1c0 0320 	rsb	r3, r0, #32
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	f340 808a 	ble.w	800af68 <_dtoa_r+0x920>
 800ae54:	f1c0 001c 	rsb	r0, r0, #28
 800ae58:	9b06      	ldr	r3, [sp, #24]
 800ae5a:	4407      	add	r7, r0
 800ae5c:	4403      	add	r3, r0
 800ae5e:	9306      	str	r3, [sp, #24]
 800ae60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae62:	4403      	add	r3, r0
 800ae64:	9309      	str	r3, [sp, #36]	; 0x24
 800ae66:	9b06      	ldr	r3, [sp, #24]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	dd05      	ble.n	800ae78 <_dtoa_r+0x830>
 800ae6c:	4659      	mov	r1, fp
 800ae6e:	461a      	mov	r2, r3
 800ae70:	4628      	mov	r0, r5
 800ae72:	f000 fc0d 	bl	800b690 <__lshift>
 800ae76:	4683      	mov	fp, r0
 800ae78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	dd05      	ble.n	800ae8a <_dtoa_r+0x842>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	461a      	mov	r2, r3
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 fc04 	bl	800b690 <__lshift>
 800ae88:	4604      	mov	r4, r0
 800ae8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d070      	beq.n	800af72 <_dtoa_r+0x92a>
 800ae90:	4621      	mov	r1, r4
 800ae92:	4658      	mov	r0, fp
 800ae94:	f000 fc6c 	bl	800b770 <__mcmp>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	da6a      	bge.n	800af72 <_dtoa_r+0x92a>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4659      	mov	r1, fp
 800aea0:	220a      	movs	r2, #10
 800aea2:	4628      	mov	r0, r5
 800aea4:	f000 fa48 	bl	800b338 <__multadd>
 800aea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeaa:	4683      	mov	fp, r0
 800aeac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 8194 	beq.w	800b1de <_dtoa_r+0xb96>
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	2300      	movs	r3, #0
 800aeba:	220a      	movs	r2, #10
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 fa3b 	bl	800b338 <__multadd>
 800aec2:	f1b9 0f00 	cmp.w	r9, #0
 800aec6:	4606      	mov	r6, r0
 800aec8:	f300 8093 	bgt.w	800aff2 <_dtoa_r+0x9aa>
 800aecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aece:	2b02      	cmp	r3, #2
 800aed0:	dc57      	bgt.n	800af82 <_dtoa_r+0x93a>
 800aed2:	e08e      	b.n	800aff2 <_dtoa_r+0x9aa>
 800aed4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aed6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aeda:	e757      	b.n	800ad8c <_dtoa_r+0x744>
 800aedc:	9b08      	ldr	r3, [sp, #32]
 800aede:	1e5c      	subs	r4, r3, #1
 800aee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee2:	42a3      	cmp	r3, r4
 800aee4:	bfb7      	itett	lt
 800aee6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aee8:	1b1c      	subge	r4, r3, r4
 800aeea:	1ae2      	sublt	r2, r4, r3
 800aeec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aeee:	bfbe      	ittt	lt
 800aef0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aef2:	189b      	addlt	r3, r3, r2
 800aef4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aef6:	9b08      	ldr	r3, [sp, #32]
 800aef8:	bfb8      	it	lt
 800aefa:	2400      	movlt	r4, #0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	bfbb      	ittet	lt
 800af00:	9b06      	ldrlt	r3, [sp, #24]
 800af02:	9a08      	ldrlt	r2, [sp, #32]
 800af04:	9f06      	ldrge	r7, [sp, #24]
 800af06:	1a9f      	sublt	r7, r3, r2
 800af08:	bfac      	ite	ge
 800af0a:	9b08      	ldrge	r3, [sp, #32]
 800af0c:	2300      	movlt	r3, #0
 800af0e:	e73f      	b.n	800ad90 <_dtoa_r+0x748>
 800af10:	3fe00000 	.word	0x3fe00000
 800af14:	40240000 	.word	0x40240000
 800af18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af1a:	9f06      	ldr	r7, [sp, #24]
 800af1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800af1e:	e742      	b.n	800ada6 <_dtoa_r+0x75e>
 800af20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af22:	e76b      	b.n	800adfc <_dtoa_r+0x7b4>
 800af24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af26:	2b01      	cmp	r3, #1
 800af28:	dc19      	bgt.n	800af5e <_dtoa_r+0x916>
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	b9bb      	cbnz	r3, 800af5e <_dtoa_r+0x916>
 800af2e:	9b05      	ldr	r3, [sp, #20]
 800af30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af34:	b99b      	cbnz	r3, 800af5e <_dtoa_r+0x916>
 800af36:	9b05      	ldr	r3, [sp, #20]
 800af38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af3c:	0d1b      	lsrs	r3, r3, #20
 800af3e:	051b      	lsls	r3, r3, #20
 800af40:	b183      	cbz	r3, 800af64 <_dtoa_r+0x91c>
 800af42:	f04f 0801 	mov.w	r8, #1
 800af46:	9b06      	ldr	r3, [sp, #24]
 800af48:	3301      	adds	r3, #1
 800af4a:	9306      	str	r3, [sp, #24]
 800af4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af4e:	3301      	adds	r3, #1
 800af50:	9309      	str	r3, [sp, #36]	; 0x24
 800af52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af54:	2b00      	cmp	r3, #0
 800af56:	f47f af6a 	bne.w	800ae2e <_dtoa_r+0x7e6>
 800af5a:	2001      	movs	r0, #1
 800af5c:	e76f      	b.n	800ae3e <_dtoa_r+0x7f6>
 800af5e:	f04f 0800 	mov.w	r8, #0
 800af62:	e7f6      	b.n	800af52 <_dtoa_r+0x90a>
 800af64:	4698      	mov	r8, r3
 800af66:	e7f4      	b.n	800af52 <_dtoa_r+0x90a>
 800af68:	f43f af7d 	beq.w	800ae66 <_dtoa_r+0x81e>
 800af6c:	4618      	mov	r0, r3
 800af6e:	301c      	adds	r0, #28
 800af70:	e772      	b.n	800ae58 <_dtoa_r+0x810>
 800af72:	9b08      	ldr	r3, [sp, #32]
 800af74:	2b00      	cmp	r3, #0
 800af76:	dc36      	bgt.n	800afe6 <_dtoa_r+0x99e>
 800af78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	dd33      	ble.n	800afe6 <_dtoa_r+0x99e>
 800af7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af82:	f1b9 0f00 	cmp.w	r9, #0
 800af86:	d10d      	bne.n	800afa4 <_dtoa_r+0x95c>
 800af88:	4621      	mov	r1, r4
 800af8a:	464b      	mov	r3, r9
 800af8c:	2205      	movs	r2, #5
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f9d2 	bl	800b338 <__multadd>
 800af94:	4601      	mov	r1, r0
 800af96:	4604      	mov	r4, r0
 800af98:	4658      	mov	r0, fp
 800af9a:	f000 fbe9 	bl	800b770 <__mcmp>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f73f adb8 	bgt.w	800ab14 <_dtoa_r+0x4cc>
 800afa4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afa6:	9f03      	ldr	r7, [sp, #12]
 800afa8:	ea6f 0a03 	mvn.w	sl, r3
 800afac:	f04f 0800 	mov.w	r8, #0
 800afb0:	4621      	mov	r1, r4
 800afb2:	4628      	mov	r0, r5
 800afb4:	f000 f99e 	bl	800b2f4 <_Bfree>
 800afb8:	2e00      	cmp	r6, #0
 800afba:	f43f aea7 	beq.w	800ad0c <_dtoa_r+0x6c4>
 800afbe:	f1b8 0f00 	cmp.w	r8, #0
 800afc2:	d005      	beq.n	800afd0 <_dtoa_r+0x988>
 800afc4:	45b0      	cmp	r8, r6
 800afc6:	d003      	beq.n	800afd0 <_dtoa_r+0x988>
 800afc8:	4641      	mov	r1, r8
 800afca:	4628      	mov	r0, r5
 800afcc:	f000 f992 	bl	800b2f4 <_Bfree>
 800afd0:	4631      	mov	r1, r6
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 f98e 	bl	800b2f4 <_Bfree>
 800afd8:	e698      	b.n	800ad0c <_dtoa_r+0x6c4>
 800afda:	2400      	movs	r4, #0
 800afdc:	4626      	mov	r6, r4
 800afde:	e7e1      	b.n	800afa4 <_dtoa_r+0x95c>
 800afe0:	46c2      	mov	sl, r8
 800afe2:	4626      	mov	r6, r4
 800afe4:	e596      	b.n	800ab14 <_dtoa_r+0x4cc>
 800afe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afec:	2b00      	cmp	r3, #0
 800afee:	f000 80fd 	beq.w	800b1ec <_dtoa_r+0xba4>
 800aff2:	2f00      	cmp	r7, #0
 800aff4:	dd05      	ble.n	800b002 <_dtoa_r+0x9ba>
 800aff6:	4631      	mov	r1, r6
 800aff8:	463a      	mov	r2, r7
 800affa:	4628      	mov	r0, r5
 800affc:	f000 fb48 	bl	800b690 <__lshift>
 800b000:	4606      	mov	r6, r0
 800b002:	f1b8 0f00 	cmp.w	r8, #0
 800b006:	d05c      	beq.n	800b0c2 <_dtoa_r+0xa7a>
 800b008:	4628      	mov	r0, r5
 800b00a:	6871      	ldr	r1, [r6, #4]
 800b00c:	f000 f932 	bl	800b274 <_Balloc>
 800b010:	4607      	mov	r7, r0
 800b012:	b928      	cbnz	r0, 800b020 <_dtoa_r+0x9d8>
 800b014:	4602      	mov	r2, r0
 800b016:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b01a:	4b7f      	ldr	r3, [pc, #508]	; (800b218 <_dtoa_r+0xbd0>)
 800b01c:	f7ff bb28 	b.w	800a670 <_dtoa_r+0x28>
 800b020:	6932      	ldr	r2, [r6, #16]
 800b022:	f106 010c 	add.w	r1, r6, #12
 800b026:	3202      	adds	r2, #2
 800b028:	0092      	lsls	r2, r2, #2
 800b02a:	300c      	adds	r0, #12
 800b02c:	f000 f914 	bl	800b258 <memcpy>
 800b030:	2201      	movs	r2, #1
 800b032:	4639      	mov	r1, r7
 800b034:	4628      	mov	r0, r5
 800b036:	f000 fb2b 	bl	800b690 <__lshift>
 800b03a:	46b0      	mov	r8, r6
 800b03c:	4606      	mov	r6, r0
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	3301      	adds	r3, #1
 800b042:	9308      	str	r3, [sp, #32]
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	444b      	add	r3, r9
 800b048:	930a      	str	r3, [sp, #40]	; 0x28
 800b04a:	9b04      	ldr	r3, [sp, #16]
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	9309      	str	r3, [sp, #36]	; 0x24
 800b052:	9b08      	ldr	r3, [sp, #32]
 800b054:	4621      	mov	r1, r4
 800b056:	3b01      	subs	r3, #1
 800b058:	4658      	mov	r0, fp
 800b05a:	9304      	str	r3, [sp, #16]
 800b05c:	f7ff fa66 	bl	800a52c <quorem>
 800b060:	4603      	mov	r3, r0
 800b062:	4641      	mov	r1, r8
 800b064:	3330      	adds	r3, #48	; 0x30
 800b066:	9006      	str	r0, [sp, #24]
 800b068:	4658      	mov	r0, fp
 800b06a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b06c:	f000 fb80 	bl	800b770 <__mcmp>
 800b070:	4632      	mov	r2, r6
 800b072:	4681      	mov	r9, r0
 800b074:	4621      	mov	r1, r4
 800b076:	4628      	mov	r0, r5
 800b078:	f000 fb96 	bl	800b7a8 <__mdiff>
 800b07c:	68c2      	ldr	r2, [r0, #12]
 800b07e:	4607      	mov	r7, r0
 800b080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b082:	bb02      	cbnz	r2, 800b0c6 <_dtoa_r+0xa7e>
 800b084:	4601      	mov	r1, r0
 800b086:	4658      	mov	r0, fp
 800b088:	f000 fb72 	bl	800b770 <__mcmp>
 800b08c:	4602      	mov	r2, r0
 800b08e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b090:	4639      	mov	r1, r7
 800b092:	4628      	mov	r0, r5
 800b094:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b098:	f000 f92c 	bl	800b2f4 <_Bfree>
 800b09c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b09e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0a0:	9f08      	ldr	r7, [sp, #32]
 800b0a2:	ea43 0102 	orr.w	r1, r3, r2
 800b0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a8:	430b      	orrs	r3, r1
 800b0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0ac:	d10d      	bne.n	800b0ca <_dtoa_r+0xa82>
 800b0ae:	2b39      	cmp	r3, #57	; 0x39
 800b0b0:	d029      	beq.n	800b106 <_dtoa_r+0xabe>
 800b0b2:	f1b9 0f00 	cmp.w	r9, #0
 800b0b6:	dd01      	ble.n	800b0bc <_dtoa_r+0xa74>
 800b0b8:	9b06      	ldr	r3, [sp, #24]
 800b0ba:	3331      	adds	r3, #49	; 0x31
 800b0bc:	9a04      	ldr	r2, [sp, #16]
 800b0be:	7013      	strb	r3, [r2, #0]
 800b0c0:	e776      	b.n	800afb0 <_dtoa_r+0x968>
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	e7b9      	b.n	800b03a <_dtoa_r+0x9f2>
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	e7e2      	b.n	800b090 <_dtoa_r+0xa48>
 800b0ca:	f1b9 0f00 	cmp.w	r9, #0
 800b0ce:	db06      	blt.n	800b0de <_dtoa_r+0xa96>
 800b0d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b0d2:	ea41 0909 	orr.w	r9, r1, r9
 800b0d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0d8:	ea59 0101 	orrs.w	r1, r9, r1
 800b0dc:	d120      	bne.n	800b120 <_dtoa_r+0xad8>
 800b0de:	2a00      	cmp	r2, #0
 800b0e0:	ddec      	ble.n	800b0bc <_dtoa_r+0xa74>
 800b0e2:	4659      	mov	r1, fp
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	9308      	str	r3, [sp, #32]
 800b0ea:	f000 fad1 	bl	800b690 <__lshift>
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4683      	mov	fp, r0
 800b0f2:	f000 fb3d 	bl	800b770 <__mcmp>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	9b08      	ldr	r3, [sp, #32]
 800b0fa:	dc02      	bgt.n	800b102 <_dtoa_r+0xaba>
 800b0fc:	d1de      	bne.n	800b0bc <_dtoa_r+0xa74>
 800b0fe:	07da      	lsls	r2, r3, #31
 800b100:	d5dc      	bpl.n	800b0bc <_dtoa_r+0xa74>
 800b102:	2b39      	cmp	r3, #57	; 0x39
 800b104:	d1d8      	bne.n	800b0b8 <_dtoa_r+0xa70>
 800b106:	2339      	movs	r3, #57	; 0x39
 800b108:	9a04      	ldr	r2, [sp, #16]
 800b10a:	7013      	strb	r3, [r2, #0]
 800b10c:	463b      	mov	r3, r7
 800b10e:	461f      	mov	r7, r3
 800b110:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b114:	3b01      	subs	r3, #1
 800b116:	2a39      	cmp	r2, #57	; 0x39
 800b118:	d050      	beq.n	800b1bc <_dtoa_r+0xb74>
 800b11a:	3201      	adds	r2, #1
 800b11c:	701a      	strb	r2, [r3, #0]
 800b11e:	e747      	b.n	800afb0 <_dtoa_r+0x968>
 800b120:	2a00      	cmp	r2, #0
 800b122:	dd03      	ble.n	800b12c <_dtoa_r+0xae4>
 800b124:	2b39      	cmp	r3, #57	; 0x39
 800b126:	d0ee      	beq.n	800b106 <_dtoa_r+0xabe>
 800b128:	3301      	adds	r3, #1
 800b12a:	e7c7      	b.n	800b0bc <_dtoa_r+0xa74>
 800b12c:	9a08      	ldr	r2, [sp, #32]
 800b12e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b130:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b134:	428a      	cmp	r2, r1
 800b136:	d02a      	beq.n	800b18e <_dtoa_r+0xb46>
 800b138:	4659      	mov	r1, fp
 800b13a:	2300      	movs	r3, #0
 800b13c:	220a      	movs	r2, #10
 800b13e:	4628      	mov	r0, r5
 800b140:	f000 f8fa 	bl	800b338 <__multadd>
 800b144:	45b0      	cmp	r8, r6
 800b146:	4683      	mov	fp, r0
 800b148:	f04f 0300 	mov.w	r3, #0
 800b14c:	f04f 020a 	mov.w	r2, #10
 800b150:	4641      	mov	r1, r8
 800b152:	4628      	mov	r0, r5
 800b154:	d107      	bne.n	800b166 <_dtoa_r+0xb1e>
 800b156:	f000 f8ef 	bl	800b338 <__multadd>
 800b15a:	4680      	mov	r8, r0
 800b15c:	4606      	mov	r6, r0
 800b15e:	9b08      	ldr	r3, [sp, #32]
 800b160:	3301      	adds	r3, #1
 800b162:	9308      	str	r3, [sp, #32]
 800b164:	e775      	b.n	800b052 <_dtoa_r+0xa0a>
 800b166:	f000 f8e7 	bl	800b338 <__multadd>
 800b16a:	4631      	mov	r1, r6
 800b16c:	4680      	mov	r8, r0
 800b16e:	2300      	movs	r3, #0
 800b170:	220a      	movs	r2, #10
 800b172:	4628      	mov	r0, r5
 800b174:	f000 f8e0 	bl	800b338 <__multadd>
 800b178:	4606      	mov	r6, r0
 800b17a:	e7f0      	b.n	800b15e <_dtoa_r+0xb16>
 800b17c:	f1b9 0f00 	cmp.w	r9, #0
 800b180:	bfcc      	ite	gt
 800b182:	464f      	movgt	r7, r9
 800b184:	2701      	movle	r7, #1
 800b186:	f04f 0800 	mov.w	r8, #0
 800b18a:	9a03      	ldr	r2, [sp, #12]
 800b18c:	4417      	add	r7, r2
 800b18e:	4659      	mov	r1, fp
 800b190:	2201      	movs	r2, #1
 800b192:	4628      	mov	r0, r5
 800b194:	9308      	str	r3, [sp, #32]
 800b196:	f000 fa7b 	bl	800b690 <__lshift>
 800b19a:	4621      	mov	r1, r4
 800b19c:	4683      	mov	fp, r0
 800b19e:	f000 fae7 	bl	800b770 <__mcmp>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	dcb2      	bgt.n	800b10c <_dtoa_r+0xac4>
 800b1a6:	d102      	bne.n	800b1ae <_dtoa_r+0xb66>
 800b1a8:	9b08      	ldr	r3, [sp, #32]
 800b1aa:	07db      	lsls	r3, r3, #31
 800b1ac:	d4ae      	bmi.n	800b10c <_dtoa_r+0xac4>
 800b1ae:	463b      	mov	r3, r7
 800b1b0:	461f      	mov	r7, r3
 800b1b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1b6:	2a30      	cmp	r2, #48	; 0x30
 800b1b8:	d0fa      	beq.n	800b1b0 <_dtoa_r+0xb68>
 800b1ba:	e6f9      	b.n	800afb0 <_dtoa_r+0x968>
 800b1bc:	9a03      	ldr	r2, [sp, #12]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d1a5      	bne.n	800b10e <_dtoa_r+0xac6>
 800b1c2:	2331      	movs	r3, #49	; 0x31
 800b1c4:	f10a 0a01 	add.w	sl, sl, #1
 800b1c8:	e779      	b.n	800b0be <_dtoa_r+0xa76>
 800b1ca:	4b14      	ldr	r3, [pc, #80]	; (800b21c <_dtoa_r+0xbd4>)
 800b1cc:	f7ff baa8 	b.w	800a720 <_dtoa_r+0xd8>
 800b1d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f47f aa81 	bne.w	800a6da <_dtoa_r+0x92>
 800b1d8:	4b11      	ldr	r3, [pc, #68]	; (800b220 <_dtoa_r+0xbd8>)
 800b1da:	f7ff baa1 	b.w	800a720 <_dtoa_r+0xd8>
 800b1de:	f1b9 0f00 	cmp.w	r9, #0
 800b1e2:	dc03      	bgt.n	800b1ec <_dtoa_r+0xba4>
 800b1e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	f73f aecb 	bgt.w	800af82 <_dtoa_r+0x93a>
 800b1ec:	9f03      	ldr	r7, [sp, #12]
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	4658      	mov	r0, fp
 800b1f2:	f7ff f99b 	bl	800a52c <quorem>
 800b1f6:	9a03      	ldr	r2, [sp, #12]
 800b1f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b1fc:	f807 3b01 	strb.w	r3, [r7], #1
 800b200:	1aba      	subs	r2, r7, r2
 800b202:	4591      	cmp	r9, r2
 800b204:	ddba      	ble.n	800b17c <_dtoa_r+0xb34>
 800b206:	4659      	mov	r1, fp
 800b208:	2300      	movs	r3, #0
 800b20a:	220a      	movs	r2, #10
 800b20c:	4628      	mov	r0, r5
 800b20e:	f000 f893 	bl	800b338 <__multadd>
 800b212:	4683      	mov	fp, r0
 800b214:	e7eb      	b.n	800b1ee <_dtoa_r+0xba6>
 800b216:	bf00      	nop
 800b218:	0800cb07 	.word	0x0800cb07
 800b21c:	0800ca64 	.word	0x0800ca64
 800b220:	0800ca88 	.word	0x0800ca88

0800b224 <_localeconv_r>:
 800b224:	4800      	ldr	r0, [pc, #0]	; (800b228 <_localeconv_r+0x4>)
 800b226:	4770      	bx	lr
 800b228:	20000168 	.word	0x20000168

0800b22c <malloc>:
 800b22c:	4b02      	ldr	r3, [pc, #8]	; (800b238 <malloc+0xc>)
 800b22e:	4601      	mov	r1, r0
 800b230:	6818      	ldr	r0, [r3, #0]
 800b232:	f000 bc1d 	b.w	800ba70 <_malloc_r>
 800b236:	bf00      	nop
 800b238:	20000014 	.word	0x20000014

0800b23c <memchr>:
 800b23c:	4603      	mov	r3, r0
 800b23e:	b510      	push	{r4, lr}
 800b240:	b2c9      	uxtb	r1, r1
 800b242:	4402      	add	r2, r0
 800b244:	4293      	cmp	r3, r2
 800b246:	4618      	mov	r0, r3
 800b248:	d101      	bne.n	800b24e <memchr+0x12>
 800b24a:	2000      	movs	r0, #0
 800b24c:	e003      	b.n	800b256 <memchr+0x1a>
 800b24e:	7804      	ldrb	r4, [r0, #0]
 800b250:	3301      	adds	r3, #1
 800b252:	428c      	cmp	r4, r1
 800b254:	d1f6      	bne.n	800b244 <memchr+0x8>
 800b256:	bd10      	pop	{r4, pc}

0800b258 <memcpy>:
 800b258:	440a      	add	r2, r1
 800b25a:	4291      	cmp	r1, r2
 800b25c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b260:	d100      	bne.n	800b264 <memcpy+0xc>
 800b262:	4770      	bx	lr
 800b264:	b510      	push	{r4, lr}
 800b266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b26a:	4291      	cmp	r1, r2
 800b26c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b270:	d1f9      	bne.n	800b266 <memcpy+0xe>
 800b272:	bd10      	pop	{r4, pc}

0800b274 <_Balloc>:
 800b274:	b570      	push	{r4, r5, r6, lr}
 800b276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b278:	4604      	mov	r4, r0
 800b27a:	460d      	mov	r5, r1
 800b27c:	b976      	cbnz	r6, 800b29c <_Balloc+0x28>
 800b27e:	2010      	movs	r0, #16
 800b280:	f7ff ffd4 	bl	800b22c <malloc>
 800b284:	4602      	mov	r2, r0
 800b286:	6260      	str	r0, [r4, #36]	; 0x24
 800b288:	b920      	cbnz	r0, 800b294 <_Balloc+0x20>
 800b28a:	2166      	movs	r1, #102	; 0x66
 800b28c:	4b17      	ldr	r3, [pc, #92]	; (800b2ec <_Balloc+0x78>)
 800b28e:	4818      	ldr	r0, [pc, #96]	; (800b2f0 <_Balloc+0x7c>)
 800b290:	f000 fc72 	bl	800bb78 <__assert_func>
 800b294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b298:	6006      	str	r6, [r0, #0]
 800b29a:	60c6      	str	r6, [r0, #12]
 800b29c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b29e:	68f3      	ldr	r3, [r6, #12]
 800b2a0:	b183      	cbz	r3, 800b2c4 <_Balloc+0x50>
 800b2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2aa:	b9b8      	cbnz	r0, 800b2dc <_Balloc+0x68>
 800b2ac:	2101      	movs	r1, #1
 800b2ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b2b2:	1d72      	adds	r2, r6, #5
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	0092      	lsls	r2, r2, #2
 800b2b8:	f000 fb5e 	bl	800b978 <_calloc_r>
 800b2bc:	b160      	cbz	r0, 800b2d8 <_Balloc+0x64>
 800b2be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2c2:	e00e      	b.n	800b2e2 <_Balloc+0x6e>
 800b2c4:	2221      	movs	r2, #33	; 0x21
 800b2c6:	2104      	movs	r1, #4
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 fb55 	bl	800b978 <_calloc_r>
 800b2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2d0:	60f0      	str	r0, [r6, #12]
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1e4      	bne.n	800b2a2 <_Balloc+0x2e>
 800b2d8:	2000      	movs	r0, #0
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	6802      	ldr	r2, [r0, #0]
 800b2de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2e8:	e7f7      	b.n	800b2da <_Balloc+0x66>
 800b2ea:	bf00      	nop
 800b2ec:	0800ca95 	.word	0x0800ca95
 800b2f0:	0800cb18 	.word	0x0800cb18

0800b2f4 <_Bfree>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	b976      	cbnz	r6, 800b31c <_Bfree+0x28>
 800b2fe:	2010      	movs	r0, #16
 800b300:	f7ff ff94 	bl	800b22c <malloc>
 800b304:	4602      	mov	r2, r0
 800b306:	6268      	str	r0, [r5, #36]	; 0x24
 800b308:	b920      	cbnz	r0, 800b314 <_Bfree+0x20>
 800b30a:	218a      	movs	r1, #138	; 0x8a
 800b30c:	4b08      	ldr	r3, [pc, #32]	; (800b330 <_Bfree+0x3c>)
 800b30e:	4809      	ldr	r0, [pc, #36]	; (800b334 <_Bfree+0x40>)
 800b310:	f000 fc32 	bl	800bb78 <__assert_func>
 800b314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b318:	6006      	str	r6, [r0, #0]
 800b31a:	60c6      	str	r6, [r0, #12]
 800b31c:	b13c      	cbz	r4, 800b32e <_Bfree+0x3a>
 800b31e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b320:	6862      	ldr	r2, [r4, #4]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b328:	6021      	str	r1, [r4, #0]
 800b32a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b32e:	bd70      	pop	{r4, r5, r6, pc}
 800b330:	0800ca95 	.word	0x0800ca95
 800b334:	0800cb18 	.word	0x0800cb18

0800b338 <__multadd>:
 800b338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b33c:	4607      	mov	r7, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	461e      	mov	r6, r3
 800b342:	2000      	movs	r0, #0
 800b344:	690d      	ldr	r5, [r1, #16]
 800b346:	f101 0c14 	add.w	ip, r1, #20
 800b34a:	f8dc 3000 	ldr.w	r3, [ip]
 800b34e:	3001      	adds	r0, #1
 800b350:	b299      	uxth	r1, r3
 800b352:	fb02 6101 	mla	r1, r2, r1, r6
 800b356:	0c1e      	lsrs	r6, r3, #16
 800b358:	0c0b      	lsrs	r3, r1, #16
 800b35a:	fb02 3306 	mla	r3, r2, r6, r3
 800b35e:	b289      	uxth	r1, r1
 800b360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b364:	4285      	cmp	r5, r0
 800b366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b36a:	f84c 1b04 	str.w	r1, [ip], #4
 800b36e:	dcec      	bgt.n	800b34a <__multadd+0x12>
 800b370:	b30e      	cbz	r6, 800b3b6 <__multadd+0x7e>
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	42ab      	cmp	r3, r5
 800b376:	dc19      	bgt.n	800b3ac <__multadd+0x74>
 800b378:	6861      	ldr	r1, [r4, #4]
 800b37a:	4638      	mov	r0, r7
 800b37c:	3101      	adds	r1, #1
 800b37e:	f7ff ff79 	bl	800b274 <_Balloc>
 800b382:	4680      	mov	r8, r0
 800b384:	b928      	cbnz	r0, 800b392 <__multadd+0x5a>
 800b386:	4602      	mov	r2, r0
 800b388:	21b5      	movs	r1, #181	; 0xb5
 800b38a:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <__multadd+0x84>)
 800b38c:	480c      	ldr	r0, [pc, #48]	; (800b3c0 <__multadd+0x88>)
 800b38e:	f000 fbf3 	bl	800bb78 <__assert_func>
 800b392:	6922      	ldr	r2, [r4, #16]
 800b394:	f104 010c 	add.w	r1, r4, #12
 800b398:	3202      	adds	r2, #2
 800b39a:	0092      	lsls	r2, r2, #2
 800b39c:	300c      	adds	r0, #12
 800b39e:	f7ff ff5b 	bl	800b258 <memcpy>
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f7ff ffa5 	bl	800b2f4 <_Bfree>
 800b3aa:	4644      	mov	r4, r8
 800b3ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3b0:	3501      	adds	r5, #1
 800b3b2:	615e      	str	r6, [r3, #20]
 800b3b4:	6125      	str	r5, [r4, #16]
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3bc:	0800cb07 	.word	0x0800cb07
 800b3c0:	0800cb18 	.word	0x0800cb18

0800b3c4 <__hi0bits>:
 800b3c4:	0c02      	lsrs	r2, r0, #16
 800b3c6:	0412      	lsls	r2, r2, #16
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	b9ca      	cbnz	r2, 800b400 <__hi0bits+0x3c>
 800b3cc:	0403      	lsls	r3, r0, #16
 800b3ce:	2010      	movs	r0, #16
 800b3d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b3d4:	bf04      	itt	eq
 800b3d6:	021b      	lsleq	r3, r3, #8
 800b3d8:	3008      	addeq	r0, #8
 800b3da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b3de:	bf04      	itt	eq
 800b3e0:	011b      	lsleq	r3, r3, #4
 800b3e2:	3004      	addeq	r0, #4
 800b3e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b3e8:	bf04      	itt	eq
 800b3ea:	009b      	lsleq	r3, r3, #2
 800b3ec:	3002      	addeq	r0, #2
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	db05      	blt.n	800b3fe <__hi0bits+0x3a>
 800b3f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b3f6:	f100 0001 	add.w	r0, r0, #1
 800b3fa:	bf08      	it	eq
 800b3fc:	2020      	moveq	r0, #32
 800b3fe:	4770      	bx	lr
 800b400:	2000      	movs	r0, #0
 800b402:	e7e5      	b.n	800b3d0 <__hi0bits+0xc>

0800b404 <__lo0bits>:
 800b404:	6803      	ldr	r3, [r0, #0]
 800b406:	4602      	mov	r2, r0
 800b408:	f013 0007 	ands.w	r0, r3, #7
 800b40c:	d00b      	beq.n	800b426 <__lo0bits+0x22>
 800b40e:	07d9      	lsls	r1, r3, #31
 800b410:	d421      	bmi.n	800b456 <__lo0bits+0x52>
 800b412:	0798      	lsls	r0, r3, #30
 800b414:	bf49      	itett	mi
 800b416:	085b      	lsrmi	r3, r3, #1
 800b418:	089b      	lsrpl	r3, r3, #2
 800b41a:	2001      	movmi	r0, #1
 800b41c:	6013      	strmi	r3, [r2, #0]
 800b41e:	bf5c      	itt	pl
 800b420:	2002      	movpl	r0, #2
 800b422:	6013      	strpl	r3, [r2, #0]
 800b424:	4770      	bx	lr
 800b426:	b299      	uxth	r1, r3
 800b428:	b909      	cbnz	r1, 800b42e <__lo0bits+0x2a>
 800b42a:	2010      	movs	r0, #16
 800b42c:	0c1b      	lsrs	r3, r3, #16
 800b42e:	b2d9      	uxtb	r1, r3
 800b430:	b909      	cbnz	r1, 800b436 <__lo0bits+0x32>
 800b432:	3008      	adds	r0, #8
 800b434:	0a1b      	lsrs	r3, r3, #8
 800b436:	0719      	lsls	r1, r3, #28
 800b438:	bf04      	itt	eq
 800b43a:	091b      	lsreq	r3, r3, #4
 800b43c:	3004      	addeq	r0, #4
 800b43e:	0799      	lsls	r1, r3, #30
 800b440:	bf04      	itt	eq
 800b442:	089b      	lsreq	r3, r3, #2
 800b444:	3002      	addeq	r0, #2
 800b446:	07d9      	lsls	r1, r3, #31
 800b448:	d403      	bmi.n	800b452 <__lo0bits+0x4e>
 800b44a:	085b      	lsrs	r3, r3, #1
 800b44c:	f100 0001 	add.w	r0, r0, #1
 800b450:	d003      	beq.n	800b45a <__lo0bits+0x56>
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	4770      	bx	lr
 800b456:	2000      	movs	r0, #0
 800b458:	4770      	bx	lr
 800b45a:	2020      	movs	r0, #32
 800b45c:	4770      	bx	lr
	...

0800b460 <__i2b>:
 800b460:	b510      	push	{r4, lr}
 800b462:	460c      	mov	r4, r1
 800b464:	2101      	movs	r1, #1
 800b466:	f7ff ff05 	bl	800b274 <_Balloc>
 800b46a:	4602      	mov	r2, r0
 800b46c:	b928      	cbnz	r0, 800b47a <__i2b+0x1a>
 800b46e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b472:	4b04      	ldr	r3, [pc, #16]	; (800b484 <__i2b+0x24>)
 800b474:	4804      	ldr	r0, [pc, #16]	; (800b488 <__i2b+0x28>)
 800b476:	f000 fb7f 	bl	800bb78 <__assert_func>
 800b47a:	2301      	movs	r3, #1
 800b47c:	6144      	str	r4, [r0, #20]
 800b47e:	6103      	str	r3, [r0, #16]
 800b480:	bd10      	pop	{r4, pc}
 800b482:	bf00      	nop
 800b484:	0800cb07 	.word	0x0800cb07
 800b488:	0800cb18 	.word	0x0800cb18

0800b48c <__multiply>:
 800b48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	4691      	mov	r9, r2
 800b492:	690a      	ldr	r2, [r1, #16]
 800b494:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b498:	460c      	mov	r4, r1
 800b49a:	429a      	cmp	r2, r3
 800b49c:	bfbe      	ittt	lt
 800b49e:	460b      	movlt	r3, r1
 800b4a0:	464c      	movlt	r4, r9
 800b4a2:	4699      	movlt	r9, r3
 800b4a4:	6927      	ldr	r7, [r4, #16]
 800b4a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4aa:	68a3      	ldr	r3, [r4, #8]
 800b4ac:	6861      	ldr	r1, [r4, #4]
 800b4ae:	eb07 060a 	add.w	r6, r7, sl
 800b4b2:	42b3      	cmp	r3, r6
 800b4b4:	b085      	sub	sp, #20
 800b4b6:	bfb8      	it	lt
 800b4b8:	3101      	addlt	r1, #1
 800b4ba:	f7ff fedb 	bl	800b274 <_Balloc>
 800b4be:	b930      	cbnz	r0, 800b4ce <__multiply+0x42>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	f240 115d 	movw	r1, #349	; 0x15d
 800b4c6:	4b43      	ldr	r3, [pc, #268]	; (800b5d4 <__multiply+0x148>)
 800b4c8:	4843      	ldr	r0, [pc, #268]	; (800b5d8 <__multiply+0x14c>)
 800b4ca:	f000 fb55 	bl	800bb78 <__assert_func>
 800b4ce:	f100 0514 	add.w	r5, r0, #20
 800b4d2:	462b      	mov	r3, r5
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4da:	4543      	cmp	r3, r8
 800b4dc:	d321      	bcc.n	800b522 <__multiply+0x96>
 800b4de:	f104 0314 	add.w	r3, r4, #20
 800b4e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4e6:	f109 0314 	add.w	r3, r9, #20
 800b4ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4ee:	9202      	str	r2, [sp, #8]
 800b4f0:	1b3a      	subs	r2, r7, r4
 800b4f2:	3a15      	subs	r2, #21
 800b4f4:	f022 0203 	bic.w	r2, r2, #3
 800b4f8:	3204      	adds	r2, #4
 800b4fa:	f104 0115 	add.w	r1, r4, #21
 800b4fe:	428f      	cmp	r7, r1
 800b500:	bf38      	it	cc
 800b502:	2204      	movcc	r2, #4
 800b504:	9201      	str	r2, [sp, #4]
 800b506:	9a02      	ldr	r2, [sp, #8]
 800b508:	9303      	str	r3, [sp, #12]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d80c      	bhi.n	800b528 <__multiply+0x9c>
 800b50e:	2e00      	cmp	r6, #0
 800b510:	dd03      	ble.n	800b51a <__multiply+0x8e>
 800b512:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b516:	2b00      	cmp	r3, #0
 800b518:	d059      	beq.n	800b5ce <__multiply+0x142>
 800b51a:	6106      	str	r6, [r0, #16]
 800b51c:	b005      	add	sp, #20
 800b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b522:	f843 2b04 	str.w	r2, [r3], #4
 800b526:	e7d8      	b.n	800b4da <__multiply+0x4e>
 800b528:	f8b3 a000 	ldrh.w	sl, [r3]
 800b52c:	f1ba 0f00 	cmp.w	sl, #0
 800b530:	d023      	beq.n	800b57a <__multiply+0xee>
 800b532:	46a9      	mov	r9, r5
 800b534:	f04f 0c00 	mov.w	ip, #0
 800b538:	f104 0e14 	add.w	lr, r4, #20
 800b53c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b540:	f8d9 1000 	ldr.w	r1, [r9]
 800b544:	fa1f fb82 	uxth.w	fp, r2
 800b548:	b289      	uxth	r1, r1
 800b54a:	fb0a 110b 	mla	r1, sl, fp, r1
 800b54e:	4461      	add	r1, ip
 800b550:	f8d9 c000 	ldr.w	ip, [r9]
 800b554:	0c12      	lsrs	r2, r2, #16
 800b556:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b55a:	fb0a c202 	mla	r2, sl, r2, ip
 800b55e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b562:	b289      	uxth	r1, r1
 800b564:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b568:	4577      	cmp	r7, lr
 800b56a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b56e:	f849 1b04 	str.w	r1, [r9], #4
 800b572:	d8e3      	bhi.n	800b53c <__multiply+0xb0>
 800b574:	9a01      	ldr	r2, [sp, #4]
 800b576:	f845 c002 	str.w	ip, [r5, r2]
 800b57a:	9a03      	ldr	r2, [sp, #12]
 800b57c:	3304      	adds	r3, #4
 800b57e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b582:	f1b9 0f00 	cmp.w	r9, #0
 800b586:	d020      	beq.n	800b5ca <__multiply+0x13e>
 800b588:	46ae      	mov	lr, r5
 800b58a:	f04f 0a00 	mov.w	sl, #0
 800b58e:	6829      	ldr	r1, [r5, #0]
 800b590:	f104 0c14 	add.w	ip, r4, #20
 800b594:	f8bc b000 	ldrh.w	fp, [ip]
 800b598:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b59c:	b289      	uxth	r1, r1
 800b59e:	fb09 220b 	mla	r2, r9, fp, r2
 800b5a2:	4492      	add	sl, r2
 800b5a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b5a8:	f84e 1b04 	str.w	r1, [lr], #4
 800b5ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5b0:	f8be 1000 	ldrh.w	r1, [lr]
 800b5b4:	0c12      	lsrs	r2, r2, #16
 800b5b6:	fb09 1102 	mla	r1, r9, r2, r1
 800b5ba:	4567      	cmp	r7, ip
 800b5bc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b5c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5c4:	d8e6      	bhi.n	800b594 <__multiply+0x108>
 800b5c6:	9a01      	ldr	r2, [sp, #4]
 800b5c8:	50a9      	str	r1, [r5, r2]
 800b5ca:	3504      	adds	r5, #4
 800b5cc:	e79b      	b.n	800b506 <__multiply+0x7a>
 800b5ce:	3e01      	subs	r6, #1
 800b5d0:	e79d      	b.n	800b50e <__multiply+0x82>
 800b5d2:	bf00      	nop
 800b5d4:	0800cb07 	.word	0x0800cb07
 800b5d8:	0800cb18 	.word	0x0800cb18

0800b5dc <__pow5mult>:
 800b5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e0:	4615      	mov	r5, r2
 800b5e2:	f012 0203 	ands.w	r2, r2, #3
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460f      	mov	r7, r1
 800b5ea:	d007      	beq.n	800b5fc <__pow5mult+0x20>
 800b5ec:	4c25      	ldr	r4, [pc, #148]	; (800b684 <__pow5mult+0xa8>)
 800b5ee:	3a01      	subs	r2, #1
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5f6:	f7ff fe9f 	bl	800b338 <__multadd>
 800b5fa:	4607      	mov	r7, r0
 800b5fc:	10ad      	asrs	r5, r5, #2
 800b5fe:	d03d      	beq.n	800b67c <__pow5mult+0xa0>
 800b600:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b602:	b97c      	cbnz	r4, 800b624 <__pow5mult+0x48>
 800b604:	2010      	movs	r0, #16
 800b606:	f7ff fe11 	bl	800b22c <malloc>
 800b60a:	4602      	mov	r2, r0
 800b60c:	6270      	str	r0, [r6, #36]	; 0x24
 800b60e:	b928      	cbnz	r0, 800b61c <__pow5mult+0x40>
 800b610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b614:	4b1c      	ldr	r3, [pc, #112]	; (800b688 <__pow5mult+0xac>)
 800b616:	481d      	ldr	r0, [pc, #116]	; (800b68c <__pow5mult+0xb0>)
 800b618:	f000 faae 	bl	800bb78 <__assert_func>
 800b61c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b620:	6004      	str	r4, [r0, #0]
 800b622:	60c4      	str	r4, [r0, #12]
 800b624:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b62c:	b94c      	cbnz	r4, 800b642 <__pow5mult+0x66>
 800b62e:	f240 2171 	movw	r1, #625	; 0x271
 800b632:	4630      	mov	r0, r6
 800b634:	f7ff ff14 	bl	800b460 <__i2b>
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b640:	6003      	str	r3, [r0, #0]
 800b642:	f04f 0900 	mov.w	r9, #0
 800b646:	07eb      	lsls	r3, r5, #31
 800b648:	d50a      	bpl.n	800b660 <__pow5mult+0x84>
 800b64a:	4639      	mov	r1, r7
 800b64c:	4622      	mov	r2, r4
 800b64e:	4630      	mov	r0, r6
 800b650:	f7ff ff1c 	bl	800b48c <__multiply>
 800b654:	4680      	mov	r8, r0
 800b656:	4639      	mov	r1, r7
 800b658:	4630      	mov	r0, r6
 800b65a:	f7ff fe4b 	bl	800b2f4 <_Bfree>
 800b65e:	4647      	mov	r7, r8
 800b660:	106d      	asrs	r5, r5, #1
 800b662:	d00b      	beq.n	800b67c <__pow5mult+0xa0>
 800b664:	6820      	ldr	r0, [r4, #0]
 800b666:	b938      	cbnz	r0, 800b678 <__pow5mult+0x9c>
 800b668:	4622      	mov	r2, r4
 800b66a:	4621      	mov	r1, r4
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7ff ff0d 	bl	800b48c <__multiply>
 800b672:	6020      	str	r0, [r4, #0]
 800b674:	f8c0 9000 	str.w	r9, [r0]
 800b678:	4604      	mov	r4, r0
 800b67a:	e7e4      	b.n	800b646 <__pow5mult+0x6a>
 800b67c:	4638      	mov	r0, r7
 800b67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b682:	bf00      	nop
 800b684:	0800cc68 	.word	0x0800cc68
 800b688:	0800ca95 	.word	0x0800ca95
 800b68c:	0800cb18 	.word	0x0800cb18

0800b690 <__lshift>:
 800b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	460c      	mov	r4, r1
 800b696:	4607      	mov	r7, r0
 800b698:	4691      	mov	r9, r2
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	6849      	ldr	r1, [r1, #4]
 800b69e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6a8:	f108 0601 	add.w	r6, r8, #1
 800b6ac:	42b3      	cmp	r3, r6
 800b6ae:	db0b      	blt.n	800b6c8 <__lshift+0x38>
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	f7ff fddf 	bl	800b274 <_Balloc>
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	b948      	cbnz	r0, 800b6ce <__lshift+0x3e>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6c0:	4b29      	ldr	r3, [pc, #164]	; (800b768 <__lshift+0xd8>)
 800b6c2:	482a      	ldr	r0, [pc, #168]	; (800b76c <__lshift+0xdc>)
 800b6c4:	f000 fa58 	bl	800bb78 <__assert_func>
 800b6c8:	3101      	adds	r1, #1
 800b6ca:	005b      	lsls	r3, r3, #1
 800b6cc:	e7ee      	b.n	800b6ac <__lshift+0x1c>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f100 0114 	add.w	r1, r0, #20
 800b6d4:	f100 0210 	add.w	r2, r0, #16
 800b6d8:	4618      	mov	r0, r3
 800b6da:	4553      	cmp	r3, sl
 800b6dc:	db37      	blt.n	800b74e <__lshift+0xbe>
 800b6de:	6920      	ldr	r0, [r4, #16]
 800b6e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6e4:	f104 0314 	add.w	r3, r4, #20
 800b6e8:	f019 091f 	ands.w	r9, r9, #31
 800b6ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b6f4:	d02f      	beq.n	800b756 <__lshift+0xc6>
 800b6f6:	468a      	mov	sl, r1
 800b6f8:	f04f 0c00 	mov.w	ip, #0
 800b6fc:	f1c9 0e20 	rsb	lr, r9, #32
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	fa02 f209 	lsl.w	r2, r2, r9
 800b706:	ea42 020c 	orr.w	r2, r2, ip
 800b70a:	f84a 2b04 	str.w	r2, [sl], #4
 800b70e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b712:	4298      	cmp	r0, r3
 800b714:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b718:	d8f2      	bhi.n	800b700 <__lshift+0x70>
 800b71a:	1b03      	subs	r3, r0, r4
 800b71c:	3b15      	subs	r3, #21
 800b71e:	f023 0303 	bic.w	r3, r3, #3
 800b722:	3304      	adds	r3, #4
 800b724:	f104 0215 	add.w	r2, r4, #21
 800b728:	4290      	cmp	r0, r2
 800b72a:	bf38      	it	cc
 800b72c:	2304      	movcc	r3, #4
 800b72e:	f841 c003 	str.w	ip, [r1, r3]
 800b732:	f1bc 0f00 	cmp.w	ip, #0
 800b736:	d001      	beq.n	800b73c <__lshift+0xac>
 800b738:	f108 0602 	add.w	r6, r8, #2
 800b73c:	3e01      	subs	r6, #1
 800b73e:	4638      	mov	r0, r7
 800b740:	4621      	mov	r1, r4
 800b742:	612e      	str	r6, [r5, #16]
 800b744:	f7ff fdd6 	bl	800b2f4 <_Bfree>
 800b748:	4628      	mov	r0, r5
 800b74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b752:	3301      	adds	r3, #1
 800b754:	e7c1      	b.n	800b6da <__lshift+0x4a>
 800b756:	3904      	subs	r1, #4
 800b758:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75c:	4298      	cmp	r0, r3
 800b75e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b762:	d8f9      	bhi.n	800b758 <__lshift+0xc8>
 800b764:	e7ea      	b.n	800b73c <__lshift+0xac>
 800b766:	bf00      	nop
 800b768:	0800cb07 	.word	0x0800cb07
 800b76c:	0800cb18 	.word	0x0800cb18

0800b770 <__mcmp>:
 800b770:	4603      	mov	r3, r0
 800b772:	690a      	ldr	r2, [r1, #16]
 800b774:	6900      	ldr	r0, [r0, #16]
 800b776:	b530      	push	{r4, r5, lr}
 800b778:	1a80      	subs	r0, r0, r2
 800b77a:	d10d      	bne.n	800b798 <__mcmp+0x28>
 800b77c:	3314      	adds	r3, #20
 800b77e:	3114      	adds	r1, #20
 800b780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b78c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b790:	4295      	cmp	r5, r2
 800b792:	d002      	beq.n	800b79a <__mcmp+0x2a>
 800b794:	d304      	bcc.n	800b7a0 <__mcmp+0x30>
 800b796:	2001      	movs	r0, #1
 800b798:	bd30      	pop	{r4, r5, pc}
 800b79a:	42a3      	cmp	r3, r4
 800b79c:	d3f4      	bcc.n	800b788 <__mcmp+0x18>
 800b79e:	e7fb      	b.n	800b798 <__mcmp+0x28>
 800b7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a4:	e7f8      	b.n	800b798 <__mcmp+0x28>
	...

0800b7a8 <__mdiff>:
 800b7a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	460d      	mov	r5, r1
 800b7ae:	4607      	mov	r7, r0
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	4614      	mov	r4, r2
 800b7b6:	f7ff ffdb 	bl	800b770 <__mcmp>
 800b7ba:	1e06      	subs	r6, r0, #0
 800b7bc:	d111      	bne.n	800b7e2 <__mdiff+0x3a>
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff fd57 	bl	800b274 <_Balloc>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	b928      	cbnz	r0, 800b7d6 <__mdiff+0x2e>
 800b7ca:	f240 2132 	movw	r1, #562	; 0x232
 800b7ce:	4b3a      	ldr	r3, [pc, #232]	; (800b8b8 <__mdiff+0x110>)
 800b7d0:	483a      	ldr	r0, [pc, #232]	; (800b8bc <__mdiff+0x114>)
 800b7d2:	f000 f9d1 	bl	800bb78 <__assert_func>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b7dc:	4610      	mov	r0, r2
 800b7de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e2:	bfa4      	itt	ge
 800b7e4:	4623      	movge	r3, r4
 800b7e6:	462c      	movge	r4, r5
 800b7e8:	4638      	mov	r0, r7
 800b7ea:	6861      	ldr	r1, [r4, #4]
 800b7ec:	bfa6      	itte	ge
 800b7ee:	461d      	movge	r5, r3
 800b7f0:	2600      	movge	r6, #0
 800b7f2:	2601      	movlt	r6, #1
 800b7f4:	f7ff fd3e 	bl	800b274 <_Balloc>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	b918      	cbnz	r0, 800b804 <__mdiff+0x5c>
 800b7fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b800:	4b2d      	ldr	r3, [pc, #180]	; (800b8b8 <__mdiff+0x110>)
 800b802:	e7e5      	b.n	800b7d0 <__mdiff+0x28>
 800b804:	f102 0814 	add.w	r8, r2, #20
 800b808:	46c2      	mov	sl, r8
 800b80a:	f04f 0c00 	mov.w	ip, #0
 800b80e:	6927      	ldr	r7, [r4, #16]
 800b810:	60c6      	str	r6, [r0, #12]
 800b812:	692e      	ldr	r6, [r5, #16]
 800b814:	f104 0014 	add.w	r0, r4, #20
 800b818:	f105 0914 	add.w	r9, r5, #20
 800b81c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b820:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b824:	3410      	adds	r4, #16
 800b826:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b82a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b82e:	fa1f f18b 	uxth.w	r1, fp
 800b832:	448c      	add	ip, r1
 800b834:	b299      	uxth	r1, r3
 800b836:	0c1b      	lsrs	r3, r3, #16
 800b838:	ebac 0101 	sub.w	r1, ip, r1
 800b83c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b840:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b844:	b289      	uxth	r1, r1
 800b846:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b84a:	454e      	cmp	r6, r9
 800b84c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b850:	f84a 3b04 	str.w	r3, [sl], #4
 800b854:	d8e7      	bhi.n	800b826 <__mdiff+0x7e>
 800b856:	1b73      	subs	r3, r6, r5
 800b858:	3b15      	subs	r3, #21
 800b85a:	f023 0303 	bic.w	r3, r3, #3
 800b85e:	3515      	adds	r5, #21
 800b860:	3304      	adds	r3, #4
 800b862:	42ae      	cmp	r6, r5
 800b864:	bf38      	it	cc
 800b866:	2304      	movcc	r3, #4
 800b868:	4418      	add	r0, r3
 800b86a:	4443      	add	r3, r8
 800b86c:	461e      	mov	r6, r3
 800b86e:	4605      	mov	r5, r0
 800b870:	4575      	cmp	r5, lr
 800b872:	d30e      	bcc.n	800b892 <__mdiff+0xea>
 800b874:	f10e 0103 	add.w	r1, lr, #3
 800b878:	1a09      	subs	r1, r1, r0
 800b87a:	f021 0103 	bic.w	r1, r1, #3
 800b87e:	3803      	subs	r0, #3
 800b880:	4586      	cmp	lr, r0
 800b882:	bf38      	it	cc
 800b884:	2100      	movcc	r1, #0
 800b886:	4419      	add	r1, r3
 800b888:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b88c:	b18b      	cbz	r3, 800b8b2 <__mdiff+0x10a>
 800b88e:	6117      	str	r7, [r2, #16]
 800b890:	e7a4      	b.n	800b7dc <__mdiff+0x34>
 800b892:	f855 8b04 	ldr.w	r8, [r5], #4
 800b896:	fa1f f188 	uxth.w	r1, r8
 800b89a:	4461      	add	r1, ip
 800b89c:	140c      	asrs	r4, r1, #16
 800b89e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8a2:	b289      	uxth	r1, r1
 800b8a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b8a8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b8ac:	f846 1b04 	str.w	r1, [r6], #4
 800b8b0:	e7de      	b.n	800b870 <__mdiff+0xc8>
 800b8b2:	3f01      	subs	r7, #1
 800b8b4:	e7e8      	b.n	800b888 <__mdiff+0xe0>
 800b8b6:	bf00      	nop
 800b8b8:	0800cb07 	.word	0x0800cb07
 800b8bc:	0800cb18 	.word	0x0800cb18

0800b8c0 <__d2b>:
 800b8c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b8ca:	4690      	mov	r8, r2
 800b8cc:	461d      	mov	r5, r3
 800b8ce:	f7ff fcd1 	bl	800b274 <_Balloc>
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	b930      	cbnz	r0, 800b8e4 <__d2b+0x24>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	f240 310a 	movw	r1, #778	; 0x30a
 800b8dc:	4b24      	ldr	r3, [pc, #144]	; (800b970 <__d2b+0xb0>)
 800b8de:	4825      	ldr	r0, [pc, #148]	; (800b974 <__d2b+0xb4>)
 800b8e0:	f000 f94a 	bl	800bb78 <__assert_func>
 800b8e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b8e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b8ec:	bb2d      	cbnz	r5, 800b93a <__d2b+0x7a>
 800b8ee:	9301      	str	r3, [sp, #4]
 800b8f0:	f1b8 0300 	subs.w	r3, r8, #0
 800b8f4:	d026      	beq.n	800b944 <__d2b+0x84>
 800b8f6:	4668      	mov	r0, sp
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	f7ff fd83 	bl	800b404 <__lo0bits>
 800b8fe:	9900      	ldr	r1, [sp, #0]
 800b900:	b1f0      	cbz	r0, 800b940 <__d2b+0x80>
 800b902:	9a01      	ldr	r2, [sp, #4]
 800b904:	f1c0 0320 	rsb	r3, r0, #32
 800b908:	fa02 f303 	lsl.w	r3, r2, r3
 800b90c:	430b      	orrs	r3, r1
 800b90e:	40c2      	lsrs	r2, r0
 800b910:	6163      	str	r3, [r4, #20]
 800b912:	9201      	str	r2, [sp, #4]
 800b914:	9b01      	ldr	r3, [sp, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	bf14      	ite	ne
 800b91a:	2102      	movne	r1, #2
 800b91c:	2101      	moveq	r1, #1
 800b91e:	61a3      	str	r3, [r4, #24]
 800b920:	6121      	str	r1, [r4, #16]
 800b922:	b1c5      	cbz	r5, 800b956 <__d2b+0x96>
 800b924:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b928:	4405      	add	r5, r0
 800b92a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b92e:	603d      	str	r5, [r7, #0]
 800b930:	6030      	str	r0, [r6, #0]
 800b932:	4620      	mov	r0, r4
 800b934:	b002      	add	sp, #8
 800b936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b93a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b93e:	e7d6      	b.n	800b8ee <__d2b+0x2e>
 800b940:	6161      	str	r1, [r4, #20]
 800b942:	e7e7      	b.n	800b914 <__d2b+0x54>
 800b944:	a801      	add	r0, sp, #4
 800b946:	f7ff fd5d 	bl	800b404 <__lo0bits>
 800b94a:	2101      	movs	r1, #1
 800b94c:	9b01      	ldr	r3, [sp, #4]
 800b94e:	6121      	str	r1, [r4, #16]
 800b950:	6163      	str	r3, [r4, #20]
 800b952:	3020      	adds	r0, #32
 800b954:	e7e5      	b.n	800b922 <__d2b+0x62>
 800b956:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b95a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b95e:	6038      	str	r0, [r7, #0]
 800b960:	6918      	ldr	r0, [r3, #16]
 800b962:	f7ff fd2f 	bl	800b3c4 <__hi0bits>
 800b966:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b96a:	6031      	str	r1, [r6, #0]
 800b96c:	e7e1      	b.n	800b932 <__d2b+0x72>
 800b96e:	bf00      	nop
 800b970:	0800cb07 	.word	0x0800cb07
 800b974:	0800cb18 	.word	0x0800cb18

0800b978 <_calloc_r>:
 800b978:	b570      	push	{r4, r5, r6, lr}
 800b97a:	fba1 5402 	umull	r5, r4, r1, r2
 800b97e:	b934      	cbnz	r4, 800b98e <_calloc_r+0x16>
 800b980:	4629      	mov	r1, r5
 800b982:	f000 f875 	bl	800ba70 <_malloc_r>
 800b986:	4606      	mov	r6, r0
 800b988:	b928      	cbnz	r0, 800b996 <_calloc_r+0x1e>
 800b98a:	4630      	mov	r0, r6
 800b98c:	bd70      	pop	{r4, r5, r6, pc}
 800b98e:	220c      	movs	r2, #12
 800b990:	2600      	movs	r6, #0
 800b992:	6002      	str	r2, [r0, #0]
 800b994:	e7f9      	b.n	800b98a <_calloc_r+0x12>
 800b996:	462a      	mov	r2, r5
 800b998:	4621      	mov	r1, r4
 800b99a:	f7fe f95f 	bl	8009c5c <memset>
 800b99e:	e7f4      	b.n	800b98a <_calloc_r+0x12>

0800b9a0 <_free_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	2900      	cmp	r1, #0
 800b9a6:	d040      	beq.n	800ba2a <_free_r+0x8a>
 800b9a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ac:	1f0c      	subs	r4, r1, #4
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	bfb8      	it	lt
 800b9b2:	18e4      	addlt	r4, r4, r3
 800b9b4:	f000 f922 	bl	800bbfc <__malloc_lock>
 800b9b8:	4a1c      	ldr	r2, [pc, #112]	; (800ba2c <_free_r+0x8c>)
 800b9ba:	6813      	ldr	r3, [r2, #0]
 800b9bc:	b933      	cbnz	r3, 800b9cc <_free_r+0x2c>
 800b9be:	6063      	str	r3, [r4, #4]
 800b9c0:	6014      	str	r4, [r2, #0]
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c8:	f000 b91e 	b.w	800bc08 <__malloc_unlock>
 800b9cc:	42a3      	cmp	r3, r4
 800b9ce:	d908      	bls.n	800b9e2 <_free_r+0x42>
 800b9d0:	6820      	ldr	r0, [r4, #0]
 800b9d2:	1821      	adds	r1, r4, r0
 800b9d4:	428b      	cmp	r3, r1
 800b9d6:	bf01      	itttt	eq
 800b9d8:	6819      	ldreq	r1, [r3, #0]
 800b9da:	685b      	ldreq	r3, [r3, #4]
 800b9dc:	1809      	addeq	r1, r1, r0
 800b9de:	6021      	streq	r1, [r4, #0]
 800b9e0:	e7ed      	b.n	800b9be <_free_r+0x1e>
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	b10b      	cbz	r3, 800b9ec <_free_r+0x4c>
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	d9fa      	bls.n	800b9e2 <_free_r+0x42>
 800b9ec:	6811      	ldr	r1, [r2, #0]
 800b9ee:	1850      	adds	r0, r2, r1
 800b9f0:	42a0      	cmp	r0, r4
 800b9f2:	d10b      	bne.n	800ba0c <_free_r+0x6c>
 800b9f4:	6820      	ldr	r0, [r4, #0]
 800b9f6:	4401      	add	r1, r0
 800b9f8:	1850      	adds	r0, r2, r1
 800b9fa:	4283      	cmp	r3, r0
 800b9fc:	6011      	str	r1, [r2, #0]
 800b9fe:	d1e0      	bne.n	800b9c2 <_free_r+0x22>
 800ba00:	6818      	ldr	r0, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	4401      	add	r1, r0
 800ba06:	6011      	str	r1, [r2, #0]
 800ba08:	6053      	str	r3, [r2, #4]
 800ba0a:	e7da      	b.n	800b9c2 <_free_r+0x22>
 800ba0c:	d902      	bls.n	800ba14 <_free_r+0x74>
 800ba0e:	230c      	movs	r3, #12
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	e7d6      	b.n	800b9c2 <_free_r+0x22>
 800ba14:	6820      	ldr	r0, [r4, #0]
 800ba16:	1821      	adds	r1, r4, r0
 800ba18:	428b      	cmp	r3, r1
 800ba1a:	bf01      	itttt	eq
 800ba1c:	6819      	ldreq	r1, [r3, #0]
 800ba1e:	685b      	ldreq	r3, [r3, #4]
 800ba20:	1809      	addeq	r1, r1, r0
 800ba22:	6021      	streq	r1, [r4, #0]
 800ba24:	6063      	str	r3, [r4, #4]
 800ba26:	6054      	str	r4, [r2, #4]
 800ba28:	e7cb      	b.n	800b9c2 <_free_r+0x22>
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	20000520 	.word	0x20000520

0800ba30 <sbrk_aligned>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	4e0e      	ldr	r6, [pc, #56]	; (800ba6c <sbrk_aligned+0x3c>)
 800ba34:	460c      	mov	r4, r1
 800ba36:	6831      	ldr	r1, [r6, #0]
 800ba38:	4605      	mov	r5, r0
 800ba3a:	b911      	cbnz	r1, 800ba42 <sbrk_aligned+0x12>
 800ba3c:	f000 f88c 	bl	800bb58 <_sbrk_r>
 800ba40:	6030      	str	r0, [r6, #0]
 800ba42:	4621      	mov	r1, r4
 800ba44:	4628      	mov	r0, r5
 800ba46:	f000 f887 	bl	800bb58 <_sbrk_r>
 800ba4a:	1c43      	adds	r3, r0, #1
 800ba4c:	d00a      	beq.n	800ba64 <sbrk_aligned+0x34>
 800ba4e:	1cc4      	adds	r4, r0, #3
 800ba50:	f024 0403 	bic.w	r4, r4, #3
 800ba54:	42a0      	cmp	r0, r4
 800ba56:	d007      	beq.n	800ba68 <sbrk_aligned+0x38>
 800ba58:	1a21      	subs	r1, r4, r0
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f000 f87c 	bl	800bb58 <_sbrk_r>
 800ba60:	3001      	adds	r0, #1
 800ba62:	d101      	bne.n	800ba68 <sbrk_aligned+0x38>
 800ba64:	f04f 34ff 	mov.w	r4, #4294967295
 800ba68:	4620      	mov	r0, r4
 800ba6a:	bd70      	pop	{r4, r5, r6, pc}
 800ba6c:	20000524 	.word	0x20000524

0800ba70 <_malloc_r>:
 800ba70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba74:	1ccd      	adds	r5, r1, #3
 800ba76:	f025 0503 	bic.w	r5, r5, #3
 800ba7a:	3508      	adds	r5, #8
 800ba7c:	2d0c      	cmp	r5, #12
 800ba7e:	bf38      	it	cc
 800ba80:	250c      	movcc	r5, #12
 800ba82:	2d00      	cmp	r5, #0
 800ba84:	4607      	mov	r7, r0
 800ba86:	db01      	blt.n	800ba8c <_malloc_r+0x1c>
 800ba88:	42a9      	cmp	r1, r5
 800ba8a:	d905      	bls.n	800ba98 <_malloc_r+0x28>
 800ba8c:	230c      	movs	r3, #12
 800ba8e:	2600      	movs	r6, #0
 800ba90:	603b      	str	r3, [r7, #0]
 800ba92:	4630      	mov	r0, r6
 800ba94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba98:	4e2e      	ldr	r6, [pc, #184]	; (800bb54 <_malloc_r+0xe4>)
 800ba9a:	f000 f8af 	bl	800bbfc <__malloc_lock>
 800ba9e:	6833      	ldr	r3, [r6, #0]
 800baa0:	461c      	mov	r4, r3
 800baa2:	bb34      	cbnz	r4, 800baf2 <_malloc_r+0x82>
 800baa4:	4629      	mov	r1, r5
 800baa6:	4638      	mov	r0, r7
 800baa8:	f7ff ffc2 	bl	800ba30 <sbrk_aligned>
 800baac:	1c43      	adds	r3, r0, #1
 800baae:	4604      	mov	r4, r0
 800bab0:	d14d      	bne.n	800bb4e <_malloc_r+0xde>
 800bab2:	6834      	ldr	r4, [r6, #0]
 800bab4:	4626      	mov	r6, r4
 800bab6:	2e00      	cmp	r6, #0
 800bab8:	d140      	bne.n	800bb3c <_malloc_r+0xcc>
 800baba:	6823      	ldr	r3, [r4, #0]
 800babc:	4631      	mov	r1, r6
 800babe:	4638      	mov	r0, r7
 800bac0:	eb04 0803 	add.w	r8, r4, r3
 800bac4:	f000 f848 	bl	800bb58 <_sbrk_r>
 800bac8:	4580      	cmp	r8, r0
 800baca:	d13a      	bne.n	800bb42 <_malloc_r+0xd2>
 800bacc:	6821      	ldr	r1, [r4, #0]
 800bace:	3503      	adds	r5, #3
 800bad0:	1a6d      	subs	r5, r5, r1
 800bad2:	f025 0503 	bic.w	r5, r5, #3
 800bad6:	3508      	adds	r5, #8
 800bad8:	2d0c      	cmp	r5, #12
 800bada:	bf38      	it	cc
 800badc:	250c      	movcc	r5, #12
 800bade:	4638      	mov	r0, r7
 800bae0:	4629      	mov	r1, r5
 800bae2:	f7ff ffa5 	bl	800ba30 <sbrk_aligned>
 800bae6:	3001      	adds	r0, #1
 800bae8:	d02b      	beq.n	800bb42 <_malloc_r+0xd2>
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	442b      	add	r3, r5
 800baee:	6023      	str	r3, [r4, #0]
 800baf0:	e00e      	b.n	800bb10 <_malloc_r+0xa0>
 800baf2:	6822      	ldr	r2, [r4, #0]
 800baf4:	1b52      	subs	r2, r2, r5
 800baf6:	d41e      	bmi.n	800bb36 <_malloc_r+0xc6>
 800baf8:	2a0b      	cmp	r2, #11
 800bafa:	d916      	bls.n	800bb2a <_malloc_r+0xba>
 800bafc:	1961      	adds	r1, r4, r5
 800bafe:	42a3      	cmp	r3, r4
 800bb00:	6025      	str	r5, [r4, #0]
 800bb02:	bf18      	it	ne
 800bb04:	6059      	strne	r1, [r3, #4]
 800bb06:	6863      	ldr	r3, [r4, #4]
 800bb08:	bf08      	it	eq
 800bb0a:	6031      	streq	r1, [r6, #0]
 800bb0c:	5162      	str	r2, [r4, r5]
 800bb0e:	604b      	str	r3, [r1, #4]
 800bb10:	4638      	mov	r0, r7
 800bb12:	f104 060b 	add.w	r6, r4, #11
 800bb16:	f000 f877 	bl	800bc08 <__malloc_unlock>
 800bb1a:	f026 0607 	bic.w	r6, r6, #7
 800bb1e:	1d23      	adds	r3, r4, #4
 800bb20:	1af2      	subs	r2, r6, r3
 800bb22:	d0b6      	beq.n	800ba92 <_malloc_r+0x22>
 800bb24:	1b9b      	subs	r3, r3, r6
 800bb26:	50a3      	str	r3, [r4, r2]
 800bb28:	e7b3      	b.n	800ba92 <_malloc_r+0x22>
 800bb2a:	6862      	ldr	r2, [r4, #4]
 800bb2c:	42a3      	cmp	r3, r4
 800bb2e:	bf0c      	ite	eq
 800bb30:	6032      	streq	r2, [r6, #0]
 800bb32:	605a      	strne	r2, [r3, #4]
 800bb34:	e7ec      	b.n	800bb10 <_malloc_r+0xa0>
 800bb36:	4623      	mov	r3, r4
 800bb38:	6864      	ldr	r4, [r4, #4]
 800bb3a:	e7b2      	b.n	800baa2 <_malloc_r+0x32>
 800bb3c:	4634      	mov	r4, r6
 800bb3e:	6876      	ldr	r6, [r6, #4]
 800bb40:	e7b9      	b.n	800bab6 <_malloc_r+0x46>
 800bb42:	230c      	movs	r3, #12
 800bb44:	4638      	mov	r0, r7
 800bb46:	603b      	str	r3, [r7, #0]
 800bb48:	f000 f85e 	bl	800bc08 <__malloc_unlock>
 800bb4c:	e7a1      	b.n	800ba92 <_malloc_r+0x22>
 800bb4e:	6025      	str	r5, [r4, #0]
 800bb50:	e7de      	b.n	800bb10 <_malloc_r+0xa0>
 800bb52:	bf00      	nop
 800bb54:	20000520 	.word	0x20000520

0800bb58 <_sbrk_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	4d05      	ldr	r5, [pc, #20]	; (800bb74 <_sbrk_r+0x1c>)
 800bb5e:	4604      	mov	r4, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	602b      	str	r3, [r5, #0]
 800bb64:	f7f6 ff40 	bl	80029e8 <_sbrk>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_sbrk_r+0x1a>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_sbrk_r+0x1a>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	20000528 	.word	0x20000528

0800bb78 <__assert_func>:
 800bb78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb7a:	4614      	mov	r4, r2
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <__assert_func+0x2c>)
 800bb80:	4605      	mov	r5, r0
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68d8      	ldr	r0, [r3, #12]
 800bb86:	b14c      	cbz	r4, 800bb9c <__assert_func+0x24>
 800bb88:	4b07      	ldr	r3, [pc, #28]	; (800bba8 <__assert_func+0x30>)
 800bb8a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb8e:	9100      	str	r1, [sp, #0]
 800bb90:	462b      	mov	r3, r5
 800bb92:	4906      	ldr	r1, [pc, #24]	; (800bbac <__assert_func+0x34>)
 800bb94:	f000 f80e 	bl	800bbb4 <fiprintf>
 800bb98:	f000 fa62 	bl	800c060 <abort>
 800bb9c:	4b04      	ldr	r3, [pc, #16]	; (800bbb0 <__assert_func+0x38>)
 800bb9e:	461c      	mov	r4, r3
 800bba0:	e7f3      	b.n	800bb8a <__assert_func+0x12>
 800bba2:	bf00      	nop
 800bba4:	20000014 	.word	0x20000014
 800bba8:	0800cc74 	.word	0x0800cc74
 800bbac:	0800cc81 	.word	0x0800cc81
 800bbb0:	0800ccaf 	.word	0x0800ccaf

0800bbb4 <fiprintf>:
 800bbb4:	b40e      	push	{r1, r2, r3}
 800bbb6:	b503      	push	{r0, r1, lr}
 800bbb8:	4601      	mov	r1, r0
 800bbba:	ab03      	add	r3, sp, #12
 800bbbc:	4805      	ldr	r0, [pc, #20]	; (800bbd4 <fiprintf+0x20>)
 800bbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc2:	6800      	ldr	r0, [r0, #0]
 800bbc4:	9301      	str	r3, [sp, #4]
 800bbc6:	f000 f84d 	bl	800bc64 <_vfiprintf_r>
 800bbca:	b002      	add	sp, #8
 800bbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbd0:	b003      	add	sp, #12
 800bbd2:	4770      	bx	lr
 800bbd4:	20000014 	.word	0x20000014

0800bbd8 <__ascii_mbtowc>:
 800bbd8:	b082      	sub	sp, #8
 800bbda:	b901      	cbnz	r1, 800bbde <__ascii_mbtowc+0x6>
 800bbdc:	a901      	add	r1, sp, #4
 800bbde:	b142      	cbz	r2, 800bbf2 <__ascii_mbtowc+0x1a>
 800bbe0:	b14b      	cbz	r3, 800bbf6 <__ascii_mbtowc+0x1e>
 800bbe2:	7813      	ldrb	r3, [r2, #0]
 800bbe4:	600b      	str	r3, [r1, #0]
 800bbe6:	7812      	ldrb	r2, [r2, #0]
 800bbe8:	1e10      	subs	r0, r2, #0
 800bbea:	bf18      	it	ne
 800bbec:	2001      	movne	r0, #1
 800bbee:	b002      	add	sp, #8
 800bbf0:	4770      	bx	lr
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	e7fb      	b.n	800bbee <__ascii_mbtowc+0x16>
 800bbf6:	f06f 0001 	mvn.w	r0, #1
 800bbfa:	e7f8      	b.n	800bbee <__ascii_mbtowc+0x16>

0800bbfc <__malloc_lock>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	; (800bc04 <__malloc_lock+0x8>)
 800bbfe:	f000 bbeb 	b.w	800c3d8 <__retarget_lock_acquire_recursive>
 800bc02:	bf00      	nop
 800bc04:	2000052c 	.word	0x2000052c

0800bc08 <__malloc_unlock>:
 800bc08:	4801      	ldr	r0, [pc, #4]	; (800bc10 <__malloc_unlock+0x8>)
 800bc0a:	f000 bbe6 	b.w	800c3da <__retarget_lock_release_recursive>
 800bc0e:	bf00      	nop
 800bc10:	2000052c 	.word	0x2000052c

0800bc14 <__sfputc_r>:
 800bc14:	6893      	ldr	r3, [r2, #8]
 800bc16:	b410      	push	{r4}
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	6093      	str	r3, [r2, #8]
 800bc1e:	da07      	bge.n	800bc30 <__sfputc_r+0x1c>
 800bc20:	6994      	ldr	r4, [r2, #24]
 800bc22:	42a3      	cmp	r3, r4
 800bc24:	db01      	blt.n	800bc2a <__sfputc_r+0x16>
 800bc26:	290a      	cmp	r1, #10
 800bc28:	d102      	bne.n	800bc30 <__sfputc_r+0x1c>
 800bc2a:	bc10      	pop	{r4}
 800bc2c:	f000 b94a 	b.w	800bec4 <__swbuf_r>
 800bc30:	6813      	ldr	r3, [r2, #0]
 800bc32:	1c58      	adds	r0, r3, #1
 800bc34:	6010      	str	r0, [r2, #0]
 800bc36:	7019      	strb	r1, [r3, #0]
 800bc38:	4608      	mov	r0, r1
 800bc3a:	bc10      	pop	{r4}
 800bc3c:	4770      	bx	lr

0800bc3e <__sfputs_r>:
 800bc3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc40:	4606      	mov	r6, r0
 800bc42:	460f      	mov	r7, r1
 800bc44:	4614      	mov	r4, r2
 800bc46:	18d5      	adds	r5, r2, r3
 800bc48:	42ac      	cmp	r4, r5
 800bc4a:	d101      	bne.n	800bc50 <__sfputs_r+0x12>
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	e007      	b.n	800bc60 <__sfputs_r+0x22>
 800bc50:	463a      	mov	r2, r7
 800bc52:	4630      	mov	r0, r6
 800bc54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc58:	f7ff ffdc 	bl	800bc14 <__sfputc_r>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d1f3      	bne.n	800bc48 <__sfputs_r+0xa>
 800bc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc64 <_vfiprintf_r>:
 800bc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc68:	460d      	mov	r5, r1
 800bc6a:	4614      	mov	r4, r2
 800bc6c:	4698      	mov	r8, r3
 800bc6e:	4606      	mov	r6, r0
 800bc70:	b09d      	sub	sp, #116	; 0x74
 800bc72:	b118      	cbz	r0, 800bc7c <_vfiprintf_r+0x18>
 800bc74:	6983      	ldr	r3, [r0, #24]
 800bc76:	b90b      	cbnz	r3, 800bc7c <_vfiprintf_r+0x18>
 800bc78:	f000 fb10 	bl	800c29c <__sinit>
 800bc7c:	4b89      	ldr	r3, [pc, #548]	; (800bea4 <_vfiprintf_r+0x240>)
 800bc7e:	429d      	cmp	r5, r3
 800bc80:	d11b      	bne.n	800bcba <_vfiprintf_r+0x56>
 800bc82:	6875      	ldr	r5, [r6, #4]
 800bc84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc86:	07d9      	lsls	r1, r3, #31
 800bc88:	d405      	bmi.n	800bc96 <_vfiprintf_r+0x32>
 800bc8a:	89ab      	ldrh	r3, [r5, #12]
 800bc8c:	059a      	lsls	r2, r3, #22
 800bc8e:	d402      	bmi.n	800bc96 <_vfiprintf_r+0x32>
 800bc90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc92:	f000 fba1 	bl	800c3d8 <__retarget_lock_acquire_recursive>
 800bc96:	89ab      	ldrh	r3, [r5, #12]
 800bc98:	071b      	lsls	r3, r3, #28
 800bc9a:	d501      	bpl.n	800bca0 <_vfiprintf_r+0x3c>
 800bc9c:	692b      	ldr	r3, [r5, #16]
 800bc9e:	b9eb      	cbnz	r3, 800bcdc <_vfiprintf_r+0x78>
 800bca0:	4629      	mov	r1, r5
 800bca2:	4630      	mov	r0, r6
 800bca4:	f000 f96e 	bl	800bf84 <__swsetup_r>
 800bca8:	b1c0      	cbz	r0, 800bcdc <_vfiprintf_r+0x78>
 800bcaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcac:	07dc      	lsls	r4, r3, #31
 800bcae:	d50e      	bpl.n	800bcce <_vfiprintf_r+0x6a>
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	b01d      	add	sp, #116	; 0x74
 800bcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcba:	4b7b      	ldr	r3, [pc, #492]	; (800bea8 <_vfiprintf_r+0x244>)
 800bcbc:	429d      	cmp	r5, r3
 800bcbe:	d101      	bne.n	800bcc4 <_vfiprintf_r+0x60>
 800bcc0:	68b5      	ldr	r5, [r6, #8]
 800bcc2:	e7df      	b.n	800bc84 <_vfiprintf_r+0x20>
 800bcc4:	4b79      	ldr	r3, [pc, #484]	; (800beac <_vfiprintf_r+0x248>)
 800bcc6:	429d      	cmp	r5, r3
 800bcc8:	bf08      	it	eq
 800bcca:	68f5      	ldreq	r5, [r6, #12]
 800bccc:	e7da      	b.n	800bc84 <_vfiprintf_r+0x20>
 800bcce:	89ab      	ldrh	r3, [r5, #12]
 800bcd0:	0598      	lsls	r0, r3, #22
 800bcd2:	d4ed      	bmi.n	800bcb0 <_vfiprintf_r+0x4c>
 800bcd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcd6:	f000 fb80 	bl	800c3da <__retarget_lock_release_recursive>
 800bcda:	e7e9      	b.n	800bcb0 <_vfiprintf_r+0x4c>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	9309      	str	r3, [sp, #36]	; 0x24
 800bce0:	2320      	movs	r3, #32
 800bce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bce6:	2330      	movs	r3, #48	; 0x30
 800bce8:	f04f 0901 	mov.w	r9, #1
 800bcec:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcf0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800beb0 <_vfiprintf_r+0x24c>
 800bcf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcf8:	4623      	mov	r3, r4
 800bcfa:	469a      	mov	sl, r3
 800bcfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd00:	b10a      	cbz	r2, 800bd06 <_vfiprintf_r+0xa2>
 800bd02:	2a25      	cmp	r2, #37	; 0x25
 800bd04:	d1f9      	bne.n	800bcfa <_vfiprintf_r+0x96>
 800bd06:	ebba 0b04 	subs.w	fp, sl, r4
 800bd0a:	d00b      	beq.n	800bd24 <_vfiprintf_r+0xc0>
 800bd0c:	465b      	mov	r3, fp
 800bd0e:	4622      	mov	r2, r4
 800bd10:	4629      	mov	r1, r5
 800bd12:	4630      	mov	r0, r6
 800bd14:	f7ff ff93 	bl	800bc3e <__sfputs_r>
 800bd18:	3001      	adds	r0, #1
 800bd1a:	f000 80aa 	beq.w	800be72 <_vfiprintf_r+0x20e>
 800bd1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd20:	445a      	add	r2, fp
 800bd22:	9209      	str	r2, [sp, #36]	; 0x24
 800bd24:	f89a 3000 	ldrb.w	r3, [sl]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	f000 80a2 	beq.w	800be72 <_vfiprintf_r+0x20e>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	f04f 32ff 	mov.w	r2, #4294967295
 800bd34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd38:	f10a 0a01 	add.w	sl, sl, #1
 800bd3c:	9304      	str	r3, [sp, #16]
 800bd3e:	9307      	str	r3, [sp, #28]
 800bd40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd44:	931a      	str	r3, [sp, #104]	; 0x68
 800bd46:	4654      	mov	r4, sl
 800bd48:	2205      	movs	r2, #5
 800bd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd4e:	4858      	ldr	r0, [pc, #352]	; (800beb0 <_vfiprintf_r+0x24c>)
 800bd50:	f7ff fa74 	bl	800b23c <memchr>
 800bd54:	9a04      	ldr	r2, [sp, #16]
 800bd56:	b9d8      	cbnz	r0, 800bd90 <_vfiprintf_r+0x12c>
 800bd58:	06d1      	lsls	r1, r2, #27
 800bd5a:	bf44      	itt	mi
 800bd5c:	2320      	movmi	r3, #32
 800bd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd62:	0713      	lsls	r3, r2, #28
 800bd64:	bf44      	itt	mi
 800bd66:	232b      	movmi	r3, #43	; 0x2b
 800bd68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd70:	2b2a      	cmp	r3, #42	; 0x2a
 800bd72:	d015      	beq.n	800bda0 <_vfiprintf_r+0x13c>
 800bd74:	4654      	mov	r4, sl
 800bd76:	2000      	movs	r0, #0
 800bd78:	f04f 0c0a 	mov.w	ip, #10
 800bd7c:	9a07      	ldr	r2, [sp, #28]
 800bd7e:	4621      	mov	r1, r4
 800bd80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd84:	3b30      	subs	r3, #48	; 0x30
 800bd86:	2b09      	cmp	r3, #9
 800bd88:	d94e      	bls.n	800be28 <_vfiprintf_r+0x1c4>
 800bd8a:	b1b0      	cbz	r0, 800bdba <_vfiprintf_r+0x156>
 800bd8c:	9207      	str	r2, [sp, #28]
 800bd8e:	e014      	b.n	800bdba <_vfiprintf_r+0x156>
 800bd90:	eba0 0308 	sub.w	r3, r0, r8
 800bd94:	fa09 f303 	lsl.w	r3, r9, r3
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	46a2      	mov	sl, r4
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	e7d2      	b.n	800bd46 <_vfiprintf_r+0xe2>
 800bda0:	9b03      	ldr	r3, [sp, #12]
 800bda2:	1d19      	adds	r1, r3, #4
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	9103      	str	r1, [sp, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bfbb      	ittet	lt
 800bdac:	425b      	neglt	r3, r3
 800bdae:	f042 0202 	orrlt.w	r2, r2, #2
 800bdb2:	9307      	strge	r3, [sp, #28]
 800bdb4:	9307      	strlt	r3, [sp, #28]
 800bdb6:	bfb8      	it	lt
 800bdb8:	9204      	strlt	r2, [sp, #16]
 800bdba:	7823      	ldrb	r3, [r4, #0]
 800bdbc:	2b2e      	cmp	r3, #46	; 0x2e
 800bdbe:	d10c      	bne.n	800bdda <_vfiprintf_r+0x176>
 800bdc0:	7863      	ldrb	r3, [r4, #1]
 800bdc2:	2b2a      	cmp	r3, #42	; 0x2a
 800bdc4:	d135      	bne.n	800be32 <_vfiprintf_r+0x1ce>
 800bdc6:	9b03      	ldr	r3, [sp, #12]
 800bdc8:	3402      	adds	r4, #2
 800bdca:	1d1a      	adds	r2, r3, #4
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	9203      	str	r2, [sp, #12]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	bfb8      	it	lt
 800bdd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdd8:	9305      	str	r3, [sp, #20]
 800bdda:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800beb4 <_vfiprintf_r+0x250>
 800bdde:	2203      	movs	r2, #3
 800bde0:	4650      	mov	r0, sl
 800bde2:	7821      	ldrb	r1, [r4, #0]
 800bde4:	f7ff fa2a 	bl	800b23c <memchr>
 800bde8:	b140      	cbz	r0, 800bdfc <_vfiprintf_r+0x198>
 800bdea:	2340      	movs	r3, #64	; 0x40
 800bdec:	eba0 000a 	sub.w	r0, r0, sl
 800bdf0:	fa03 f000 	lsl.w	r0, r3, r0
 800bdf4:	9b04      	ldr	r3, [sp, #16]
 800bdf6:	3401      	adds	r4, #1
 800bdf8:	4303      	orrs	r3, r0
 800bdfa:	9304      	str	r3, [sp, #16]
 800bdfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be00:	2206      	movs	r2, #6
 800be02:	482d      	ldr	r0, [pc, #180]	; (800beb8 <_vfiprintf_r+0x254>)
 800be04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be08:	f7ff fa18 	bl	800b23c <memchr>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	d03f      	beq.n	800be90 <_vfiprintf_r+0x22c>
 800be10:	4b2a      	ldr	r3, [pc, #168]	; (800bebc <_vfiprintf_r+0x258>)
 800be12:	bb1b      	cbnz	r3, 800be5c <_vfiprintf_r+0x1f8>
 800be14:	9b03      	ldr	r3, [sp, #12]
 800be16:	3307      	adds	r3, #7
 800be18:	f023 0307 	bic.w	r3, r3, #7
 800be1c:	3308      	adds	r3, #8
 800be1e:	9303      	str	r3, [sp, #12]
 800be20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be22:	443b      	add	r3, r7
 800be24:	9309      	str	r3, [sp, #36]	; 0x24
 800be26:	e767      	b.n	800bcf8 <_vfiprintf_r+0x94>
 800be28:	460c      	mov	r4, r1
 800be2a:	2001      	movs	r0, #1
 800be2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be30:	e7a5      	b.n	800bd7e <_vfiprintf_r+0x11a>
 800be32:	2300      	movs	r3, #0
 800be34:	f04f 0c0a 	mov.w	ip, #10
 800be38:	4619      	mov	r1, r3
 800be3a:	3401      	adds	r4, #1
 800be3c:	9305      	str	r3, [sp, #20]
 800be3e:	4620      	mov	r0, r4
 800be40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be44:	3a30      	subs	r2, #48	; 0x30
 800be46:	2a09      	cmp	r2, #9
 800be48:	d903      	bls.n	800be52 <_vfiprintf_r+0x1ee>
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0c5      	beq.n	800bdda <_vfiprintf_r+0x176>
 800be4e:	9105      	str	r1, [sp, #20]
 800be50:	e7c3      	b.n	800bdda <_vfiprintf_r+0x176>
 800be52:	4604      	mov	r4, r0
 800be54:	2301      	movs	r3, #1
 800be56:	fb0c 2101 	mla	r1, ip, r1, r2
 800be5a:	e7f0      	b.n	800be3e <_vfiprintf_r+0x1da>
 800be5c:	ab03      	add	r3, sp, #12
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	462a      	mov	r2, r5
 800be62:	4630      	mov	r0, r6
 800be64:	4b16      	ldr	r3, [pc, #88]	; (800bec0 <_vfiprintf_r+0x25c>)
 800be66:	a904      	add	r1, sp, #16
 800be68:	f7fd ff9e 	bl	8009da8 <_printf_float>
 800be6c:	4607      	mov	r7, r0
 800be6e:	1c78      	adds	r0, r7, #1
 800be70:	d1d6      	bne.n	800be20 <_vfiprintf_r+0x1bc>
 800be72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be74:	07d9      	lsls	r1, r3, #31
 800be76:	d405      	bmi.n	800be84 <_vfiprintf_r+0x220>
 800be78:	89ab      	ldrh	r3, [r5, #12]
 800be7a:	059a      	lsls	r2, r3, #22
 800be7c:	d402      	bmi.n	800be84 <_vfiprintf_r+0x220>
 800be7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be80:	f000 faab 	bl	800c3da <__retarget_lock_release_recursive>
 800be84:	89ab      	ldrh	r3, [r5, #12]
 800be86:	065b      	lsls	r3, r3, #25
 800be88:	f53f af12 	bmi.w	800bcb0 <_vfiprintf_r+0x4c>
 800be8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be8e:	e711      	b.n	800bcb4 <_vfiprintf_r+0x50>
 800be90:	ab03      	add	r3, sp, #12
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	462a      	mov	r2, r5
 800be96:	4630      	mov	r0, r6
 800be98:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <_vfiprintf_r+0x25c>)
 800be9a:	a904      	add	r1, sp, #16
 800be9c:	f7fe fa20 	bl	800a2e0 <_printf_i>
 800bea0:	e7e4      	b.n	800be6c <_vfiprintf_r+0x208>
 800bea2:	bf00      	nop
 800bea4:	0800cdec 	.word	0x0800cdec
 800bea8:	0800ce0c 	.word	0x0800ce0c
 800beac:	0800cdcc 	.word	0x0800cdcc
 800beb0:	0800ccba 	.word	0x0800ccba
 800beb4:	0800ccc0 	.word	0x0800ccc0
 800beb8:	0800ccc4 	.word	0x0800ccc4
 800bebc:	08009da9 	.word	0x08009da9
 800bec0:	0800bc3f 	.word	0x0800bc3f

0800bec4 <__swbuf_r>:
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec6:	460e      	mov	r6, r1
 800bec8:	4614      	mov	r4, r2
 800beca:	4605      	mov	r5, r0
 800becc:	b118      	cbz	r0, 800bed6 <__swbuf_r+0x12>
 800bece:	6983      	ldr	r3, [r0, #24]
 800bed0:	b90b      	cbnz	r3, 800bed6 <__swbuf_r+0x12>
 800bed2:	f000 f9e3 	bl	800c29c <__sinit>
 800bed6:	4b21      	ldr	r3, [pc, #132]	; (800bf5c <__swbuf_r+0x98>)
 800bed8:	429c      	cmp	r4, r3
 800beda:	d12b      	bne.n	800bf34 <__swbuf_r+0x70>
 800bedc:	686c      	ldr	r4, [r5, #4]
 800bede:	69a3      	ldr	r3, [r4, #24]
 800bee0:	60a3      	str	r3, [r4, #8]
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	071a      	lsls	r2, r3, #28
 800bee6:	d52f      	bpl.n	800bf48 <__swbuf_r+0x84>
 800bee8:	6923      	ldr	r3, [r4, #16]
 800beea:	b36b      	cbz	r3, 800bf48 <__swbuf_r+0x84>
 800beec:	6923      	ldr	r3, [r4, #16]
 800beee:	6820      	ldr	r0, [r4, #0]
 800bef0:	b2f6      	uxtb	r6, r6
 800bef2:	1ac0      	subs	r0, r0, r3
 800bef4:	6963      	ldr	r3, [r4, #20]
 800bef6:	4637      	mov	r7, r6
 800bef8:	4283      	cmp	r3, r0
 800befa:	dc04      	bgt.n	800bf06 <__swbuf_r+0x42>
 800befc:	4621      	mov	r1, r4
 800befe:	4628      	mov	r0, r5
 800bf00:	f000 f938 	bl	800c174 <_fflush_r>
 800bf04:	bb30      	cbnz	r0, 800bf54 <__swbuf_r+0x90>
 800bf06:	68a3      	ldr	r3, [r4, #8]
 800bf08:	3001      	adds	r0, #1
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	60a3      	str	r3, [r4, #8]
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	1c5a      	adds	r2, r3, #1
 800bf12:	6022      	str	r2, [r4, #0]
 800bf14:	701e      	strb	r6, [r3, #0]
 800bf16:	6963      	ldr	r3, [r4, #20]
 800bf18:	4283      	cmp	r3, r0
 800bf1a:	d004      	beq.n	800bf26 <__swbuf_r+0x62>
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	07db      	lsls	r3, r3, #31
 800bf20:	d506      	bpl.n	800bf30 <__swbuf_r+0x6c>
 800bf22:	2e0a      	cmp	r6, #10
 800bf24:	d104      	bne.n	800bf30 <__swbuf_r+0x6c>
 800bf26:	4621      	mov	r1, r4
 800bf28:	4628      	mov	r0, r5
 800bf2a:	f000 f923 	bl	800c174 <_fflush_r>
 800bf2e:	b988      	cbnz	r0, 800bf54 <__swbuf_r+0x90>
 800bf30:	4638      	mov	r0, r7
 800bf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf34:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <__swbuf_r+0x9c>)
 800bf36:	429c      	cmp	r4, r3
 800bf38:	d101      	bne.n	800bf3e <__swbuf_r+0x7a>
 800bf3a:	68ac      	ldr	r4, [r5, #8]
 800bf3c:	e7cf      	b.n	800bede <__swbuf_r+0x1a>
 800bf3e:	4b09      	ldr	r3, [pc, #36]	; (800bf64 <__swbuf_r+0xa0>)
 800bf40:	429c      	cmp	r4, r3
 800bf42:	bf08      	it	eq
 800bf44:	68ec      	ldreq	r4, [r5, #12]
 800bf46:	e7ca      	b.n	800bede <__swbuf_r+0x1a>
 800bf48:	4621      	mov	r1, r4
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f000 f81a 	bl	800bf84 <__swsetup_r>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d0cb      	beq.n	800beec <__swbuf_r+0x28>
 800bf54:	f04f 37ff 	mov.w	r7, #4294967295
 800bf58:	e7ea      	b.n	800bf30 <__swbuf_r+0x6c>
 800bf5a:	bf00      	nop
 800bf5c:	0800cdec 	.word	0x0800cdec
 800bf60:	0800ce0c 	.word	0x0800ce0c
 800bf64:	0800cdcc 	.word	0x0800cdcc

0800bf68 <__ascii_wctomb>:
 800bf68:	4603      	mov	r3, r0
 800bf6a:	4608      	mov	r0, r1
 800bf6c:	b141      	cbz	r1, 800bf80 <__ascii_wctomb+0x18>
 800bf6e:	2aff      	cmp	r2, #255	; 0xff
 800bf70:	d904      	bls.n	800bf7c <__ascii_wctomb+0x14>
 800bf72:	228a      	movs	r2, #138	; 0x8a
 800bf74:	f04f 30ff 	mov.w	r0, #4294967295
 800bf78:	601a      	str	r2, [r3, #0]
 800bf7a:	4770      	bx	lr
 800bf7c:	2001      	movs	r0, #1
 800bf7e:	700a      	strb	r2, [r1, #0]
 800bf80:	4770      	bx	lr
	...

0800bf84 <__swsetup_r>:
 800bf84:	4b32      	ldr	r3, [pc, #200]	; (800c050 <__swsetup_r+0xcc>)
 800bf86:	b570      	push	{r4, r5, r6, lr}
 800bf88:	681d      	ldr	r5, [r3, #0]
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	460c      	mov	r4, r1
 800bf8e:	b125      	cbz	r5, 800bf9a <__swsetup_r+0x16>
 800bf90:	69ab      	ldr	r3, [r5, #24]
 800bf92:	b913      	cbnz	r3, 800bf9a <__swsetup_r+0x16>
 800bf94:	4628      	mov	r0, r5
 800bf96:	f000 f981 	bl	800c29c <__sinit>
 800bf9a:	4b2e      	ldr	r3, [pc, #184]	; (800c054 <__swsetup_r+0xd0>)
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	d10f      	bne.n	800bfc0 <__swsetup_r+0x3c>
 800bfa0:	686c      	ldr	r4, [r5, #4]
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfa8:	0719      	lsls	r1, r3, #28
 800bfaa:	d42c      	bmi.n	800c006 <__swsetup_r+0x82>
 800bfac:	06dd      	lsls	r5, r3, #27
 800bfae:	d411      	bmi.n	800bfd4 <__swsetup_r+0x50>
 800bfb0:	2309      	movs	r3, #9
 800bfb2:	6033      	str	r3, [r6, #0]
 800bfb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfbc:	81a3      	strh	r3, [r4, #12]
 800bfbe:	e03e      	b.n	800c03e <__swsetup_r+0xba>
 800bfc0:	4b25      	ldr	r3, [pc, #148]	; (800c058 <__swsetup_r+0xd4>)
 800bfc2:	429c      	cmp	r4, r3
 800bfc4:	d101      	bne.n	800bfca <__swsetup_r+0x46>
 800bfc6:	68ac      	ldr	r4, [r5, #8]
 800bfc8:	e7eb      	b.n	800bfa2 <__swsetup_r+0x1e>
 800bfca:	4b24      	ldr	r3, [pc, #144]	; (800c05c <__swsetup_r+0xd8>)
 800bfcc:	429c      	cmp	r4, r3
 800bfce:	bf08      	it	eq
 800bfd0:	68ec      	ldreq	r4, [r5, #12]
 800bfd2:	e7e6      	b.n	800bfa2 <__swsetup_r+0x1e>
 800bfd4:	0758      	lsls	r0, r3, #29
 800bfd6:	d512      	bpl.n	800bffe <__swsetup_r+0x7a>
 800bfd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfda:	b141      	cbz	r1, 800bfee <__swsetup_r+0x6a>
 800bfdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfe0:	4299      	cmp	r1, r3
 800bfe2:	d002      	beq.n	800bfea <__swsetup_r+0x66>
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f7ff fcdb 	bl	800b9a0 <_free_r>
 800bfea:	2300      	movs	r3, #0
 800bfec:	6363      	str	r3, [r4, #52]	; 0x34
 800bfee:	89a3      	ldrh	r3, [r4, #12]
 800bff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bff4:	81a3      	strh	r3, [r4, #12]
 800bff6:	2300      	movs	r3, #0
 800bff8:	6063      	str	r3, [r4, #4]
 800bffa:	6923      	ldr	r3, [r4, #16]
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	89a3      	ldrh	r3, [r4, #12]
 800c000:	f043 0308 	orr.w	r3, r3, #8
 800c004:	81a3      	strh	r3, [r4, #12]
 800c006:	6923      	ldr	r3, [r4, #16]
 800c008:	b94b      	cbnz	r3, 800c01e <__swsetup_r+0x9a>
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c014:	d003      	beq.n	800c01e <__swsetup_r+0x9a>
 800c016:	4621      	mov	r1, r4
 800c018:	4630      	mov	r0, r6
 800c01a:	f000 fa05 	bl	800c428 <__smakebuf_r>
 800c01e:	89a0      	ldrh	r0, [r4, #12]
 800c020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c024:	f010 0301 	ands.w	r3, r0, #1
 800c028:	d00a      	beq.n	800c040 <__swsetup_r+0xbc>
 800c02a:	2300      	movs	r3, #0
 800c02c:	60a3      	str	r3, [r4, #8]
 800c02e:	6963      	ldr	r3, [r4, #20]
 800c030:	425b      	negs	r3, r3
 800c032:	61a3      	str	r3, [r4, #24]
 800c034:	6923      	ldr	r3, [r4, #16]
 800c036:	b943      	cbnz	r3, 800c04a <__swsetup_r+0xc6>
 800c038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c03c:	d1ba      	bne.n	800bfb4 <__swsetup_r+0x30>
 800c03e:	bd70      	pop	{r4, r5, r6, pc}
 800c040:	0781      	lsls	r1, r0, #30
 800c042:	bf58      	it	pl
 800c044:	6963      	ldrpl	r3, [r4, #20]
 800c046:	60a3      	str	r3, [r4, #8]
 800c048:	e7f4      	b.n	800c034 <__swsetup_r+0xb0>
 800c04a:	2000      	movs	r0, #0
 800c04c:	e7f7      	b.n	800c03e <__swsetup_r+0xba>
 800c04e:	bf00      	nop
 800c050:	20000014 	.word	0x20000014
 800c054:	0800cdec 	.word	0x0800cdec
 800c058:	0800ce0c 	.word	0x0800ce0c
 800c05c:	0800cdcc 	.word	0x0800cdcc

0800c060 <abort>:
 800c060:	2006      	movs	r0, #6
 800c062:	b508      	push	{r3, lr}
 800c064:	f000 fa48 	bl	800c4f8 <raise>
 800c068:	2001      	movs	r0, #1
 800c06a:	f7f6 fc4a 	bl	8002902 <_exit>
	...

0800c070 <__sflush_r>:
 800c070:	898a      	ldrh	r2, [r1, #12]
 800c072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c074:	4605      	mov	r5, r0
 800c076:	0710      	lsls	r0, r2, #28
 800c078:	460c      	mov	r4, r1
 800c07a:	d457      	bmi.n	800c12c <__sflush_r+0xbc>
 800c07c:	684b      	ldr	r3, [r1, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dc04      	bgt.n	800c08c <__sflush_r+0x1c>
 800c082:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c084:	2b00      	cmp	r3, #0
 800c086:	dc01      	bgt.n	800c08c <__sflush_r+0x1c>
 800c088:	2000      	movs	r0, #0
 800c08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c08c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c08e:	2e00      	cmp	r6, #0
 800c090:	d0fa      	beq.n	800c088 <__sflush_r+0x18>
 800c092:	2300      	movs	r3, #0
 800c094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c098:	682f      	ldr	r7, [r5, #0]
 800c09a:	602b      	str	r3, [r5, #0]
 800c09c:	d032      	beq.n	800c104 <__sflush_r+0x94>
 800c09e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0a0:	89a3      	ldrh	r3, [r4, #12]
 800c0a2:	075a      	lsls	r2, r3, #29
 800c0a4:	d505      	bpl.n	800c0b2 <__sflush_r+0x42>
 800c0a6:	6863      	ldr	r3, [r4, #4]
 800c0a8:	1ac0      	subs	r0, r0, r3
 800c0aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0ac:	b10b      	cbz	r3, 800c0b2 <__sflush_r+0x42>
 800c0ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0b0:	1ac0      	subs	r0, r0, r3
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	6a21      	ldr	r1, [r4, #32]
 800c0bc:	47b0      	blx	r6
 800c0be:	1c43      	adds	r3, r0, #1
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	d106      	bne.n	800c0d2 <__sflush_r+0x62>
 800c0c4:	6829      	ldr	r1, [r5, #0]
 800c0c6:	291d      	cmp	r1, #29
 800c0c8:	d82c      	bhi.n	800c124 <__sflush_r+0xb4>
 800c0ca:	4a29      	ldr	r2, [pc, #164]	; (800c170 <__sflush_r+0x100>)
 800c0cc:	40ca      	lsrs	r2, r1
 800c0ce:	07d6      	lsls	r6, r2, #31
 800c0d0:	d528      	bpl.n	800c124 <__sflush_r+0xb4>
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	6062      	str	r2, [r4, #4]
 800c0d6:	6922      	ldr	r2, [r4, #16]
 800c0d8:	04d9      	lsls	r1, r3, #19
 800c0da:	6022      	str	r2, [r4, #0]
 800c0dc:	d504      	bpl.n	800c0e8 <__sflush_r+0x78>
 800c0de:	1c42      	adds	r2, r0, #1
 800c0e0:	d101      	bne.n	800c0e6 <__sflush_r+0x76>
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	b903      	cbnz	r3, 800c0e8 <__sflush_r+0x78>
 800c0e6:	6560      	str	r0, [r4, #84]	; 0x54
 800c0e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0ea:	602f      	str	r7, [r5, #0]
 800c0ec:	2900      	cmp	r1, #0
 800c0ee:	d0cb      	beq.n	800c088 <__sflush_r+0x18>
 800c0f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0f4:	4299      	cmp	r1, r3
 800c0f6:	d002      	beq.n	800c0fe <__sflush_r+0x8e>
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f7ff fc51 	bl	800b9a0 <_free_r>
 800c0fe:	2000      	movs	r0, #0
 800c100:	6360      	str	r0, [r4, #52]	; 0x34
 800c102:	e7c2      	b.n	800c08a <__sflush_r+0x1a>
 800c104:	6a21      	ldr	r1, [r4, #32]
 800c106:	2301      	movs	r3, #1
 800c108:	4628      	mov	r0, r5
 800c10a:	47b0      	blx	r6
 800c10c:	1c41      	adds	r1, r0, #1
 800c10e:	d1c7      	bne.n	800c0a0 <__sflush_r+0x30>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d0c4      	beq.n	800c0a0 <__sflush_r+0x30>
 800c116:	2b1d      	cmp	r3, #29
 800c118:	d001      	beq.n	800c11e <__sflush_r+0xae>
 800c11a:	2b16      	cmp	r3, #22
 800c11c:	d101      	bne.n	800c122 <__sflush_r+0xb2>
 800c11e:	602f      	str	r7, [r5, #0]
 800c120:	e7b2      	b.n	800c088 <__sflush_r+0x18>
 800c122:	89a3      	ldrh	r3, [r4, #12]
 800c124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c128:	81a3      	strh	r3, [r4, #12]
 800c12a:	e7ae      	b.n	800c08a <__sflush_r+0x1a>
 800c12c:	690f      	ldr	r7, [r1, #16]
 800c12e:	2f00      	cmp	r7, #0
 800c130:	d0aa      	beq.n	800c088 <__sflush_r+0x18>
 800c132:	0793      	lsls	r3, r2, #30
 800c134:	bf18      	it	ne
 800c136:	2300      	movne	r3, #0
 800c138:	680e      	ldr	r6, [r1, #0]
 800c13a:	bf08      	it	eq
 800c13c:	694b      	ldreq	r3, [r1, #20]
 800c13e:	1bf6      	subs	r6, r6, r7
 800c140:	600f      	str	r7, [r1, #0]
 800c142:	608b      	str	r3, [r1, #8]
 800c144:	2e00      	cmp	r6, #0
 800c146:	dd9f      	ble.n	800c088 <__sflush_r+0x18>
 800c148:	4633      	mov	r3, r6
 800c14a:	463a      	mov	r2, r7
 800c14c:	4628      	mov	r0, r5
 800c14e:	6a21      	ldr	r1, [r4, #32]
 800c150:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c154:	47e0      	blx	ip
 800c156:	2800      	cmp	r0, #0
 800c158:	dc06      	bgt.n	800c168 <__sflush_r+0xf8>
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	f04f 30ff 	mov.w	r0, #4294967295
 800c160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c164:	81a3      	strh	r3, [r4, #12]
 800c166:	e790      	b.n	800c08a <__sflush_r+0x1a>
 800c168:	4407      	add	r7, r0
 800c16a:	1a36      	subs	r6, r6, r0
 800c16c:	e7ea      	b.n	800c144 <__sflush_r+0xd4>
 800c16e:	bf00      	nop
 800c170:	20400001 	.word	0x20400001

0800c174 <_fflush_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	690b      	ldr	r3, [r1, #16]
 800c178:	4605      	mov	r5, r0
 800c17a:	460c      	mov	r4, r1
 800c17c:	b913      	cbnz	r3, 800c184 <_fflush_r+0x10>
 800c17e:	2500      	movs	r5, #0
 800c180:	4628      	mov	r0, r5
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	b118      	cbz	r0, 800c18e <_fflush_r+0x1a>
 800c186:	6983      	ldr	r3, [r0, #24]
 800c188:	b90b      	cbnz	r3, 800c18e <_fflush_r+0x1a>
 800c18a:	f000 f887 	bl	800c29c <__sinit>
 800c18e:	4b14      	ldr	r3, [pc, #80]	; (800c1e0 <_fflush_r+0x6c>)
 800c190:	429c      	cmp	r4, r3
 800c192:	d11b      	bne.n	800c1cc <_fflush_r+0x58>
 800c194:	686c      	ldr	r4, [r5, #4]
 800c196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d0ef      	beq.n	800c17e <_fflush_r+0xa>
 800c19e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1a0:	07d0      	lsls	r0, r2, #31
 800c1a2:	d404      	bmi.n	800c1ae <_fflush_r+0x3a>
 800c1a4:	0599      	lsls	r1, r3, #22
 800c1a6:	d402      	bmi.n	800c1ae <_fflush_r+0x3a>
 800c1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1aa:	f000 f915 	bl	800c3d8 <__retarget_lock_acquire_recursive>
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	f7ff ff5d 	bl	800c070 <__sflush_r>
 800c1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	07da      	lsls	r2, r3, #31
 800c1bc:	d4e0      	bmi.n	800c180 <_fflush_r+0xc>
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	059b      	lsls	r3, r3, #22
 800c1c2:	d4dd      	bmi.n	800c180 <_fflush_r+0xc>
 800c1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1c6:	f000 f908 	bl	800c3da <__retarget_lock_release_recursive>
 800c1ca:	e7d9      	b.n	800c180 <_fflush_r+0xc>
 800c1cc:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <_fflush_r+0x70>)
 800c1ce:	429c      	cmp	r4, r3
 800c1d0:	d101      	bne.n	800c1d6 <_fflush_r+0x62>
 800c1d2:	68ac      	ldr	r4, [r5, #8]
 800c1d4:	e7df      	b.n	800c196 <_fflush_r+0x22>
 800c1d6:	4b04      	ldr	r3, [pc, #16]	; (800c1e8 <_fflush_r+0x74>)
 800c1d8:	429c      	cmp	r4, r3
 800c1da:	bf08      	it	eq
 800c1dc:	68ec      	ldreq	r4, [r5, #12]
 800c1de:	e7da      	b.n	800c196 <_fflush_r+0x22>
 800c1e0:	0800cdec 	.word	0x0800cdec
 800c1e4:	0800ce0c 	.word	0x0800ce0c
 800c1e8:	0800cdcc 	.word	0x0800cdcc

0800c1ec <std>:
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	b510      	push	{r4, lr}
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c1f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1fa:	6083      	str	r3, [r0, #8]
 800c1fc:	8181      	strh	r1, [r0, #12]
 800c1fe:	6643      	str	r3, [r0, #100]	; 0x64
 800c200:	81c2      	strh	r2, [r0, #14]
 800c202:	6183      	str	r3, [r0, #24]
 800c204:	4619      	mov	r1, r3
 800c206:	2208      	movs	r2, #8
 800c208:	305c      	adds	r0, #92	; 0x5c
 800c20a:	f7fd fd27 	bl	8009c5c <memset>
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <std+0x38>)
 800c210:	6224      	str	r4, [r4, #32]
 800c212:	6263      	str	r3, [r4, #36]	; 0x24
 800c214:	4b04      	ldr	r3, [pc, #16]	; (800c228 <std+0x3c>)
 800c216:	62a3      	str	r3, [r4, #40]	; 0x28
 800c218:	4b04      	ldr	r3, [pc, #16]	; (800c22c <std+0x40>)
 800c21a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c21c:	4b04      	ldr	r3, [pc, #16]	; (800c230 <std+0x44>)
 800c21e:	6323      	str	r3, [r4, #48]	; 0x30
 800c220:	bd10      	pop	{r4, pc}
 800c222:	bf00      	nop
 800c224:	0800c531 	.word	0x0800c531
 800c228:	0800c553 	.word	0x0800c553
 800c22c:	0800c58b 	.word	0x0800c58b
 800c230:	0800c5af 	.word	0x0800c5af

0800c234 <_cleanup_r>:
 800c234:	4901      	ldr	r1, [pc, #4]	; (800c23c <_cleanup_r+0x8>)
 800c236:	f000 b8af 	b.w	800c398 <_fwalk_reent>
 800c23a:	bf00      	nop
 800c23c:	0800c175 	.word	0x0800c175

0800c240 <__sfmoreglue>:
 800c240:	2268      	movs	r2, #104	; 0x68
 800c242:	b570      	push	{r4, r5, r6, lr}
 800c244:	1e4d      	subs	r5, r1, #1
 800c246:	4355      	muls	r5, r2
 800c248:	460e      	mov	r6, r1
 800c24a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c24e:	f7ff fc0f 	bl	800ba70 <_malloc_r>
 800c252:	4604      	mov	r4, r0
 800c254:	b140      	cbz	r0, 800c268 <__sfmoreglue+0x28>
 800c256:	2100      	movs	r1, #0
 800c258:	e9c0 1600 	strd	r1, r6, [r0]
 800c25c:	300c      	adds	r0, #12
 800c25e:	60a0      	str	r0, [r4, #8]
 800c260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c264:	f7fd fcfa 	bl	8009c5c <memset>
 800c268:	4620      	mov	r0, r4
 800c26a:	bd70      	pop	{r4, r5, r6, pc}

0800c26c <__sfp_lock_acquire>:
 800c26c:	4801      	ldr	r0, [pc, #4]	; (800c274 <__sfp_lock_acquire+0x8>)
 800c26e:	f000 b8b3 	b.w	800c3d8 <__retarget_lock_acquire_recursive>
 800c272:	bf00      	nop
 800c274:	2000052d 	.word	0x2000052d

0800c278 <__sfp_lock_release>:
 800c278:	4801      	ldr	r0, [pc, #4]	; (800c280 <__sfp_lock_release+0x8>)
 800c27a:	f000 b8ae 	b.w	800c3da <__retarget_lock_release_recursive>
 800c27e:	bf00      	nop
 800c280:	2000052d 	.word	0x2000052d

0800c284 <__sinit_lock_acquire>:
 800c284:	4801      	ldr	r0, [pc, #4]	; (800c28c <__sinit_lock_acquire+0x8>)
 800c286:	f000 b8a7 	b.w	800c3d8 <__retarget_lock_acquire_recursive>
 800c28a:	bf00      	nop
 800c28c:	2000052e 	.word	0x2000052e

0800c290 <__sinit_lock_release>:
 800c290:	4801      	ldr	r0, [pc, #4]	; (800c298 <__sinit_lock_release+0x8>)
 800c292:	f000 b8a2 	b.w	800c3da <__retarget_lock_release_recursive>
 800c296:	bf00      	nop
 800c298:	2000052e 	.word	0x2000052e

0800c29c <__sinit>:
 800c29c:	b510      	push	{r4, lr}
 800c29e:	4604      	mov	r4, r0
 800c2a0:	f7ff fff0 	bl	800c284 <__sinit_lock_acquire>
 800c2a4:	69a3      	ldr	r3, [r4, #24]
 800c2a6:	b11b      	cbz	r3, 800c2b0 <__sinit+0x14>
 800c2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ac:	f7ff bff0 	b.w	800c290 <__sinit_lock_release>
 800c2b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2b4:	6523      	str	r3, [r4, #80]	; 0x50
 800c2b6:	4b13      	ldr	r3, [pc, #76]	; (800c304 <__sinit+0x68>)
 800c2b8:	4a13      	ldr	r2, [pc, #76]	; (800c308 <__sinit+0x6c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2be:	42a3      	cmp	r3, r4
 800c2c0:	bf08      	it	eq
 800c2c2:	2301      	moveq	r3, #1
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	bf08      	it	eq
 800c2c8:	61a3      	streq	r3, [r4, #24]
 800c2ca:	f000 f81f 	bl	800c30c <__sfp>
 800c2ce:	6060      	str	r0, [r4, #4]
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 f81b 	bl	800c30c <__sfp>
 800c2d6:	60a0      	str	r0, [r4, #8]
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f000 f817 	bl	800c30c <__sfp>
 800c2de:	2200      	movs	r2, #0
 800c2e0:	2104      	movs	r1, #4
 800c2e2:	60e0      	str	r0, [r4, #12]
 800c2e4:	6860      	ldr	r0, [r4, #4]
 800c2e6:	f7ff ff81 	bl	800c1ec <std>
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	2109      	movs	r1, #9
 800c2ee:	68a0      	ldr	r0, [r4, #8]
 800c2f0:	f7ff ff7c 	bl	800c1ec <std>
 800c2f4:	2202      	movs	r2, #2
 800c2f6:	2112      	movs	r1, #18
 800c2f8:	68e0      	ldr	r0, [r4, #12]
 800c2fa:	f7ff ff77 	bl	800c1ec <std>
 800c2fe:	2301      	movs	r3, #1
 800c300:	61a3      	str	r3, [r4, #24]
 800c302:	e7d1      	b.n	800c2a8 <__sinit+0xc>
 800c304:	0800ca50 	.word	0x0800ca50
 800c308:	0800c235 	.word	0x0800c235

0800c30c <__sfp>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	4607      	mov	r7, r0
 800c310:	f7ff ffac 	bl	800c26c <__sfp_lock_acquire>
 800c314:	4b1e      	ldr	r3, [pc, #120]	; (800c390 <__sfp+0x84>)
 800c316:	681e      	ldr	r6, [r3, #0]
 800c318:	69b3      	ldr	r3, [r6, #24]
 800c31a:	b913      	cbnz	r3, 800c322 <__sfp+0x16>
 800c31c:	4630      	mov	r0, r6
 800c31e:	f7ff ffbd 	bl	800c29c <__sinit>
 800c322:	3648      	adds	r6, #72	; 0x48
 800c324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c328:	3b01      	subs	r3, #1
 800c32a:	d503      	bpl.n	800c334 <__sfp+0x28>
 800c32c:	6833      	ldr	r3, [r6, #0]
 800c32e:	b30b      	cbz	r3, 800c374 <__sfp+0x68>
 800c330:	6836      	ldr	r6, [r6, #0]
 800c332:	e7f7      	b.n	800c324 <__sfp+0x18>
 800c334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c338:	b9d5      	cbnz	r5, 800c370 <__sfp+0x64>
 800c33a:	4b16      	ldr	r3, [pc, #88]	; (800c394 <__sfp+0x88>)
 800c33c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c340:	60e3      	str	r3, [r4, #12]
 800c342:	6665      	str	r5, [r4, #100]	; 0x64
 800c344:	f000 f847 	bl	800c3d6 <__retarget_lock_init_recursive>
 800c348:	f7ff ff96 	bl	800c278 <__sfp_lock_release>
 800c34c:	2208      	movs	r2, #8
 800c34e:	4629      	mov	r1, r5
 800c350:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c354:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c358:	6025      	str	r5, [r4, #0]
 800c35a:	61a5      	str	r5, [r4, #24]
 800c35c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c360:	f7fd fc7c 	bl	8009c5c <memset>
 800c364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c36c:	4620      	mov	r0, r4
 800c36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c370:	3468      	adds	r4, #104	; 0x68
 800c372:	e7d9      	b.n	800c328 <__sfp+0x1c>
 800c374:	2104      	movs	r1, #4
 800c376:	4638      	mov	r0, r7
 800c378:	f7ff ff62 	bl	800c240 <__sfmoreglue>
 800c37c:	4604      	mov	r4, r0
 800c37e:	6030      	str	r0, [r6, #0]
 800c380:	2800      	cmp	r0, #0
 800c382:	d1d5      	bne.n	800c330 <__sfp+0x24>
 800c384:	f7ff ff78 	bl	800c278 <__sfp_lock_release>
 800c388:	230c      	movs	r3, #12
 800c38a:	603b      	str	r3, [r7, #0]
 800c38c:	e7ee      	b.n	800c36c <__sfp+0x60>
 800c38e:	bf00      	nop
 800c390:	0800ca50 	.word	0x0800ca50
 800c394:	ffff0001 	.word	0xffff0001

0800c398 <_fwalk_reent>:
 800c398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c39c:	4606      	mov	r6, r0
 800c39e:	4688      	mov	r8, r1
 800c3a0:	2700      	movs	r7, #0
 800c3a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3aa:	f1b9 0901 	subs.w	r9, r9, #1
 800c3ae:	d505      	bpl.n	800c3bc <_fwalk_reent+0x24>
 800c3b0:	6824      	ldr	r4, [r4, #0]
 800c3b2:	2c00      	cmp	r4, #0
 800c3b4:	d1f7      	bne.n	800c3a6 <_fwalk_reent+0xe>
 800c3b6:	4638      	mov	r0, r7
 800c3b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3bc:	89ab      	ldrh	r3, [r5, #12]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d907      	bls.n	800c3d2 <_fwalk_reent+0x3a>
 800c3c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	d003      	beq.n	800c3d2 <_fwalk_reent+0x3a>
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	47c0      	blx	r8
 800c3d0:	4307      	orrs	r7, r0
 800c3d2:	3568      	adds	r5, #104	; 0x68
 800c3d4:	e7e9      	b.n	800c3aa <_fwalk_reent+0x12>

0800c3d6 <__retarget_lock_init_recursive>:
 800c3d6:	4770      	bx	lr

0800c3d8 <__retarget_lock_acquire_recursive>:
 800c3d8:	4770      	bx	lr

0800c3da <__retarget_lock_release_recursive>:
 800c3da:	4770      	bx	lr

0800c3dc <__swhatbuf_r>:
 800c3dc:	b570      	push	{r4, r5, r6, lr}
 800c3de:	460e      	mov	r6, r1
 800c3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3e4:	4614      	mov	r4, r2
 800c3e6:	2900      	cmp	r1, #0
 800c3e8:	461d      	mov	r5, r3
 800c3ea:	b096      	sub	sp, #88	; 0x58
 800c3ec:	da08      	bge.n	800c400 <__swhatbuf_r+0x24>
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3f4:	602a      	str	r2, [r5, #0]
 800c3f6:	061a      	lsls	r2, r3, #24
 800c3f8:	d410      	bmi.n	800c41c <__swhatbuf_r+0x40>
 800c3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3fe:	e00e      	b.n	800c41e <__swhatbuf_r+0x42>
 800c400:	466a      	mov	r2, sp
 800c402:	f000 f8fb 	bl	800c5fc <_fstat_r>
 800c406:	2800      	cmp	r0, #0
 800c408:	dbf1      	blt.n	800c3ee <__swhatbuf_r+0x12>
 800c40a:	9a01      	ldr	r2, [sp, #4]
 800c40c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c410:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c414:	425a      	negs	r2, r3
 800c416:	415a      	adcs	r2, r3
 800c418:	602a      	str	r2, [r5, #0]
 800c41a:	e7ee      	b.n	800c3fa <__swhatbuf_r+0x1e>
 800c41c:	2340      	movs	r3, #64	; 0x40
 800c41e:	2000      	movs	r0, #0
 800c420:	6023      	str	r3, [r4, #0]
 800c422:	b016      	add	sp, #88	; 0x58
 800c424:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c428 <__smakebuf_r>:
 800c428:	898b      	ldrh	r3, [r1, #12]
 800c42a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c42c:	079d      	lsls	r5, r3, #30
 800c42e:	4606      	mov	r6, r0
 800c430:	460c      	mov	r4, r1
 800c432:	d507      	bpl.n	800c444 <__smakebuf_r+0x1c>
 800c434:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	2301      	movs	r3, #1
 800c43e:	6163      	str	r3, [r4, #20]
 800c440:	b002      	add	sp, #8
 800c442:	bd70      	pop	{r4, r5, r6, pc}
 800c444:	466a      	mov	r2, sp
 800c446:	ab01      	add	r3, sp, #4
 800c448:	f7ff ffc8 	bl	800c3dc <__swhatbuf_r>
 800c44c:	9900      	ldr	r1, [sp, #0]
 800c44e:	4605      	mov	r5, r0
 800c450:	4630      	mov	r0, r6
 800c452:	f7ff fb0d 	bl	800ba70 <_malloc_r>
 800c456:	b948      	cbnz	r0, 800c46c <__smakebuf_r+0x44>
 800c458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c45c:	059a      	lsls	r2, r3, #22
 800c45e:	d4ef      	bmi.n	800c440 <__smakebuf_r+0x18>
 800c460:	f023 0303 	bic.w	r3, r3, #3
 800c464:	f043 0302 	orr.w	r3, r3, #2
 800c468:	81a3      	strh	r3, [r4, #12]
 800c46a:	e7e3      	b.n	800c434 <__smakebuf_r+0xc>
 800c46c:	4b0d      	ldr	r3, [pc, #52]	; (800c4a4 <__smakebuf_r+0x7c>)
 800c46e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c470:	89a3      	ldrh	r3, [r4, #12]
 800c472:	6020      	str	r0, [r4, #0]
 800c474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	9b00      	ldr	r3, [sp, #0]
 800c47c:	6120      	str	r0, [r4, #16]
 800c47e:	6163      	str	r3, [r4, #20]
 800c480:	9b01      	ldr	r3, [sp, #4]
 800c482:	b15b      	cbz	r3, 800c49c <__smakebuf_r+0x74>
 800c484:	4630      	mov	r0, r6
 800c486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c48a:	f000 f8c9 	bl	800c620 <_isatty_r>
 800c48e:	b128      	cbz	r0, 800c49c <__smakebuf_r+0x74>
 800c490:	89a3      	ldrh	r3, [r4, #12]
 800c492:	f023 0303 	bic.w	r3, r3, #3
 800c496:	f043 0301 	orr.w	r3, r3, #1
 800c49a:	81a3      	strh	r3, [r4, #12]
 800c49c:	89a0      	ldrh	r0, [r4, #12]
 800c49e:	4305      	orrs	r5, r0
 800c4a0:	81a5      	strh	r5, [r4, #12]
 800c4a2:	e7cd      	b.n	800c440 <__smakebuf_r+0x18>
 800c4a4:	0800c235 	.word	0x0800c235

0800c4a8 <_raise_r>:
 800c4a8:	291f      	cmp	r1, #31
 800c4aa:	b538      	push	{r3, r4, r5, lr}
 800c4ac:	4604      	mov	r4, r0
 800c4ae:	460d      	mov	r5, r1
 800c4b0:	d904      	bls.n	800c4bc <_raise_r+0x14>
 800c4b2:	2316      	movs	r3, #22
 800c4b4:	6003      	str	r3, [r0, #0]
 800c4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ba:	bd38      	pop	{r3, r4, r5, pc}
 800c4bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4be:	b112      	cbz	r2, 800c4c6 <_raise_r+0x1e>
 800c4c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4c4:	b94b      	cbnz	r3, 800c4da <_raise_r+0x32>
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f000 f830 	bl	800c52c <_getpid_r>
 800c4cc:	462a      	mov	r2, r5
 800c4ce:	4601      	mov	r1, r0
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4d6:	f000 b817 	b.w	800c508 <_kill_r>
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d00a      	beq.n	800c4f4 <_raise_r+0x4c>
 800c4de:	1c59      	adds	r1, r3, #1
 800c4e0:	d103      	bne.n	800c4ea <_raise_r+0x42>
 800c4e2:	2316      	movs	r3, #22
 800c4e4:	6003      	str	r3, [r0, #0]
 800c4e6:	2001      	movs	r0, #1
 800c4e8:	e7e7      	b.n	800c4ba <_raise_r+0x12>
 800c4ea:	2400      	movs	r4, #0
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4f2:	4798      	blx	r3
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e7e0      	b.n	800c4ba <_raise_r+0x12>

0800c4f8 <raise>:
 800c4f8:	4b02      	ldr	r3, [pc, #8]	; (800c504 <raise+0xc>)
 800c4fa:	4601      	mov	r1, r0
 800c4fc:	6818      	ldr	r0, [r3, #0]
 800c4fe:	f7ff bfd3 	b.w	800c4a8 <_raise_r>
 800c502:	bf00      	nop
 800c504:	20000014 	.word	0x20000014

0800c508 <_kill_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	2300      	movs	r3, #0
 800c50c:	4d06      	ldr	r5, [pc, #24]	; (800c528 <_kill_r+0x20>)
 800c50e:	4604      	mov	r4, r0
 800c510:	4608      	mov	r0, r1
 800c512:	4611      	mov	r1, r2
 800c514:	602b      	str	r3, [r5, #0]
 800c516:	f7f6 f9e4 	bl	80028e2 <_kill>
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	d102      	bne.n	800c524 <_kill_r+0x1c>
 800c51e:	682b      	ldr	r3, [r5, #0]
 800c520:	b103      	cbz	r3, 800c524 <_kill_r+0x1c>
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	bd38      	pop	{r3, r4, r5, pc}
 800c526:	bf00      	nop
 800c528:	20000528 	.word	0x20000528

0800c52c <_getpid_r>:
 800c52c:	f7f6 b9d2 	b.w	80028d4 <_getpid>

0800c530 <__sread>:
 800c530:	b510      	push	{r4, lr}
 800c532:	460c      	mov	r4, r1
 800c534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c538:	f000 f894 	bl	800c664 <_read_r>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	bfab      	itete	ge
 800c540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c542:	89a3      	ldrhlt	r3, [r4, #12]
 800c544:	181b      	addge	r3, r3, r0
 800c546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c54a:	bfac      	ite	ge
 800c54c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c54e:	81a3      	strhlt	r3, [r4, #12]
 800c550:	bd10      	pop	{r4, pc}

0800c552 <__swrite>:
 800c552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c556:	461f      	mov	r7, r3
 800c558:	898b      	ldrh	r3, [r1, #12]
 800c55a:	4605      	mov	r5, r0
 800c55c:	05db      	lsls	r3, r3, #23
 800c55e:	460c      	mov	r4, r1
 800c560:	4616      	mov	r6, r2
 800c562:	d505      	bpl.n	800c570 <__swrite+0x1e>
 800c564:	2302      	movs	r3, #2
 800c566:	2200      	movs	r2, #0
 800c568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c56c:	f000 f868 	bl	800c640 <_lseek_r>
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	4632      	mov	r2, r6
 800c574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c578:	81a3      	strh	r3, [r4, #12]
 800c57a:	4628      	mov	r0, r5
 800c57c:	463b      	mov	r3, r7
 800c57e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c586:	f000 b817 	b.w	800c5b8 <_write_r>

0800c58a <__sseek>:
 800c58a:	b510      	push	{r4, lr}
 800c58c:	460c      	mov	r4, r1
 800c58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c592:	f000 f855 	bl	800c640 <_lseek_r>
 800c596:	1c43      	adds	r3, r0, #1
 800c598:	89a3      	ldrh	r3, [r4, #12]
 800c59a:	bf15      	itete	ne
 800c59c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c59e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5a6:	81a3      	strheq	r3, [r4, #12]
 800c5a8:	bf18      	it	ne
 800c5aa:	81a3      	strhne	r3, [r4, #12]
 800c5ac:	bd10      	pop	{r4, pc}

0800c5ae <__sclose>:
 800c5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b2:	f000 b813 	b.w	800c5dc <_close_r>
	...

0800c5b8 <_write_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4608      	mov	r0, r1
 800c5be:	4611      	mov	r1, r2
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	4d05      	ldr	r5, [pc, #20]	; (800c5d8 <_write_r+0x20>)
 800c5c4:	602a      	str	r2, [r5, #0]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	f7f6 f9c2 	bl	8002950 <_write>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d102      	bne.n	800c5d6 <_write_r+0x1e>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	b103      	cbz	r3, 800c5d6 <_write_r+0x1e>
 800c5d4:	6023      	str	r3, [r4, #0]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	20000528 	.word	0x20000528

0800c5dc <_close_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	2300      	movs	r3, #0
 800c5e0:	4d05      	ldr	r5, [pc, #20]	; (800c5f8 <_close_r+0x1c>)
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	4608      	mov	r0, r1
 800c5e6:	602b      	str	r3, [r5, #0]
 800c5e8:	f7f6 f9ce 	bl	8002988 <_close>
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	d102      	bne.n	800c5f6 <_close_r+0x1a>
 800c5f0:	682b      	ldr	r3, [r5, #0]
 800c5f2:	b103      	cbz	r3, 800c5f6 <_close_r+0x1a>
 800c5f4:	6023      	str	r3, [r4, #0]
 800c5f6:	bd38      	pop	{r3, r4, r5, pc}
 800c5f8:	20000528 	.word	0x20000528

0800c5fc <_fstat_r>:
 800c5fc:	b538      	push	{r3, r4, r5, lr}
 800c5fe:	2300      	movs	r3, #0
 800c600:	4d06      	ldr	r5, [pc, #24]	; (800c61c <_fstat_r+0x20>)
 800c602:	4604      	mov	r4, r0
 800c604:	4608      	mov	r0, r1
 800c606:	4611      	mov	r1, r2
 800c608:	602b      	str	r3, [r5, #0]
 800c60a:	f7f6 f9c8 	bl	800299e <_fstat>
 800c60e:	1c43      	adds	r3, r0, #1
 800c610:	d102      	bne.n	800c618 <_fstat_r+0x1c>
 800c612:	682b      	ldr	r3, [r5, #0]
 800c614:	b103      	cbz	r3, 800c618 <_fstat_r+0x1c>
 800c616:	6023      	str	r3, [r4, #0]
 800c618:	bd38      	pop	{r3, r4, r5, pc}
 800c61a:	bf00      	nop
 800c61c:	20000528 	.word	0x20000528

0800c620 <_isatty_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	2300      	movs	r3, #0
 800c624:	4d05      	ldr	r5, [pc, #20]	; (800c63c <_isatty_r+0x1c>)
 800c626:	4604      	mov	r4, r0
 800c628:	4608      	mov	r0, r1
 800c62a:	602b      	str	r3, [r5, #0]
 800c62c:	f7f6 f9c6 	bl	80029bc <_isatty>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	d102      	bne.n	800c63a <_isatty_r+0x1a>
 800c634:	682b      	ldr	r3, [r5, #0]
 800c636:	b103      	cbz	r3, 800c63a <_isatty_r+0x1a>
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	bd38      	pop	{r3, r4, r5, pc}
 800c63c:	20000528 	.word	0x20000528

0800c640 <_lseek_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4604      	mov	r4, r0
 800c644:	4608      	mov	r0, r1
 800c646:	4611      	mov	r1, r2
 800c648:	2200      	movs	r2, #0
 800c64a:	4d05      	ldr	r5, [pc, #20]	; (800c660 <_lseek_r+0x20>)
 800c64c:	602a      	str	r2, [r5, #0]
 800c64e:	461a      	mov	r2, r3
 800c650:	f7f6 f9be 	bl	80029d0 <_lseek>
 800c654:	1c43      	adds	r3, r0, #1
 800c656:	d102      	bne.n	800c65e <_lseek_r+0x1e>
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	b103      	cbz	r3, 800c65e <_lseek_r+0x1e>
 800c65c:	6023      	str	r3, [r4, #0]
 800c65e:	bd38      	pop	{r3, r4, r5, pc}
 800c660:	20000528 	.word	0x20000528

0800c664 <_read_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4604      	mov	r4, r0
 800c668:	4608      	mov	r0, r1
 800c66a:	4611      	mov	r1, r2
 800c66c:	2200      	movs	r2, #0
 800c66e:	4d05      	ldr	r5, [pc, #20]	; (800c684 <_read_r+0x20>)
 800c670:	602a      	str	r2, [r5, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	f7f6 f94f 	bl	8002916 <_read>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_read_r+0x1e>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_read_r+0x1e>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	20000528 	.word	0x20000528

0800c688 <asinf>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4604      	mov	r4, r0
 800c68c:	f000 f81c 	bl	800c6c8 <__ieee754_asinf>
 800c690:	4621      	mov	r1, r4
 800c692:	4605      	mov	r5, r0
 800c694:	4620      	mov	r0, r4
 800c696:	f7f4 fccb 	bl	8001030 <__aeabi_fcmpun>
 800c69a:	b980      	cbnz	r0, 800c6be <asinf+0x36>
 800c69c:	4620      	mov	r0, r4
 800c69e:	f000 f9a8 	bl	800c9f2 <fabsf>
 800c6a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c6a6:	f7f4 fcb9 	bl	800101c <__aeabi_fcmpgt>
 800c6aa:	b140      	cbz	r0, 800c6be <asinf+0x36>
 800c6ac:	f7fd faac 	bl	8009c08 <__errno>
 800c6b0:	2321      	movs	r3, #33	; 0x21
 800c6b2:	6003      	str	r3, [r0, #0]
 800c6b4:	4803      	ldr	r0, [pc, #12]	; (800c6c4 <asinf+0x3c>)
 800c6b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ba:	f000 b99d 	b.w	800c9f8 <nanf>
 800c6be:	4628      	mov	r0, r5
 800c6c0:	bd38      	pop	{r3, r4, r5, pc}
 800c6c2:	bf00      	nop
 800c6c4:	0800ccaf 	.word	0x0800ccaf

0800c6c8 <__ieee754_asinf>:
 800c6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6cc:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800c6d0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	d10c      	bne.n	800c6f4 <__ieee754_asinf+0x2c>
 800c6da:	498d      	ldr	r1, [pc, #564]	; (800c910 <__ieee754_asinf+0x248>)
 800c6dc:	f7f4 fae2 	bl	8000ca4 <__aeabi_fmul>
 800c6e0:	498c      	ldr	r1, [pc, #560]	; (800c914 <__ieee754_asinf+0x24c>)
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f7f4 fadd 	bl	8000ca4 <__aeabi_fmul>
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7f4 f9d1 	bl	8000a94 <__addsf3>
 800c6f2:	e006      	b.n	800c702 <__ieee754_asinf+0x3a>
 800c6f4:	dd07      	ble.n	800c706 <__ieee754_asinf+0x3e>
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	f7f4 f9ca 	bl	8000a90 <__aeabi_fsub>
 800c6fc:	4601      	mov	r1, r0
 800c6fe:	f7f4 fb85 	bl	8000e0c <__aeabi_fdiv>
 800c702:	4604      	mov	r4, r0
 800c704:	e00e      	b.n	800c724 <__ieee754_asinf+0x5c>
 800c706:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800c70a:	da58      	bge.n	800c7be <__ieee754_asinf+0xf6>
 800c70c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800c710:	da0b      	bge.n	800c72a <__ieee754_asinf+0x62>
 800c712:	4981      	ldr	r1, [pc, #516]	; (800c918 <__ieee754_asinf+0x250>)
 800c714:	f7f4 f9be 	bl	8000a94 <__addsf3>
 800c718:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c71c:	f7f4 fc7e 	bl	800101c <__aeabi_fcmpgt>
 800c720:	2800      	cmp	r0, #0
 800c722:	d04c      	beq.n	800c7be <__ieee754_asinf+0xf6>
 800c724:	4620      	mov	r0, r4
 800c726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c72a:	4601      	mov	r1, r0
 800c72c:	f7f4 faba 	bl	8000ca4 <__aeabi_fmul>
 800c730:	4605      	mov	r5, r0
 800c732:	497a      	ldr	r1, [pc, #488]	; (800c91c <__ieee754_asinf+0x254>)
 800c734:	f7f4 fab6 	bl	8000ca4 <__aeabi_fmul>
 800c738:	4979      	ldr	r1, [pc, #484]	; (800c920 <__ieee754_asinf+0x258>)
 800c73a:	f7f4 f9ab 	bl	8000a94 <__addsf3>
 800c73e:	4629      	mov	r1, r5
 800c740:	f7f4 fab0 	bl	8000ca4 <__aeabi_fmul>
 800c744:	4977      	ldr	r1, [pc, #476]	; (800c924 <__ieee754_asinf+0x25c>)
 800c746:	f7f4 f9a3 	bl	8000a90 <__aeabi_fsub>
 800c74a:	4629      	mov	r1, r5
 800c74c:	f7f4 faaa 	bl	8000ca4 <__aeabi_fmul>
 800c750:	4975      	ldr	r1, [pc, #468]	; (800c928 <__ieee754_asinf+0x260>)
 800c752:	f7f4 f99f 	bl	8000a94 <__addsf3>
 800c756:	4629      	mov	r1, r5
 800c758:	f7f4 faa4 	bl	8000ca4 <__aeabi_fmul>
 800c75c:	4973      	ldr	r1, [pc, #460]	; (800c92c <__ieee754_asinf+0x264>)
 800c75e:	f7f4 f997 	bl	8000a90 <__aeabi_fsub>
 800c762:	4629      	mov	r1, r5
 800c764:	f7f4 fa9e 	bl	8000ca4 <__aeabi_fmul>
 800c768:	4971      	ldr	r1, [pc, #452]	; (800c930 <__ieee754_asinf+0x268>)
 800c76a:	f7f4 f993 	bl	8000a94 <__addsf3>
 800c76e:	4629      	mov	r1, r5
 800c770:	f7f4 fa98 	bl	8000ca4 <__aeabi_fmul>
 800c774:	496f      	ldr	r1, [pc, #444]	; (800c934 <__ieee754_asinf+0x26c>)
 800c776:	4606      	mov	r6, r0
 800c778:	4628      	mov	r0, r5
 800c77a:	f7f4 fa93 	bl	8000ca4 <__aeabi_fmul>
 800c77e:	496e      	ldr	r1, [pc, #440]	; (800c938 <__ieee754_asinf+0x270>)
 800c780:	f7f4 f986 	bl	8000a90 <__aeabi_fsub>
 800c784:	4629      	mov	r1, r5
 800c786:	f7f4 fa8d 	bl	8000ca4 <__aeabi_fmul>
 800c78a:	496c      	ldr	r1, [pc, #432]	; (800c93c <__ieee754_asinf+0x274>)
 800c78c:	f7f4 f982 	bl	8000a94 <__addsf3>
 800c790:	4629      	mov	r1, r5
 800c792:	f7f4 fa87 	bl	8000ca4 <__aeabi_fmul>
 800c796:	496a      	ldr	r1, [pc, #424]	; (800c940 <__ieee754_asinf+0x278>)
 800c798:	f7f4 f97a 	bl	8000a90 <__aeabi_fsub>
 800c79c:	4629      	mov	r1, r5
 800c79e:	f7f4 fa81 	bl	8000ca4 <__aeabi_fmul>
 800c7a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c7a6:	f7f4 f975 	bl	8000a94 <__addsf3>
 800c7aa:	4601      	mov	r1, r0
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f7f4 fb2d 	bl	8000e0c <__aeabi_fdiv>
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	f7f4 fa76 	bl	8000ca4 <__aeabi_fmul>
 800c7b8:	4601      	mov	r1, r0
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	e797      	b.n	800c6ee <__ieee754_asinf+0x26>
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 f917 	bl	800c9f2 <fabsf>
 800c7c4:	4601      	mov	r1, r0
 800c7c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c7ca:	f7f4 f961 	bl	8000a90 <__aeabi_fsub>
 800c7ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c7d2:	f7f4 fa67 	bl	8000ca4 <__aeabi_fmul>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	4950      	ldr	r1, [pc, #320]	; (800c91c <__ieee754_asinf+0x254>)
 800c7da:	f7f4 fa63 	bl	8000ca4 <__aeabi_fmul>
 800c7de:	4950      	ldr	r1, [pc, #320]	; (800c920 <__ieee754_asinf+0x258>)
 800c7e0:	f7f4 f958 	bl	8000a94 <__addsf3>
 800c7e4:	4631      	mov	r1, r6
 800c7e6:	f7f4 fa5d 	bl	8000ca4 <__aeabi_fmul>
 800c7ea:	494e      	ldr	r1, [pc, #312]	; (800c924 <__ieee754_asinf+0x25c>)
 800c7ec:	f7f4 f950 	bl	8000a90 <__aeabi_fsub>
 800c7f0:	4631      	mov	r1, r6
 800c7f2:	f7f4 fa57 	bl	8000ca4 <__aeabi_fmul>
 800c7f6:	494c      	ldr	r1, [pc, #304]	; (800c928 <__ieee754_asinf+0x260>)
 800c7f8:	f7f4 f94c 	bl	8000a94 <__addsf3>
 800c7fc:	4631      	mov	r1, r6
 800c7fe:	f7f4 fa51 	bl	8000ca4 <__aeabi_fmul>
 800c802:	494a      	ldr	r1, [pc, #296]	; (800c92c <__ieee754_asinf+0x264>)
 800c804:	f7f4 f944 	bl	8000a90 <__aeabi_fsub>
 800c808:	4631      	mov	r1, r6
 800c80a:	f7f4 fa4b 	bl	8000ca4 <__aeabi_fmul>
 800c80e:	4948      	ldr	r1, [pc, #288]	; (800c930 <__ieee754_asinf+0x268>)
 800c810:	f7f4 f940 	bl	8000a94 <__addsf3>
 800c814:	4631      	mov	r1, r6
 800c816:	f7f4 fa45 	bl	8000ca4 <__aeabi_fmul>
 800c81a:	4946      	ldr	r1, [pc, #280]	; (800c934 <__ieee754_asinf+0x26c>)
 800c81c:	4681      	mov	r9, r0
 800c81e:	4630      	mov	r0, r6
 800c820:	f7f4 fa40 	bl	8000ca4 <__aeabi_fmul>
 800c824:	4944      	ldr	r1, [pc, #272]	; (800c938 <__ieee754_asinf+0x270>)
 800c826:	f7f4 f933 	bl	8000a90 <__aeabi_fsub>
 800c82a:	4631      	mov	r1, r6
 800c82c:	f7f4 fa3a 	bl	8000ca4 <__aeabi_fmul>
 800c830:	4942      	ldr	r1, [pc, #264]	; (800c93c <__ieee754_asinf+0x274>)
 800c832:	f7f4 f92f 	bl	8000a94 <__addsf3>
 800c836:	4631      	mov	r1, r6
 800c838:	f7f4 fa34 	bl	8000ca4 <__aeabi_fmul>
 800c83c:	4940      	ldr	r1, [pc, #256]	; (800c940 <__ieee754_asinf+0x278>)
 800c83e:	f7f4 f927 	bl	8000a90 <__aeabi_fsub>
 800c842:	4631      	mov	r1, r6
 800c844:	f7f4 fa2e 	bl	8000ca4 <__aeabi_fmul>
 800c848:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c84c:	f7f4 f922 	bl	8000a94 <__addsf3>
 800c850:	4682      	mov	sl, r0
 800c852:	4630      	mov	r0, r6
 800c854:	f000 f87c 	bl	800c950 <__ieee754_sqrtf>
 800c858:	4b3a      	ldr	r3, [pc, #232]	; (800c944 <__ieee754_asinf+0x27c>)
 800c85a:	4607      	mov	r7, r0
 800c85c:	4598      	cmp	r8, r3
 800c85e:	dd1a      	ble.n	800c896 <__ieee754_asinf+0x1ce>
 800c860:	4651      	mov	r1, sl
 800c862:	4648      	mov	r0, r9
 800c864:	f7f4 fad2 	bl	8000e0c <__aeabi_fdiv>
 800c868:	4639      	mov	r1, r7
 800c86a:	f7f4 fa1b 	bl	8000ca4 <__aeabi_fmul>
 800c86e:	4639      	mov	r1, r7
 800c870:	f7f4 f910 	bl	8000a94 <__addsf3>
 800c874:	4601      	mov	r1, r0
 800c876:	f7f4 f90d 	bl	8000a94 <__addsf3>
 800c87a:	4933      	ldr	r1, [pc, #204]	; (800c948 <__ieee754_asinf+0x280>)
 800c87c:	f7f4 f90a 	bl	8000a94 <__addsf3>
 800c880:	4601      	mov	r1, r0
 800c882:	4823      	ldr	r0, [pc, #140]	; (800c910 <__ieee754_asinf+0x248>)
 800c884:	f7f4 f904 	bl	8000a90 <__aeabi_fsub>
 800c888:	2d00      	cmp	r5, #0
 800c88a:	4604      	mov	r4, r0
 800c88c:	f73f af4a 	bgt.w	800c724 <__ieee754_asinf+0x5c>
 800c890:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c894:	e735      	b.n	800c702 <__ieee754_asinf+0x3a>
 800c896:	4601      	mov	r1, r0
 800c898:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800c89c:	f7f4 f8fa 	bl	8000a94 <__addsf3>
 800c8a0:	4651      	mov	r1, sl
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	4648      	mov	r0, r9
 800c8a6:	f7f4 fab1 	bl	8000e0c <__aeabi_fdiv>
 800c8aa:	4601      	mov	r1, r0
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f7f4 f9f9 	bl	8000ca4 <__aeabi_fmul>
 800c8b2:	f028 080f 	bic.w	r8, r8, #15
 800c8b6:	4681      	mov	r9, r0
 800c8b8:	4641      	mov	r1, r8
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	f7f4 f9f2 	bl	8000ca4 <__aeabi_fmul>
 800c8c0:	4601      	mov	r1, r0
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7f4 f8e4 	bl	8000a90 <__aeabi_fsub>
 800c8c8:	4641      	mov	r1, r8
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4638      	mov	r0, r7
 800c8ce:	f7f4 f8e1 	bl	8000a94 <__addsf3>
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f7f4 fa99 	bl	8000e0c <__aeabi_fdiv>
 800c8da:	4601      	mov	r1, r0
 800c8dc:	f7f4 f8da 	bl	8000a94 <__addsf3>
 800c8e0:	4601      	mov	r1, r0
 800c8e2:	480c      	ldr	r0, [pc, #48]	; (800c914 <__ieee754_asinf+0x24c>)
 800c8e4:	f7f4 f8d4 	bl	8000a90 <__aeabi_fsub>
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	4648      	mov	r0, r9
 800c8ec:	f7f4 f8d0 	bl	8000a90 <__aeabi_fsub>
 800c8f0:	4641      	mov	r1, r8
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	f7f4 f8cd 	bl	8000a94 <__addsf3>
 800c8fa:	4601      	mov	r1, r0
 800c8fc:	4813      	ldr	r0, [pc, #76]	; (800c94c <__ieee754_asinf+0x284>)
 800c8fe:	f7f4 f8c7 	bl	8000a90 <__aeabi_fsub>
 800c902:	4601      	mov	r1, r0
 800c904:	4620      	mov	r0, r4
 800c906:	f7f4 f8c3 	bl	8000a90 <__aeabi_fsub>
 800c90a:	4601      	mov	r1, r0
 800c90c:	480f      	ldr	r0, [pc, #60]	; (800c94c <__ieee754_asinf+0x284>)
 800c90e:	e7b9      	b.n	800c884 <__ieee754_asinf+0x1bc>
 800c910:	3fc90fdb 	.word	0x3fc90fdb
 800c914:	b33bbd2e 	.word	0xb33bbd2e
 800c918:	7149f2ca 	.word	0x7149f2ca
 800c91c:	3811ef08 	.word	0x3811ef08
 800c920:	3a4f7f04 	.word	0x3a4f7f04
 800c924:	3d241146 	.word	0x3d241146
 800c928:	3e4e0aa8 	.word	0x3e4e0aa8
 800c92c:	3ea6b090 	.word	0x3ea6b090
 800c930:	3e2aaaab 	.word	0x3e2aaaab
 800c934:	3d9dc62e 	.word	0x3d9dc62e
 800c938:	3f303361 	.word	0x3f303361
 800c93c:	4001572d 	.word	0x4001572d
 800c940:	4019d139 	.word	0x4019d139
 800c944:	3f799999 	.word	0x3f799999
 800c948:	333bbd2e 	.word	0x333bbd2e
 800c94c:	3f490fdb 	.word	0x3f490fdb

0800c950 <__ieee754_sqrtf>:
 800c950:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c954:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	4603      	mov	r3, r0
 800c95c:	4604      	mov	r4, r0
 800c95e:	d309      	bcc.n	800c974 <__ieee754_sqrtf+0x24>
 800c960:	4601      	mov	r1, r0
 800c962:	f7f4 f99f 	bl	8000ca4 <__aeabi_fmul>
 800c966:	4601      	mov	r1, r0
 800c968:	4620      	mov	r0, r4
 800c96a:	f7f4 f893 	bl	8000a94 <__addsf3>
 800c96e:	4604      	mov	r4, r0
 800c970:	4620      	mov	r0, r4
 800c972:	bd70      	pop	{r4, r5, r6, pc}
 800c974:	2a00      	cmp	r2, #0
 800c976:	d0fb      	beq.n	800c970 <__ieee754_sqrtf+0x20>
 800c978:	2800      	cmp	r0, #0
 800c97a:	da06      	bge.n	800c98a <__ieee754_sqrtf+0x3a>
 800c97c:	4601      	mov	r1, r0
 800c97e:	f7f4 f887 	bl	8000a90 <__aeabi_fsub>
 800c982:	4601      	mov	r1, r0
 800c984:	f7f4 fa42 	bl	8000e0c <__aeabi_fdiv>
 800c988:	e7f1      	b.n	800c96e <__ieee754_sqrtf+0x1e>
 800c98a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800c98e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800c992:	d029      	beq.n	800c9e8 <__ieee754_sqrtf+0x98>
 800c994:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800c998:	07cb      	lsls	r3, r1, #31
 800c99a:	f04f 0300 	mov.w	r3, #0
 800c99e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800c9a2:	f04f 0419 	mov.w	r4, #25
 800c9a6:	461e      	mov	r6, r3
 800c9a8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c9ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c9b0:	bf58      	it	pl
 800c9b2:	0052      	lslpl	r2, r2, #1
 800c9b4:	1040      	asrs	r0, r0, #1
 800c9b6:	0052      	lsls	r2, r2, #1
 800c9b8:	1875      	adds	r5, r6, r1
 800c9ba:	4295      	cmp	r5, r2
 800c9bc:	bfde      	ittt	le
 800c9be:	186e      	addle	r6, r5, r1
 800c9c0:	1b52      	suble	r2, r2, r5
 800c9c2:	185b      	addle	r3, r3, r1
 800c9c4:	3c01      	subs	r4, #1
 800c9c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c9ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c9ce:	d1f3      	bne.n	800c9b8 <__ieee754_sqrtf+0x68>
 800c9d0:	b112      	cbz	r2, 800c9d8 <__ieee754_sqrtf+0x88>
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	f023 0301 	bic.w	r3, r3, #1
 800c9d8:	105c      	asrs	r4, r3, #1
 800c9da:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c9de:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800c9e2:	e7c5      	b.n	800c970 <__ieee754_sqrtf+0x20>
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	3201      	adds	r2, #1
 800c9e8:	0218      	lsls	r0, r3, #8
 800c9ea:	d5fb      	bpl.n	800c9e4 <__ieee754_sqrtf+0x94>
 800c9ec:	3a01      	subs	r2, #1
 800c9ee:	1a89      	subs	r1, r1, r2
 800c9f0:	e7d0      	b.n	800c994 <__ieee754_sqrtf+0x44>

0800c9f2 <fabsf>:
 800c9f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c9f6:	4770      	bx	lr

0800c9f8 <nanf>:
 800c9f8:	4800      	ldr	r0, [pc, #0]	; (800c9fc <nanf+0x4>)
 800c9fa:	4770      	bx	lr
 800c9fc:	7fc00000 	.word	0x7fc00000

0800ca00 <_init>:
 800ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca02:	bf00      	nop
 800ca04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca06:	bc08      	pop	{r3}
 800ca08:	469e      	mov	lr, r3
 800ca0a:	4770      	bx	lr

0800ca0c <_fini>:
 800ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0e:	bf00      	nop
 800ca10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca12:	bc08      	pop	{r3}
 800ca14:	469e      	mov	lr, r3
 800ca16:	4770      	bx	lr
