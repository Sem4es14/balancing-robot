
balancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c468  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800c578  0800c578  0001c578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c99c  0800c99c  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800c99c  0800c99c  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c99c  0800c99c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c99c  0800c99c  0001c99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9a0  0800c9a0  0001c9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c9a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000204  0800cba8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800cba8  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011161  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b4  00000000  00000000  0003138e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00033a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00034c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199e8  00000000  00000000  00035d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f3e  00000000  00000000  0004f700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e28  00000000  00000000  0006363e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7466  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f64  00000000  00000000  000f74b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c560 	.word	0x0800c560

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	0800c560 	.word	0x0800c560

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <__aeabi_f2iz>:
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001064:	d30f      	bcc.n	8001086 <__aeabi_f2iz+0x2a>
 8001066:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d90d      	bls.n	800108c <__aeabi_f2iz+0x30>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001078:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	bf18      	it	ne
 8001082:	4240      	negne	r0, r0
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2iz+0x3a>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d105      	bne.n	80010a2 <__aeabi_f2iz+0x46>
 8001096:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800109a:	bf08      	it	eq
 800109c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr

080010a8 <MadgwickAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b09b      	sub	sp, #108	; 0x6c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80010b6:	4b9d      	ldr	r3, [pc, #628]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fdef 	bl	8000ca4 <__aeabi_fmul>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461c      	mov	r4, r3
 80010ca:	4b99      	ldr	r3, [pc, #612]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fde7 	bl	8000ca4 <__aeabi_fmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4619      	mov	r1, r3
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff fcd8 	bl	8000a90 <__aeabi_fsub>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461c      	mov	r4, r3
 80010e4:	4b93      	ldr	r3, [pc, #588]	; (8001334 <MadgwickAHRSupdateIMU+0x28c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fdda 	bl	8000ca4 <__aeabi_fmul>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4620      	mov	r0, r4
 80010f6:	f7ff fccb 	bl	8000a90 <__aeabi_fsub>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fdcf 	bl	8000ca4 <__aeabi_fmul>
 8001106:	4603      	mov	r3, r0
 8001108:	667b      	str	r3, [r7, #100]	; 0x64
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800110a:	4b8b      	ldr	r3, [pc, #556]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fdc7 	bl	8000ca4 <__aeabi_fmul>
 8001116:	4603      	mov	r3, r0
 8001118:	461c      	mov	r4, r3
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fdbf 	bl	8000ca4 <__aeabi_fmul>
 8001126:	4603      	mov	r3, r0
 8001128:	4619      	mov	r1, r3
 800112a:	4620      	mov	r0, r4
 800112c:	f7ff fcb2 	bl	8000a94 <__addsf3>
 8001130:	4603      	mov	r3, r0
 8001132:	461c      	mov	r4, r3
 8001134:	4b7f      	ldr	r3, [pc, #508]	; (8001334 <MadgwickAHRSupdateIMU+0x28c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fdb2 	bl	8000ca4 <__aeabi_fmul>
 8001140:	4603      	mov	r3, r0
 8001142:	4619      	mov	r1, r3
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff fca3 	bl	8000a90 <__aeabi_fsub>
 800114a:	4603      	mov	r3, r0
 800114c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fda7 	bl	8000ca4 <__aeabi_fmul>
 8001156:	4603      	mov	r3, r0
 8001158:	663b      	str	r3, [r7, #96]	; 0x60
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800115a:	4b77      	ldr	r3, [pc, #476]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd9f 	bl	8000ca4 <__aeabi_fmul>
 8001166:	4603      	mov	r3, r0
 8001168:	461c      	mov	r4, r3
 800116a:	4b70      	ldr	r3, [pc, #448]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fd97 	bl	8000ca4 <__aeabi_fmul>
 8001176:	4603      	mov	r3, r0
 8001178:	4619      	mov	r1, r3
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff fc88 	bl	8000a90 <__aeabi_fsub>
 8001180:	4603      	mov	r3, r0
 8001182:	461c      	mov	r4, r3
 8001184:	4b6b      	ldr	r3, [pc, #428]	; (8001334 <MadgwickAHRSupdateIMU+0x28c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68f9      	ldr	r1, [r7, #12]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fd8a 	bl	8000ca4 <__aeabi_fmul>
 8001190:	4603      	mov	r3, r0
 8001192:	4619      	mov	r1, r3
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff fc7d 	bl	8000a94 <__addsf3>
 800119a:	4603      	mov	r3, r0
 800119c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fd7f 	bl	8000ca4 <__aeabi_fmul>
 80011a6:	4603      	mov	r3, r0
 80011a8:	65fb      	str	r3, [r7, #92]	; 0x5c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fd77 	bl	8000ca4 <__aeabi_fmul>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461c      	mov	r4, r3
 80011ba:	4b5c      	ldr	r3, [pc, #368]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fd6f 	bl	8000ca4 <__aeabi_fmul>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff fc62 	bl	8000a94 <__addsf3>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461c      	mov	r4, r3
 80011d4:	4b56      	ldr	r3, [pc, #344]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68f9      	ldr	r1, [r7, #12]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd62 	bl	8000ca4 <__aeabi_fmul>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4619      	mov	r1, r3
 80011e4:	4620      	mov	r0, r4
 80011e6:	f7ff fc53 	bl	8000a90 <__aeabi_fsub>
 80011ea:	4603      	mov	r3, r0
 80011ec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fd57 	bl	8000ca4 <__aeabi_fmul>
 80011f6:	4603      	mov	r3, r0
 80011f8:	65bb      	str	r3, [r7, #88]	; 0x58

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80011fa:	f04f 0100 	mov.w	r1, #0
 80011fe:	6838      	ldr	r0, [r7, #0]
 8001200:	f7ff fee4 	bl	8000fcc <__aeabi_fcmpeq>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d010      	beq.n	800122c <MadgwickAHRSupdateIMU+0x184>
 800120a:	f04f 0100 	mov.w	r1, #0
 800120e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001210:	f7ff fedc 	bl	8000fcc <__aeabi_fcmpeq>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d008      	beq.n	800122c <MadgwickAHRSupdateIMU+0x184>
 800121a:	f04f 0100 	mov.w	r1, #0
 800121e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001220:	f7ff fed4 	bl	8000fcc <__aeabi_fcmpeq>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 823c 	bne.w	80016a4 <MadgwickAHRSupdateIMU+0x5fc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800122c:	6839      	ldr	r1, [r7, #0]
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f7ff fd38 	bl	8000ca4 <__aeabi_fmul>
 8001234:	4603      	mov	r3, r0
 8001236:	461c      	mov	r4, r3
 8001238:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800123a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800123c:	f7ff fd32 	bl	8000ca4 <__aeabi_fmul>
 8001240:	4603      	mov	r3, r0
 8001242:	4619      	mov	r1, r3
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff fc25 	bl	8000a94 <__addsf3>
 800124a:	4603      	mov	r3, r0
 800124c:	461c      	mov	r4, r3
 800124e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001250:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001252:	f7ff fd27 	bl	8000ca4 <__aeabi_fmul>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	4620      	mov	r0, r4
 800125c:	f7ff fc1a 	bl	8000a94 <__addsf3>
 8001260:	4603      	mov	r3, r0
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fad0 	bl	8001808 <invSqrt>
 8001268:	6578      	str	r0, [r7, #84]	; 0x54
		ax *= recipNorm;
 800126a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f7ff fd19 	bl	8000ca4 <__aeabi_fmul>
 8001272:	4603      	mov	r3, r0
 8001274:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8001276:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001278:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800127a:	f7ff fd13 	bl	8000ca4 <__aeabi_fmul>
 800127e:	4603      	mov	r3, r0
 8001280:	67bb      	str	r3, [r7, #120]	; 0x78
		az *= recipNorm;
 8001282:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001284:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001286:	f7ff fd0d 	bl	8000ca4 <__aeabi_fmul>
 800128a:	4603      	mov	r3, r0
 800128c:	67fb      	str	r3, [r7, #124]	; 0x7c

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fbfd 	bl	8000a94 <__addsf3>
 800129a:	4603      	mov	r3, r0
 800129c:	653b      	str	r3, [r7, #80]	; 0x50
		_2q1 = 2.0f * q1;
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fbf5 	bl	8000a94 <__addsf3>
 80012aa:	4603      	mov	r3, r0
 80012ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2 = 2.0f * q2;
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fbed 	bl	8000a94 <__addsf3>
 80012ba:	4603      	mov	r3, r0
 80012bc:	64bb      	str	r3, [r7, #72]	; 0x48
		_2q3 = 2.0f * q3;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MadgwickAHRSupdateIMU+0x28c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4619      	mov	r1, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fbe5 	bl	8000a94 <__addsf3>
 80012ca:	4603      	mov	r3, r0
 80012cc:	647b      	str	r3, [r7, #68]	; 0x44
		_4q0 = 4.0f * q0;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MadgwickAHRSupdateIMU+0x290>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fce4 	bl	8000ca4 <__aeabi_fmul>
 80012dc:	4603      	mov	r3, r0
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
		_4q1 = 4.0f * q1;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fcdb 	bl	8000ca4 <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		_4q2 = 4.0f * q2;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fcd2 	bl	8000ca4 <__aeabi_fmul>
 8001300:	4603      	mov	r3, r0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q1 = 8.0f * q1;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MadgwickAHRSupdateIMU+0x284>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fcc9 	bl	8000ca4 <__aeabi_fmul>
 8001312:	4603      	mov	r3, r0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
		_8q2 = 8.0f * q2;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MadgwickAHRSupdateIMU+0x288>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fcc0 	bl	8000ca4 <__aeabi_fmul>
 8001324:	4603      	mov	r3, r0
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
 8001328:	e008      	b.n	800133c <MadgwickAHRSupdateIMU+0x294>
 800132a:	bf00      	nop
 800132c:	20000220 	.word	0x20000220
 8001330:	20000224 	.word	0x20000224
 8001334:	20000228 	.word	0x20000228
 8001338:	20000004 	.word	0x20000004
		q0q0 = q0 * q0;
 800133c:	4b9a      	ldr	r3, [pc, #616]	; (80015a8 <MadgwickAHRSupdateIMU+0x500>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a99      	ldr	r2, [pc, #612]	; (80015a8 <MadgwickAHRSupdateIMU+0x500>)
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fcac 	bl	8000ca4 <__aeabi_fmul>
 800134c:	4603      	mov	r3, r0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
		q1q1 = q1 * q1;
 8001350:	4b96      	ldr	r3, [pc, #600]	; (80015ac <MadgwickAHRSupdateIMU+0x504>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a95      	ldr	r2, [pc, #596]	; (80015ac <MadgwickAHRSupdateIMU+0x504>)
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fca2 	bl	8000ca4 <__aeabi_fmul>
 8001360:	4603      	mov	r3, r0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q2 = q2 * q2;
 8001364:	4b92      	ldr	r3, [pc, #584]	; (80015b0 <MadgwickAHRSupdateIMU+0x508>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a91      	ldr	r2, [pc, #580]	; (80015b0 <MadgwickAHRSupdateIMU+0x508>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fc98 	bl	8000ca4 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8001378:	4b8e      	ldr	r3, [pc, #568]	; (80015b4 <MadgwickAHRSupdateIMU+0x50c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a8d      	ldr	r2, [pc, #564]	; (80015b4 <MadgwickAHRSupdateIMU+0x50c>)
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc8e 	bl	8000ca4 <__aeabi_fmul>
 8001388:	4603      	mov	r3, r0
 800138a:	623b      	str	r3, [r7, #32]

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800138c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800138e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001390:	f7ff fc88 	bl	8000ca4 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
 8001396:	461c      	mov	r4, r3
 8001398:	6839      	ldr	r1, [r7, #0]
 800139a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800139c:	f7ff fc82 	bl	8000ca4 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4620      	mov	r0, r4
 80013a6:	f7ff fb75 	bl	8000a94 <__addsf3>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461c      	mov	r4, r3
 80013ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013b2:	f7ff fc77 	bl	8000ca4 <__aeabi_fmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4620      	mov	r0, r4
 80013bc:	f7ff fb6a 	bl	8000a94 <__addsf3>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461c      	mov	r4, r3
 80013c4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80013c6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80013c8:	f7ff fc6c 	bl	8000ca4 <__aeabi_fmul>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff fb5d 	bl	8000a90 <__aeabi_fsub>
 80013d6:	4603      	mov	r3, r0
 80013d8:	61fb      	str	r3, [r7, #28]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80013da:	6a39      	ldr	r1, [r7, #32]
 80013dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013de:	f7ff fc61 	bl	8000ca4 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461c      	mov	r4, r3
 80013e6:	6839      	ldr	r1, [r7, #0]
 80013e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80013ea:	f7ff fc5b 	bl	8000ca4 <__aeabi_fmul>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4619      	mov	r1, r3
 80013f2:	4620      	mov	r0, r4
 80013f4:	f7ff fb4c 	bl	8000a90 <__aeabi_fsub>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461c      	mov	r4, r3
 80013fc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001402:	f7ff fc4f 	bl	8000ca4 <__aeabi_fmul>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	4b68      	ldr	r3, [pc, #416]	; (80015ac <MadgwickAHRSupdateIMU+0x504>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f7ff fc47 	bl	8000ca4 <__aeabi_fmul>
 8001416:	4603      	mov	r3, r0
 8001418:	4619      	mov	r1, r3
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff fb3a 	bl	8000a94 <__addsf3>
 8001420:	4603      	mov	r3, r0
 8001422:	461c      	mov	r4, r3
 8001424:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001426:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001428:	f7ff fc3c 	bl	8000ca4 <__aeabi_fmul>
 800142c:	4603      	mov	r3, r0
 800142e:	4619      	mov	r1, r3
 8001430:	4620      	mov	r0, r4
 8001432:	f7ff fb2d 	bl	8000a90 <__aeabi_fsub>
 8001436:	4603      	mov	r3, r0
 8001438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fb28 	bl	8000a90 <__aeabi_fsub>
 8001440:	4603      	mov	r3, r0
 8001442:	461c      	mov	r4, r3
 8001444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001446:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001448:	f7ff fc2c 	bl	8000ca4 <__aeabi_fmul>
 800144c:	4603      	mov	r3, r0
 800144e:	4619      	mov	r1, r3
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff fb1f 	bl	8000a94 <__addsf3>
 8001456:	4603      	mov	r3, r0
 8001458:	461c      	mov	r4, r3
 800145a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800145c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800145e:	f7ff fc21 	bl	8000ca4 <__aeabi_fmul>
 8001462:	4603      	mov	r3, r0
 8001464:	4619      	mov	r1, r3
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff fb14 	bl	8000a94 <__addsf3>
 800146c:	4603      	mov	r3, r0
 800146e:	461c      	mov	r4, r3
 8001470:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001472:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001474:	f7ff fc16 	bl	8000ca4 <__aeabi_fmul>
 8001478:	4603      	mov	r3, r0
 800147a:	4619      	mov	r1, r3
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff fb09 	bl	8000a94 <__addsf3>
 8001482:	4603      	mov	r3, r0
 8001484:	61bb      	str	r3, [r7, #24]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001486:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800148a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800148c:	f7ff fc0a 	bl	8000ca4 <__aeabi_fmul>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <MadgwickAHRSupdateIMU+0x508>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f7ff fc02 	bl	8000ca4 <__aeabi_fmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461c      	mov	r4, r3
 80014a4:	6839      	ldr	r1, [r7, #0]
 80014a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80014a8:	f7ff fbfc 	bl	8000ca4 <__aeabi_fmul>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	4620      	mov	r0, r4
 80014b2:	f7ff faef 	bl	8000a94 <__addsf3>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461c      	mov	r4, r3
 80014ba:	6a39      	ldr	r1, [r7, #32]
 80014bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80014be:	f7ff fbf1 	bl	8000ca4 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fae4 	bl	8000a94 <__addsf3>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461c      	mov	r4, r3
 80014d0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80014d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014d4:	f7ff fbe6 	bl	8000ca4 <__aeabi_fmul>
 80014d8:	4603      	mov	r3, r0
 80014da:	4619      	mov	r1, r3
 80014dc:	4620      	mov	r0, r4
 80014de:	f7ff fad7 	bl	8000a90 <__aeabi_fsub>
 80014e2:	4603      	mov	r3, r0
 80014e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fad2 	bl	8000a90 <__aeabi_fsub>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461c      	mov	r4, r3
 80014f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014f4:	f7ff fbd6 	bl	8000ca4 <__aeabi_fmul>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fac9 	bl	8000a94 <__addsf3>
 8001502:	4603      	mov	r3, r0
 8001504:	461c      	mov	r4, r3
 8001506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800150a:	f7ff fbcb 	bl	8000ca4 <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	4619      	mov	r1, r3
 8001512:	4620      	mov	r0, r4
 8001514:	f7ff fabe 	bl	8000a94 <__addsf3>
 8001518:	4603      	mov	r3, r0
 800151a:	461c      	mov	r4, r3
 800151c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800151e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001520:	f7ff fbc0 	bl	8000ca4 <__aeabi_fmul>
 8001524:	4603      	mov	r3, r0
 8001526:	4619      	mov	r1, r3
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff fab3 	bl	8000a94 <__addsf3>
 800152e:	4603      	mov	r3, r0
 8001530:	617b      	str	r3, [r7, #20]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001532:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001538:	f7ff fbb4 	bl	8000ca4 <__aeabi_fmul>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MadgwickAHRSupdateIMU+0x50c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7ff fbac 	bl	8000ca4 <__aeabi_fmul>
 800154c:	4603      	mov	r3, r0
 800154e:	461c      	mov	r4, r3
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001554:	f7ff fba6 	bl	8000ca4 <__aeabi_fmul>
 8001558:	4603      	mov	r3, r0
 800155a:	4619      	mov	r1, r3
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff fa97 	bl	8000a90 <__aeabi_fsub>
 8001562:	4603      	mov	r3, r0
 8001564:	461c      	mov	r4, r3
 8001566:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800156a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800156c:	f7ff fb9a 	bl	8000ca4 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MadgwickAHRSupdateIMU+0x50c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	4610      	mov	r0, r2
 800157c:	f7ff fb92 	bl	8000ca4 <__aeabi_fmul>
 8001580:	4603      	mov	r3, r0
 8001582:	4619      	mov	r1, r3
 8001584:	4620      	mov	r0, r4
 8001586:	f7ff fa85 	bl	8000a94 <__addsf3>
 800158a:	4603      	mov	r3, r0
 800158c:	461c      	mov	r4, r3
 800158e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001590:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001592:	f7ff fb87 	bl	8000ca4 <__aeabi_fmul>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff fa78 	bl	8000a90 <__aeabi_fsub>
 80015a0:	4603      	mov	r3, r0
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	e008      	b.n	80015b8 <MadgwickAHRSupdateIMU+0x510>
 80015a6:	bf00      	nop
 80015a8:	20000004 	.word	0x20000004
 80015ac:	20000220 	.word	0x20000220
 80015b0:	20000224 	.word	0x20000224
 80015b4:	20000228 	.word	0x20000228
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80015b8:	69f9      	ldr	r1, [r7, #28]
 80015ba:	69f8      	ldr	r0, [r7, #28]
 80015bc:	f7ff fb72 	bl	8000ca4 <__aeabi_fmul>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461c      	mov	r4, r3
 80015c4:	69b9      	ldr	r1, [r7, #24]
 80015c6:	69b8      	ldr	r0, [r7, #24]
 80015c8:	f7ff fb6c 	bl	8000ca4 <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fa5f 	bl	8000a94 <__addsf3>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461c      	mov	r4, r3
 80015da:	6979      	ldr	r1, [r7, #20]
 80015dc:	6978      	ldr	r0, [r7, #20]
 80015de:	f7ff fb61 	bl	8000ca4 <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4620      	mov	r0, r4
 80015e8:	f7ff fa54 	bl	8000a94 <__addsf3>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461c      	mov	r4, r3
 80015f0:	6939      	ldr	r1, [r7, #16]
 80015f2:	6938      	ldr	r0, [r7, #16]
 80015f4:	f7ff fb56 	bl	8000ca4 <__aeabi_fmul>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7ff fa49 	bl	8000a94 <__addsf3>
 8001602:	4603      	mov	r3, r0
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f8ff 	bl	8001808 <invSqrt>
 800160a:	6578      	str	r0, [r7, #84]	; 0x54
		s0 *= recipNorm;
 800160c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800160e:	69f8      	ldr	r0, [r7, #28]
 8001610:	f7ff fb48 	bl	8000ca4 <__aeabi_fmul>
 8001614:	4603      	mov	r3, r0
 8001616:	61fb      	str	r3, [r7, #28]
		s1 *= recipNorm;
 8001618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800161a:	69b8      	ldr	r0, [r7, #24]
 800161c:	f7ff fb42 	bl	8000ca4 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
		s2 *= recipNorm;
 8001624:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff fb3c 	bl	8000ca4 <__aeabi_fmul>
 800162c:	4603      	mov	r3, r0
 800162e:	617b      	str	r3, [r7, #20]
		s3 *= recipNorm;
 8001630:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001632:	6938      	ldr	r0, [r7, #16]
 8001634:	f7ff fb36 	bl	8000ca4 <__aeabi_fmul>
 8001638:	4603      	mov	r3, r0
 800163a:	613b      	str	r3, [r7, #16]

		// Apply feedback step
		qDot1 -= beta * s0;
 800163c:	4b6c      	ldr	r3, [pc, #432]	; (80017f0 <MadgwickAHRSupdateIMU+0x748>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69f9      	ldr	r1, [r7, #28]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fb2e 	bl	8000ca4 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	4619      	mov	r1, r3
 800164c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800164e:	f7ff fa1f 	bl	8000a90 <__aeabi_fsub>
 8001652:	4603      	mov	r3, r0
 8001654:	667b      	str	r3, [r7, #100]	; 0x64
		qDot2 -= beta * s1;
 8001656:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <MadgwickAHRSupdateIMU+0x748>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fb21 	bl	8000ca4 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
 8001664:	4619      	mov	r1, r3
 8001666:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001668:	f7ff fa12 	bl	8000a90 <__aeabi_fsub>
 800166c:	4603      	mov	r3, r0
 800166e:	663b      	str	r3, [r7, #96]	; 0x60
		qDot3 -= beta * s2;
 8001670:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <MadgwickAHRSupdateIMU+0x748>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6979      	ldr	r1, [r7, #20]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fb14 	bl	8000ca4 <__aeabi_fmul>
 800167c:	4603      	mov	r3, r0
 800167e:	4619      	mov	r1, r3
 8001680:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001682:	f7ff fa05 	bl	8000a90 <__aeabi_fsub>
 8001686:	4603      	mov	r3, r0
 8001688:	65fb      	str	r3, [r7, #92]	; 0x5c
		qDot4 -= beta * s3;
 800168a:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <MadgwickAHRSupdateIMU+0x748>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6939      	ldr	r1, [r7, #16]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fb07 	bl	8000ca4 <__aeabi_fmul>
 8001696:	4603      	mov	r3, r0
 8001698:	4619      	mov	r1, r3
 800169a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800169c:	f7ff f9f8 	bl	8000a90 <__aeabi_fsub>
 80016a0:	4603      	mov	r3, r0
 80016a2:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80016a4:	4953      	ldr	r1, [pc, #332]	; (80017f4 <MadgwickAHRSupdateIMU+0x74c>)
 80016a6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80016a8:	f7ff fafc 	bl	8000ca4 <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b51      	ldr	r3, [pc, #324]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f7ff f9ec 	bl	8000a94 <__addsf3>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 80016c2:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 80016c4:	494b      	ldr	r1, [pc, #300]	; (80017f4 <MadgwickAHRSupdateIMU+0x74c>)
 80016c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80016c8:	f7ff faec 	bl	8000ca4 <__aeabi_fmul>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4610      	mov	r0, r2
 80016d8:	f7ff f9dc 	bl	8000a94 <__addsf3>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b46      	ldr	r3, [pc, #280]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 80016e2:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 80016e4:	4943      	ldr	r1, [pc, #268]	; (80017f4 <MadgwickAHRSupdateIMU+0x74c>)
 80016e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80016e8:	f7ff fadc 	bl	8000ca4 <__aeabi_fmul>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b43      	ldr	r3, [pc, #268]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f7ff f9cc 	bl	8000a94 <__addsf3>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 8001702:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001704:	493b      	ldr	r1, [pc, #236]	; (80017f4 <MadgwickAHRSupdateIMU+0x74c>)
 8001706:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001708:	f7ff facc 	bl	8000ca4 <__aeabi_fmul>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7ff f9bc 	bl	8000a94 <__addsf3>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b38      	ldr	r3, [pc, #224]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 8001722:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001724:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a33      	ldr	r2, [pc, #204]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fab8 	bl	8000ca4 <__aeabi_fmul>
 8001734:	4603      	mov	r3, r0
 8001736:	461c      	mov	r4, r3
 8001738:	4b30      	ldr	r3, [pc, #192]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a2f      	ldr	r2, [pc, #188]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff faae 	bl	8000ca4 <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	4619      	mov	r1, r3
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff f9a1 	bl	8000a94 <__addsf3>
 8001752:	4603      	mov	r3, r0
 8001754:	461c      	mov	r4, r3
 8001756:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a29      	ldr	r2, [pc, #164]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fa9f 	bl	8000ca4 <__aeabi_fmul>
 8001766:	4603      	mov	r3, r0
 8001768:	4619      	mov	r1, r3
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff f992 	bl	8000a94 <__addsf3>
 8001770:	4603      	mov	r3, r0
 8001772:	461c      	mov	r4, r3
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a22      	ldr	r2, [pc, #136]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fa90 	bl	8000ca4 <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	4619      	mov	r1, r3
 8001788:	4620      	mov	r0, r4
 800178a:	f7ff f983 	bl	8000a94 <__addsf3>
 800178e:	4603      	mov	r3, r0
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f839 	bl	8001808 <invSqrt>
 8001796:	6578      	str	r0, [r7, #84]	; 0x54
	q0 *= recipNorm;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fa80 	bl	8000ca4 <__aeabi_fmul>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MadgwickAHRSupdateIMU+0x750>)
 80017aa:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fa76 	bl	8000ca4 <__aeabi_fmul>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MadgwickAHRSupdateIMU+0x754>)
 80017be:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fa6c 	bl	8000ca4 <__aeabi_fmul>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MadgwickAHRSupdateIMU+0x758>)
 80017d2:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fa62 	bl	8000ca4 <__aeabi_fmul>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <MadgwickAHRSupdateIMU+0x75c>)
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	376c      	adds	r7, #108	; 0x6c
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd90      	pop	{r4, r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	3b03126f 	.word	0x3b03126f
 80017f8:	20000004 	.word	0x20000004
 80017fc:	20000220 	.word	0x20000220
 8001800:	20000224 	.word	0x20000224
 8001804:	20000228 	.word	0x20000228

08001808 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8001810:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fa45 	bl	8000ca4 <__aeabi_fmul>
 800181a:	4603      	mov	r3, r0
 800181c:	617b      	str	r3, [r7, #20]
	float y = x;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	105a      	asrs	r2, r3, #1
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <invSqrt+0x74>)
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	6979      	ldr	r1, [r7, #20]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa2f 	bl	8000ca4 <__aeabi_fmul>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f7ff fa28 	bl	8000ca4 <__aeabi_fmul>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800185c:	f7ff f918 	bl	8000a90 <__aeabi_fsub>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f7ff fa1b 	bl	8000ca4 <__aeabi_fmul>
 800186e:	4603      	mov	r3, r0
 8001870:	613b      	str	r3, [r7, #16]
	return y;
 8001872:	693b      	ldr	r3, [r7, #16]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	5f3759df 	.word	0x5f3759df

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001884:	f001 faf8 	bl	8002e78 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001888:	f000 f82e 	bl	80018e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188c:	f000 fa8c 	bl	8001da8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001890:	f000 fa5c 	bl	8001d4c <MX_DMA_Init>
  MX_I2C1_Init();
 8001894:	f000 f8ee 	bl	8001a74 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001898:	f000 f9aa 	bl	8001bf0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800189c:	f000 fa2c 	bl	8001cf8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80018a0:	f000 f916 	bl	8001ad0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80018a4:	f000 f87c 	bl	80019a0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  InitMPU6050();
 80018a8:	f000 fed2 	bl	8002650 <InitMPU6050>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)&zntime, 1);
 80018ac:	2301      	movs	r3, #1
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <main+0x58>)
 80018b0:	2100      	movs	r1, #0
 80018b2:	480a      	ldr	r0, [pc, #40]	; (80018dc <main+0x5c>)
 80018b4:	f006 f9bc 	bl	8007c30 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018b8:	2108      	movs	r1, #8
 80018ba:	4809      	ldr	r0, [pc, #36]	; (80018e0 <main+0x60>)
 80018bc:	f006 f8be 	bl	8007a3c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018c0:	2104      	movs	r1, #4
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <main+0x60>)
 80018c4:	f006 f8ba 	bl	8007a3c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <main+0x60>)
 80018ca:	f006 f815 	bl	80078f8 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <main+0x64>)
 80018d0:	f001 fd7e 	bl	80033d0 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <main+0x54>
 80018d6:	bf00      	nop
 80018d8:	2000047c 	.word	0x2000047c
 80018dc:	20000380 	.word	0x20000380
 80018e0:	20000338 	.word	0x20000338
 80018e4:	2000022c 	.word	0x2000022c

080018e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b094      	sub	sp, #80	; 0x50
 80018ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f2:	2228      	movs	r2, #40	; 0x28
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f007 fd96 	bl	8009428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001918:	2301      	movs	r3, #1
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800191c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001926:	2301      	movs	r3, #1
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192a:	2302      	movs	r3, #2
 800192c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800192e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001934:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001938:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193e:	4618      	mov	r0, r3
 8001940:	f005 f9fa 	bl	8006d38 <HAL_RCC_OscConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800194a:	f000 fed5 	bl	80026f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194e:	230f      	movs	r3, #15
 8001950:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800195a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2102      	movs	r1, #2
 800196a:	4618      	mov	r0, r3
 800196c:	f005 fc66 	bl	800723c <HAL_RCC_ClockConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001976:	f000 febf 	bl	80026f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800197a:	2302      	movs	r3, #2
 800197c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800197e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001982:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	4618      	mov	r0, r3
 8001988:	f005 fdf0 	bl	800756c <HAL_RCCEx_PeriphCLKConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001992:	f000 feb1 	bl	80026f8 <Error_Handler>
  }
}
 8001996:	bf00      	nop
 8001998:	3750      	adds	r7, #80	; 0x50
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	615a      	str	r2, [r3, #20]
 80019b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019b8:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <MX_ADC1_Init+0xcc>)
 80019ba:	4a2d      	ldr	r2, [pc, #180]	; (8001a70 <MX_ADC1_Init+0xd0>)
 80019bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <MX_ADC1_Init+0xcc>)
 80019c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <MX_ADC1_Init+0xcc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <MX_ADC1_Init+0xcc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <MX_ADC1_Init+0xcc>)
 80019d4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <MX_ADC1_Init+0xcc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <MX_ADC1_Init+0xcc>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019e6:	4821      	ldr	r0, [pc, #132]	; (8001a6c <MX_ADC1_Init+0xcc>)
 80019e8:	f001 faa8 	bl	8002f3c <HAL_ADC_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 80019f2:	f000 fe81 	bl	80026f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80019f6:	2304      	movs	r3, #4
 80019f8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80019fe:	2303      	movs	r3, #3
 8001a00:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001a06:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a0a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4813      	ldr	r0, [pc, #76]	; (8001a6c <MX_ADC1_Init+0xcc>)
 8001a1e:	f001 fe3f 	bl	80036a0 <HAL_ADCEx_InjectedConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001a28:	f000 fe66 	bl	80026f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_ADC1_Init+0xcc>)
 8001a3a:	f001 fe31 	bl	80036a0 <HAL_ADCEx_InjectedConfigChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001a44:	f000 fe58 	bl	80026f8 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001a48:	2306      	movs	r3, #6
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_ADC1_Init+0xcc>)
 8001a56:	f001 fe23 	bl	80036a0 <HAL_ADCEx_InjectedConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001a60:	f000 fe4a 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	2000022c 	.word	0x2000022c
 8001a70:	40012400 	.word	0x40012400

08001a74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a7a:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <MX_I2C1_Init+0x54>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a80:	4a12      	ldr	r2, [pc, #72]	; (8001acc <MX_I2C1_Init+0x58>)
 8001a82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <MX_I2C1_Init+0x50>)
 8001ab2:	f002 fca9 	bl	8004408 <HAL_I2C_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001abc:	f000 fe1c 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200002a0 	.word	0x200002a0
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	00061a80 	.word	0x00061a80

08001ad0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b092      	sub	sp, #72	; 0x48
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2220      	movs	r2, #32
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 fc94 	bl	8009428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b00:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b02:	4a3a      	ldr	r2, [pc, #232]	; (8001bec <MX_TIM1_Init+0x11c>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b08:	2247      	movs	r2, #71	; 0x47
 8001b0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8001b12:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b20:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b26:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b2c:	482e      	ldr	r0, [pc, #184]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b2e:	f005 ff35 	bl	800799c <HAL_TIM_PWM_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b38:	f000 fdde 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4827      	ldr	r0, [pc, #156]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b4c:	f007 f9ca 	bl	8008ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b56:	f000 fdcf 	bl	80026f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b5a:	2360      	movs	r3, #96	; 0x60
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b66:	2300      	movs	r3, #0
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	481a      	ldr	r0, [pc, #104]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b80:	f006 fb7c 	bl	800827c <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001b8a:	f000 fdb5 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b92:	2208      	movs	r2, #8
 8001b94:	4619      	mov	r1, r3
 8001b96:	4814      	ldr	r0, [pc, #80]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001b98:	f006 fb70 	bl	800827c <HAL_TIM_PWM_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001ba2:	f000 fda9 	bl	80026f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001bca:	f007 f9e9 	bl	8008fa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001bd4:	f000 fd90 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <MX_TIM1_Init+0x118>)
 8001bda:	f000 ff61 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 8001bde:	bf00      	nop
 8001be0:	3748      	adds	r7, #72	; 0x48
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000338 	.word	0x20000338
 8001bec:	40012c00 	.word	0x40012c00

08001bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	; 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c1c:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001c24:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c26:	2247      	movs	r2, #71	; 0x47
 8001c28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 8001c30:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c32:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001c36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c38:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c44:	482b      	ldr	r0, [pc, #172]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c46:	f005 fe07 	bl	8007858 <HAL_TIM_Base_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001c50:	f000 fd52 	bl	80026f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c54:	4827      	ldr	r0, [pc, #156]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c56:	f005 ff93 	bl	8007b80 <HAL_TIM_IC_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001c60:	f000 fd4a 	bl	80026f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c64:	2304      	movs	r3, #4
 8001c66:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c68:	2350      	movs	r3, #80	; 0x50
 8001c6a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	481e      	ldr	r0, [pc, #120]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c7c:	f006 fbbc 	bl	80083f8 <HAL_TIM_SlaveConfigSynchro>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c86:	f000 fd37 	bl	80026f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4816      	ldr	r0, [pc, #88]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001c9a:	f007 f923 	bl	8008ee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001ca4:	f000 fd28 	bl	80026f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cac:	2301      	movs	r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001cc0:	f006 fa48 	bl	8008154 <HAL_TIM_IC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8001cca:	f000 fd15 	bl	80026f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2204      	movs	r2, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_TIM2_Init+0x104>)
 8001cde:	f006 fa39 	bl	8008154 <HAL_TIM_IC_ConfigChannel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001ce8:	f000 fd06 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3730      	adds	r7, #48	; 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000380 	.word	0x20000380

08001cf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <MX_USART2_UART_Init+0x50>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_USART2_UART_Init+0x4c>)
 8001d30:	f007 f999 	bl	8009066 <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d3a:	f000 fcdd 	bl	80026f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000040c 	.word	0x2000040c
 8001d48:	40004400 	.word	0x40004400

08001d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <MX_DMA_Init+0x58>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <MX_DMA_Init+0x58>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6153      	str	r3, [r2, #20]
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_DMA_Init+0x58>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	200b      	movs	r0, #11
 8001d70:	f001 ff07 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d74:	200b      	movs	r0, #11
 8001d76:	f001 ff20 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f001 feff 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001d84:	200f      	movs	r0, #15
 8001d86:	f001 ff18 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2011      	movs	r0, #17
 8001d90:	f001 fef7 	bl	8003b82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d94:	2011      	movs	r0, #17
 8001d96:	f001 ff10 	bl	8003bba <HAL_NVIC_EnableIRQ>

}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000

08001da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a27      	ldr	r2, [pc, #156]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dc2:	f043 0320 	orr.w	r3, r3, #32
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_GPIO_Init+0xb8>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e0a:	4816      	ldr	r0, [pc, #88]	; (8001e64 <MX_GPIO_Init+0xbc>)
 8001e0c:	f002 fae4 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR2_Pin|DIR1_Pin|EN1_Pin, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_GPIO_Init+0xc0>)
 8001e18:	f002 fade 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EN2_Pin */
  GPIO_InitStruct.Pin = EN2_Pin;
 8001e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e22:	2301      	movs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN2_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0310 	add.w	r3, r7, #16
 8001e32:	4619      	mov	r1, r3
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <MX_GPIO_Init+0xbc>)
 8001e36:	f002 f94b 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR2_Pin DIR1_Pin EN1_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin|DIR1_Pin|EN1_Pin;
 8001e3a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4619      	mov	r1, r3
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_GPIO_Init+0xc0>)
 8001e54:	f002 f93c 	bl	80040d0 <HAL_GPIO_Init>

}
 8001e58:	bf00      	nop
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010c00 	.word	0x40010c00
 8001e68:	40010800 	.word	0x40010800

08001e6c <MPU6050Read>:
/* USER CODE BEGIN 4 */



void MPU6050Read(void)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b08d      	sub	sp, #52	; 0x34
 8001e70:	af02      	add	r7, sp, #8
  ///////////////////////////склейка/////////////////
	int16_t AccelX = (int16_t)(mpuData[0] << 8 | mpuData[1]);
 8001e72:	4b62      	ldr	r3, [pc, #392]	; (8001ffc <MPU6050Read+0x190>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	4b60      	ldr	r3, [pc, #384]	; (8001ffc <MPU6050Read+0x190>)
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	4313      	orrs	r3, r2
 8001e82:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t AccelY = (int16_t)(mpuData[2] << 8 | mpuData[3]);
 8001e84:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <MPU6050Read+0x190>)
 8001e86:	789b      	ldrb	r3, [r3, #2]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <MPU6050Read+0x190>)
 8001e8e:	78db      	ldrb	r3, [r3, #3]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	4313      	orrs	r3, r2
 8001e94:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t AccelZ = (int16_t)(mpuData[4] << 8 | mpuData[5]);
 8001e96:	4b59      	ldr	r3, [pc, #356]	; (8001ffc <MPU6050Read+0x190>)
 8001e98:	791b      	ldrb	r3, [r3, #4]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <MPU6050Read+0x190>)
 8001ea0:	795b      	ldrb	r3, [r3, #5]
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	847b      	strh	r3, [r7, #34]	; 0x22
	int16_t GyroX = (int16_t)(mpuData[8] << 8 | mpuData[9]);
 8001ea8:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <MPU6050Read+0x190>)
 8001eaa:	7a1b      	ldrb	r3, [r3, #8]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	4b52      	ldr	r3, [pc, #328]	; (8001ffc <MPU6050Read+0x190>)
 8001eb2:	7a5b      	ldrb	r3, [r3, #9]
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	843b      	strh	r3, [r7, #32]
	int16_t GyroY = (int16_t)(mpuData[10] << 8 | mpuData[11]);
 8001eba:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <MPU6050Read+0x190>)
 8001ebc:	7a9b      	ldrb	r3, [r3, #10]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	b21a      	sxth	r2, r3
 8001ec2:	4b4e      	ldr	r3, [pc, #312]	; (8001ffc <MPU6050Read+0x190>)
 8001ec4:	7adb      	ldrb	r3, [r3, #11]
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	83fb      	strh	r3, [r7, #30]
	int16_t GyroZ = (int16_t)(mpuData[12] << 8 | mpuData[13]);
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <MPU6050Read+0x190>)
 8001ece:	7b1b      	ldrb	r3, [r3, #12]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	4b49      	ldr	r3, [pc, #292]	; (8001ffc <MPU6050Read+0x190>)
 8001ed6:	7b5b      	ldrb	r3, [r3, #13]
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4313      	orrs	r3, r2
 8001edc:	83bb      	strh	r3, [r7, #28]
/////////////////////////////обработка////////////////////
    float accel_x = AccelX / 8192.0f;
 8001ede:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fe8a 	bl	8000bfc <__aeabi_i2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff8c 	bl	8000e0c <__aeabi_fdiv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	61bb      	str	r3, [r7, #24]
    float accel_y = AccelY / 8192.0f;
 8001ef8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fe7d 	bl	8000bfc <__aeabi_i2f>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe ff7f 	bl	8000e0c <__aeabi_fdiv>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	617b      	str	r3, [r7, #20]
    float accel_z = AccelZ / 8192.0f;
 8001f12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fe70 	bl	8000bfc <__aeabi_i2f>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe ff72 	bl	8000e0c <__aeabi_fdiv>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]
    float gyro_x = GyroX / 939.650784f;
 8001f2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fe63 	bl	8000bfc <__aeabi_i2f>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4931      	ldr	r1, [pc, #196]	; (8002000 <MPU6050Read+0x194>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe ff66 	bl	8000e0c <__aeabi_fdiv>
 8001f40:	4603      	mov	r3, r0
 8001f42:	60fb      	str	r3, [r7, #12]
    float gyro_y = GyroY / 939.650784f;
 8001f44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fe57 	bl	8000bfc <__aeabi_i2f>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	492b      	ldr	r1, [pc, #172]	; (8002000 <MPU6050Read+0x194>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe ff5a 	bl	8000e0c <__aeabi_fdiv>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60bb      	str	r3, [r7, #8]
    float gyro_z = GyroZ / 939.650784f;
 8001f5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fe4b 	bl	8000bfc <__aeabi_i2f>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4925      	ldr	r1, [pc, #148]	; (8002000 <MPU6050Read+0x194>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe ff4e 	bl	8000e0c <__aeabi_fdiv>
 8001f70:	4603      	mov	r3, r0
 8001f72:	607b      	str	r3, [r7, #4]
 /////////////////////////вычисление////////////////////
    MadgwickAHRSupdateIMU(gyro_z, gyro_y, -gyro_x, accel_z, accel_y, -accel_x);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f80:	9301      	str	r3, [sp, #4]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff f88c 	bl	80010a8 <MadgwickAHRSupdateIMU>
    pitch = (asinf(-2.f * (q1*q3 - q2*q0))) * 100000 + 5500;
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <MPU6050Read+0x198>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <MPU6050Read+0x19c>)
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fe82 	bl	8000ca4 <__aeabi_fmul>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461c      	mov	r4, r3
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <MPU6050Read+0x1a0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <MPU6050Read+0x1a4>)
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fe78 	bl	8000ca4 <__aeabi_fmul>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7fe fd69 	bl	8000a90 <__aeabi_fsub>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fe6d 	bl	8000ca4 <__aeabi_fmul>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f00a f90b 	bl	800c1e8 <asinf>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	490f      	ldr	r1, [pc, #60]	; (8002014 <MPU6050Read+0x1a8>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fe64 	bl	8000ca4 <__aeabi_fmul>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	490e      	ldr	r1, [pc, #56]	; (8002018 <MPU6050Read+0x1ac>)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fd57 	bl	8000a94 <__addsf3>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff f837 	bl	800105c <__aeabi_f2iz>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <MPU6050Read+0x1b0>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	372c      	adds	r7, #44	; 0x2c
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd90      	pop	{r4, r7, pc}
 8001ffc:	20000450 	.word	0x20000450
 8002000:	446ae9a6 	.word	0x446ae9a6
 8002004:	20000220 	.word	0x20000220
 8002008:	20000228 	.word	0x20000228
 800200c:	20000224 	.word	0x20000224
 8002010:	20000004 	.word	0x20000004
 8002014:	47c35000 	.word	0x47c35000
 8002018:	45abe000 	.word	0x45abe000
 800201c:	200004c0 	.word	0x200004c0

08002020 <angleRegulation>:

void angleRegulation() {
 8002020:	b598      	push	{r3, r4, r7, lr}
 8002022:	af00      	add	r7, sp, #0
    angErr = pitch + setAng;
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <angleRegulation+0x194>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <angleRegulation+0x198>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4413      	add	r3, r2
 800202e:	4a63      	ldr	r2, [pc, #396]	; (80021bc <angleRegulation+0x19c>)
 8002030:	6013      	str	r3, [r2, #0]
    filtAngErr = (1 - ANG_DIFF_FILT)*prevAngErr + ANG_DIFF_FILT*angErr;
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <angleRegulation+0x1a0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fde0 	bl	8000bfc <__aeabi_i2f>
 800203c:	4603      	mov	r3, r0
 800203e:	4961      	ldr	r1, [pc, #388]	; (80021c4 <angleRegulation+0x1a4>)
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fe2f 	bl	8000ca4 <__aeabi_fmul>
 8002046:	4603      	mov	r3, r0
 8002048:	461c      	mov	r4, r3
 800204a:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <angleRegulation+0x19c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fdd4 	bl	8000bfc <__aeabi_i2f>
 8002054:	4603      	mov	r3, r0
 8002056:	495c      	ldr	r1, [pc, #368]	; (80021c8 <angleRegulation+0x1a8>)
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fe23 	bl	8000ca4 <__aeabi_fmul>
 800205e:	4603      	mov	r3, r0
 8002060:	4619      	mov	r1, r3
 8002062:	4620      	mov	r0, r4
 8002064:	f7fe fd16 	bl	8000a94 <__addsf3>
 8002068:	4603      	mov	r3, r0
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fff6 	bl	800105c <__aeabi_f2iz>
 8002070:	4603      	mov	r3, r0
 8002072:	4a56      	ldr	r2, [pc, #344]	; (80021cc <angleRegulation+0x1ac>)
 8002074:	6013      	str	r3, [r2, #0]
    prevAngErr = filtAngErr;
 8002076:	4b55      	ldr	r3, [pc, #340]	; (80021cc <angleRegulation+0x1ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <angleRegulation+0x1a0>)
 800207c:	6013      	str	r3, [r2, #0]

    Pa = angErr;
 800207e:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <angleRegulation+0x19c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a53      	ldr	r2, [pc, #332]	; (80021d0 <angleRegulation+0x1b0>)
 8002084:	6013      	str	r3, [r2, #0]
    Ia = Ia + (angErr * dt);
 8002086:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <angleRegulation+0x1b4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fdb6 	bl	8000bfc <__aeabi_i2f>
 8002090:	4604      	mov	r4, r0
 8002092:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <angleRegulation+0x19c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fdb0 	bl	8000bfc <__aeabi_i2f>
 800209c:	4602      	mov	r2, r0
 800209e:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <angleRegulation+0x1b8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4619      	mov	r1, r3
 80020a4:	4610      	mov	r0, r2
 80020a6:	f7fe fdfd 	bl	8000ca4 <__aeabi_fmul>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4619      	mov	r1, r3
 80020ae:	4620      	mov	r0, r4
 80020b0:	f7fe fcf0 	bl	8000a94 <__addsf3>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe ffd0 	bl	800105c <__aeabi_f2iz>
 80020bc:	4603      	mov	r3, r0
 80020be:	4a45      	ldr	r2, [pc, #276]	; (80021d4 <angleRegulation+0x1b4>)
 80020c0:	6013      	str	r3, [r2, #0]
    if (Ia > 700) {
 80020c2:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <angleRegulation+0x1b4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80020ca:	dd03      	ble.n	80020d4 <angleRegulation+0xb4>
    	Ia = 700;
 80020cc:	4b41      	ldr	r3, [pc, #260]	; (80021d4 <angleRegulation+0x1b4>)
 80020ce:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80020d2:	601a      	str	r2, [r3, #0]
    }
    if (Ia < -700) {
 80020d4:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <angleRegulation+0x1b4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f513 7f2f 	cmn.w	r3, #700	; 0x2bc
 80020dc:	da02      	bge.n	80020e4 <angleRegulation+0xc4>
    	Ia = -700;
 80020de:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <angleRegulation+0x1b4>)
 80020e0:	4a3e      	ldr	r2, [pc, #248]	; (80021dc <angleRegulation+0x1bc>)
 80020e2:	601a      	str	r2, [r3, #0]
    }
    Da = (filtAngErr - prevFiltAngErr) / dt;
 80020e4:	4b39      	ldr	r3, [pc, #228]	; (80021cc <angleRegulation+0x1ac>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <angleRegulation+0x1c0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fd84 	bl	8000bfc <__aeabi_i2f>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b38      	ldr	r3, [pc, #224]	; (80021d8 <angleRegulation+0x1b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f7fe fe85 	bl	8000e0c <__aeabi_fdiv>
 8002102:	4603      	mov	r3, r0
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe ffa9 	bl	800105c <__aeabi_f2iz>
 800210a:	4603      	mov	r3, r0
 800210c:	4a35      	ldr	r2, [pc, #212]	; (80021e4 <angleRegulation+0x1c4>)
 800210e:	6013      	str	r3, [r2, #0]
    prevFiltAngErr = filtAngErr;
 8002110:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <angleRegulation+0x1ac>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <angleRegulation+0x1c0>)
 8002116:	6013      	str	r3, [r2, #0]
    if (angErr > MAX_ANGLE || angErr < -MAX_ANGLE) {
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <angleRegulation+0x19c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002120:	4293      	cmp	r3, r2
 8002122:	dc04      	bgt.n	800212e <angleRegulation+0x10e>
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <angleRegulation+0x19c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <angleRegulation+0x1c8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	da03      	bge.n	8002136 <angleRegulation+0x116>
    	speed = 0;
 800212e:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <angleRegulation+0x1cc>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
    	return;
 8002134:	e03c      	b.n	80021b0 <angleRegulation+0x190>
    }

    speed = ((int)(Pa*kp) + (int)(Ia*ki) + (int)(Da*kd)) / 10;
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <angleRegulation+0x1b0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fd5e 	bl	8000bfc <__aeabi_i2f>
 8002140:	4602      	mov	r2, r0
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <angleRegulation+0x1d0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f7fe fdab 	bl	8000ca4 <__aeabi_fmul>
 800214e:	4603      	mov	r3, r0
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe ff83 	bl	800105c <__aeabi_f2iz>
 8002156:	4604      	mov	r4, r0
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <angleRegulation+0x1b4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fd4d 	bl	8000bfc <__aeabi_i2f>
 8002162:	4602      	mov	r2, r0
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <angleRegulation+0x1d4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	4610      	mov	r0, r2
 800216c:	f7fe fd9a 	bl	8000ca4 <__aeabi_fmul>
 8002170:	4603      	mov	r3, r0
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe ff72 	bl	800105c <__aeabi_f2iz>
 8002178:	4603      	mov	r3, r0
 800217a:	441c      	add	r4, r3
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <angleRegulation+0x1c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fd3b 	bl	8000bfc <__aeabi_i2f>
 8002186:	4602      	mov	r2, r0
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <angleRegulation+0x1d8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f7fe fd88 	bl	8000ca4 <__aeabi_fmul>
 8002194:	4603      	mov	r3, r0
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ff60 	bl	800105c <__aeabi_f2iz>
 800219c:	4603      	mov	r3, r0
 800219e:	4423      	add	r3, r4
 80021a0:	4a16      	ldr	r2, [pc, #88]	; (80021fc <angleRegulation+0x1dc>)
 80021a2:	fb82 1203 	smull	r1, r2, r2, r3
 80021a6:	1092      	asrs	r2, r2, #2
 80021a8:	17db      	asrs	r3, r3, #31
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <angleRegulation+0x1cc>)
 80021ae:	6013      	str	r3, [r2, #0]

}
 80021b0:	bd98      	pop	{r3, r4, r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200004c0 	.word	0x200004c0
 80021b8:	200004a4 	.word	0x200004a4
 80021bc:	200004b8 	.word	0x200004b8
 80021c0:	2000049c 	.word	0x2000049c
 80021c4:	3f7d70a4 	.word	0x3f7d70a4
 80021c8:	3c23d70a 	.word	0x3c23d70a
 80021cc:	200004b4 	.word	0x200004b4
 80021d0:	200004c4 	.word	0x200004c4
 80021d4:	200004ac 	.word	0x200004ac
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	fffffd44 	.word	0xfffffd44
 80021e0:	200004a0 	.word	0x200004a0
 80021e4:	200004c8 	.word	0x200004c8
 80021e8:	ffffd8f0 	.word	0xffffd8f0
 80021ec:	20000484 	.word	0x20000484
 80021f0:	20000010 	.word	0x20000010
 80021f4:	20000014 	.word	0x20000014
 80021f8:	20000018 	.word	0x20000018
 80021fc:	66666667 	.word	0x66666667

08002200 <speedRegulation>:

void speedRegulation() {
 8002200:	b598      	push	{r3, r4, r7, lr}
 8002202:	af00      	add	r7, sp, #0
	filtSpeed = (1-SPEED_FILT)*prevSpeed + SPEED_FILT*speed;
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <speedRegulation+0x108>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fcf7 	bl	8000bfc <__aeabi_i2f>
 800220e:	4603      	mov	r3, r0
 8002210:	493e      	ldr	r1, [pc, #248]	; (800230c <speedRegulation+0x10c>)
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fd46 	bl	8000ca4 <__aeabi_fmul>
 8002218:	4603      	mov	r3, r0
 800221a:	461c      	mov	r4, r3
 800221c:	4b3c      	ldr	r3, [pc, #240]	; (8002310 <speedRegulation+0x110>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fceb 	bl	8000bfc <__aeabi_i2f>
 8002226:	4603      	mov	r3, r0
 8002228:	493a      	ldr	r1, [pc, #232]	; (8002314 <speedRegulation+0x114>)
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fd3a 	bl	8000ca4 <__aeabi_fmul>
 8002230:	4603      	mov	r3, r0
 8002232:	4619      	mov	r1, r3
 8002234:	4620      	mov	r0, r4
 8002236:	f7fe fc2d 	bl	8000a94 <__addsf3>
 800223a:	4603      	mov	r3, r0
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe ff0d 	bl	800105c <__aeabi_f2iz>
 8002242:	4603      	mov	r3, r0
 8002244:	4a34      	ldr	r2, [pc, #208]	; (8002318 <speedRegulation+0x118>)
 8002246:	6013      	str	r3, [r2, #0]
	prevSpeed = filtSpeed;
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <speedRegulation+0x118>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2e      	ldr	r2, [pc, #184]	; (8002308 <speedRegulation+0x108>)
 800224e:	6013      	str	r3, [r2, #0]
	speedErr = filtSpeed - setSpeed;
 8002250:	4b31      	ldr	r3, [pc, #196]	; (8002318 <speedRegulation+0x118>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <speedRegulation+0x11c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	4a31      	ldr	r2, [pc, #196]	; (8002320 <speedRegulation+0x120>)
 800225c:	6013      	str	r3, [r2, #0]
	Pv = speedErr;
 800225e:	4b30      	ldr	r3, [pc, #192]	; (8002320 <speedRegulation+0x120>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a30      	ldr	r2, [pc, #192]	; (8002324 <speedRegulation+0x124>)
 8002264:	6013      	str	r3, [r2, #0]
	Dv = speedErr - prevSpeedErr;
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <speedRegulation+0x120>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <speedRegulation+0x128>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	4a2e      	ldr	r2, [pc, #184]	; (800232c <speedRegulation+0x12c>)
 8002272:	6013      	str	r3, [r2, #0]
	prevSpeedErr = speedErr;
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <speedRegulation+0x120>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a2b      	ldr	r2, [pc, #172]	; (8002328 <speedRegulation+0x128>)
 800227a:	6013      	str	r3, [r2, #0]
	Iv += speed - setSpeed;
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <speedRegulation+0x110>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b26      	ldr	r3, [pc, #152]	; (800231c <speedRegulation+0x11c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	1ad2      	subs	r2, r2, r3
 8002286:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <speedRegulation+0x130>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a28      	ldr	r2, [pc, #160]	; (8002330 <speedRegulation+0x130>)
 800228e:	6013      	str	r3, [r2, #0]

	setAng = Pv*kpv + Iv*kiv + Dv*kdv;
 8002290:	4b24      	ldr	r3, [pc, #144]	; (8002324 <speedRegulation+0x124>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fcb1 	bl	8000bfc <__aeabi_i2f>
 800229a:	4602      	mov	r2, r0
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <speedRegulation+0x134>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7fe fcfe 	bl	8000ca4 <__aeabi_fmul>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461c      	mov	r4, r3
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <speedRegulation+0x130>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fca3 	bl	8000bfc <__aeabi_i2f>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <speedRegulation+0x138>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f7fe fcf0 	bl	8000ca4 <__aeabi_fmul>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4619      	mov	r1, r3
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7fe fbe3 	bl	8000a94 <__addsf3>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461c      	mov	r4, r3
 80022d2:	4b16      	ldr	r3, [pc, #88]	; (800232c <speedRegulation+0x12c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe fc90 	bl	8000bfc <__aeabi_i2f>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <speedRegulation+0x13c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f7fe fcdd 	bl	8000ca4 <__aeabi_fmul>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4619      	mov	r1, r3
 80022ee:	4620      	mov	r0, r4
 80022f0:	f7fe fbd0 	bl	8000a94 <__addsf3>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe feb0 	bl	800105c <__aeabi_f2iz>
 80022fc:	4603      	mov	r3, r0
 80022fe:	4a10      	ldr	r2, [pc, #64]	; (8002340 <speedRegulation+0x140>)
 8002300:	6013      	str	r3, [r2, #0]
}
 8002302:	bf00      	nop
 8002304:	bd98      	pop	{r3, r4, r7, pc}
 8002306:	bf00      	nop
 8002308:	2000048c 	.word	0x2000048c
 800230c:	3f7851ec 	.word	0x3f7851ec
 8002310:	20000484 	.word	0x20000484
 8002314:	3cf5c28f 	.word	0x3cf5c28f
 8002318:	20000488 	.word	0x20000488
 800231c:	200004a8 	.word	0x200004a8
 8002320:	200004bc 	.word	0x200004bc
 8002324:	200004cc 	.word	0x200004cc
 8002328:	20000498 	.word	0x20000498
 800232c:	200004d0 	.word	0x200004d0
 8002330:	200004b0 	.word	0x200004b0
 8002334:	2000001c 	.word	0x2000001c
 8002338:	20000020 	.word	0x20000020
 800233c:	20000024 	.word	0x20000024
 8002340:	200004a4 	.word	0x200004a4

08002344 <stepper_motor>:

void stepper_motor()
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	if (speed > 3500) {
 8002348:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <stepper_motor+0xc0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002350:	4293      	cmp	r3, r2
 8002352:	dd03      	ble.n	800235c <stepper_motor+0x18>
		speed = 3500;
 8002354:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <stepper_motor+0xc0>)
 8002356:	f640 52ac 	movw	r2, #3500	; 0xdac
 800235a:	601a      	str	r2, [r3, #0]
	}
	if (speed < -3500) {
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <stepper_motor+0xc0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a29      	ldr	r2, [pc, #164]	; (8002408 <stepper_motor+0xc4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	da02      	bge.n	800236c <stepper_motor+0x28>
		speed = -3500;
 8002366:	4b27      	ldr	r3, [pc, #156]	; (8002404 <stepper_motor+0xc0>)
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <stepper_motor+0xc4>)
 800236a:	601a      	str	r2, [r3, #0]
	}
	if (speed == 0) {
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <stepper_motor+0xc0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d044      	beq.n	80023fe <stepper_motor+0xba>
		return;
	} else if (speed > 0) {
 8002374:	4b23      	ldr	r3, [pc, #140]	; (8002404 <stepper_motor+0xc0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	dd14      	ble.n	80023a6 <stepper_motor+0x62>
		HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_SET);
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002382:	4822      	ldr	r0, [pc, #136]	; (800240c <stepper_motor+0xc8>)
 8002384:	f002 f828 	bl	80043d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_SET);
 8002388:	2201      	movs	r2, #1
 800238a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238e:	481f      	ldr	r0, [pc, #124]	; (800240c <stepper_motor+0xc8>)
 8002390:	f002 f822 	bl	80043d8 <HAL_GPIO_WritePin>
		period = 65000/speed;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <stepper_motor+0xc0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800239c:	fb92 f3f3 	sdiv	r3, r2, r3
 80023a0:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <stepper_motor+0xcc>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e012      	b.n	80023cc <stepper_motor+0x88>
	} else {
		HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 80023a6:	2200      	movs	r2, #0
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	4817      	ldr	r0, [pc, #92]	; (800240c <stepper_motor+0xc8>)
 80023ae:	f002 f813 	bl	80043d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 80023b2:	2200      	movs	r2, #0
 80023b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b8:	4814      	ldr	r0, [pc, #80]	; (800240c <stepper_motor+0xc8>)
 80023ba:	f002 f80d 	bl	80043d8 <HAL_GPIO_WritePin>
		period = -65000/speed;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <stepper_motor+0xc0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a14      	ldr	r2, [pc, #80]	; (8002414 <stepper_motor+0xd0>)
 80023c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <stepper_motor+0xcc>)
 80023ca:	6013      	str	r3, [r2, #0]
	}
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023d2:	480e      	ldr	r0, [pc, #56]	; (800240c <stepper_motor+0xc8>)
 80023d4:	f002 f800 	bl	80043d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 80023d8:	2200      	movs	r2, #0
 80023da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023de:	480e      	ldr	r0, [pc, #56]	; (8002418 <stepper_motor+0xd4>)
 80023e0:	f001 fffa 	bl	80043d8 <HAL_GPIO_WritePin>
	pwm = period / 2;
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <stepper_motor+0xcc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0fda      	lsrs	r2, r3, #31
 80023ea:	4413      	add	r3, r2
 80023ec:	105b      	asrs	r3, r3, #1
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <stepper_motor+0xd8>)
 80023f2:	601a      	str	r2, [r3, #0]

    TIM1->ARR = period;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <stepper_motor+0xcc>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b09      	ldr	r3, [pc, #36]	; (8002420 <stepper_motor+0xdc>)
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80023fc:	e000      	b.n	8002400 <stepper_motor+0xbc>
		return;
 80023fe:	bf00      	nop
}
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000484 	.word	0x20000484
 8002408:	fffff254 	.word	0xfffff254
 800240c:	40010800 	.word	0x40010800
 8002410:	20000008 	.word	0x20000008
 8002414:	ffff0218 	.word	0xffff0218
 8002418:	40010c00 	.word	0x40010c00
 800241c:	20000480 	.word	0x20000480
 8002420:	40012c00 	.word	0x40012c00

08002424 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af02      	add	r7, sp, #8
 800242a:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002434:	d118      	bne.n	8002468 <HAL_TIM_IC_CaptureCallback+0x44>
        {
           HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_Address, ACCEL_XOUT_H_REG, 1, mpuData, 14);
 8002436:	230e      	movs	r3, #14
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	2301      	movs	r3, #1
 8002440:	223b      	movs	r2, #59	; 0x3b
 8002442:	21d0      	movs	r1, #208	; 0xd0
 8002444:	480b      	ldr	r0, [pc, #44]	; (8002474 <HAL_TIM_IC_CaptureCallback+0x50>)
 8002446:	f002 fa1d 	bl	8004884 <HAL_I2C_Mem_Read_DMA>
           counter++;
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_TIM_IC_CaptureCallback+0x54>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002452:	6013      	str	r3, [r2, #0]
           if (counter > 150) {
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b96      	cmp	r3, #150	; 0x96
 800245a:	dd05      	ble.n	8002468 <HAL_TIM_IC_CaptureCallback+0x44>
        	   HAL_ADCEx_InjectedStart_IT(&hadc1);
 800245c:	4807      	ldr	r0, [pc, #28]	; (800247c <HAL_TIM_IC_CaptureCallback+0x58>)
 800245e:	f001 f863 	bl	8003528 <HAL_ADCEx_InjectedStart_IT>
        	   counter = 0;
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
           }
        }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000450 	.word	0x20000450
 8002474:	200002a0 	.word	0x200002a0
 8002478:	20000490 	.word	0x20000490
 800247c:	2000022c 	.word	0x2000022c

08002480 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  kp = (float)HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_1) / 1000;
 8002488:	2101      	movs	r1, #1
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f001 f8da 	bl	8003644 <HAL_ADCEx_InjectedGetValue>
 8002490:	4603      	mov	r3, r0
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fbae 	bl	8000bf4 <__aeabi_ui2f>
 8002498:	4603      	mov	r3, r0
 800249a:	4916      	ldr	r1, [pc, #88]	; (80024f4 <HAL_ADCEx_InjectedConvCpltCallback+0x74>)
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fcb5 	bl	8000e0c <__aeabi_fdiv>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_ADCEx_InjectedConvCpltCallback+0x78>)
 80024a8:	601a      	str	r2, [r3, #0]
  ki = HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_2) / 50;
 80024aa:	2102      	movs	r1, #2
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f001 f8c9 	bl	8003644 <HAL_ADCEx_InjectedGetValue>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_ADCEx_InjectedConvCpltCallback+0x7c>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fb99 	bl	8000bf4 <__aeabi_ui2f>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <HAL_ADCEx_InjectedConvCpltCallback+0x80>)
 80024c6:	6013      	str	r3, [r2, #0]
  kd = (float)HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_3) / 2000;
 80024c8:	2103      	movs	r1, #3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f001 f8ba 	bl	8003644 <HAL_ADCEx_InjectedGetValue>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fb8e 	bl	8000bf4 <__aeabi_ui2f>
 80024d8:	4603      	mov	r3, r0
 80024da:	490a      	ldr	r1, [pc, #40]	; (8002504 <HAL_ADCEx_InjectedConvCpltCallback+0x84>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe fc95 	bl	8000e0c <__aeabi_fdiv>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 80024e8:	601a      	str	r2, [r3, #0]
  //kpv = (float)HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_1) / 200;
  //kiv = (float)HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_2) / 25000;
  //kdv = (float)HAL_ADCEx_InjectedGetValue(hadc1, ADC_INJECTED_RANK_3) / 50;
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	447a0000 	.word	0x447a0000
 80024f8:	20000010 	.word	0x20000010
 80024fc:	51eb851f 	.word	0x51eb851f
 8002500:	20000014 	.word	0x20000014
 8002504:	44fa0000 	.word	0x44fa0000
 8002508:	20000018 	.word	0x20000018

0800250c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af02      	add	r7, sp, #8
 8002512:	6078      	str	r0, [r7, #4]
	  MPU6050Read();
 8002514:	f7ff fcaa 	bl	8001e6c <MPU6050Read>
	  angleRegulation();
 8002518:	f7ff fd82 	bl	8002020 <angleRegulation>
	  stepper_motor();
 800251c:	f7ff ff12 	bl	8002344 <stepper_motor>
	  if (counter2 < 2100) {
 8002520:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f640 0233 	movw	r2, #2099	; 0x833
 8002528:	4293      	cmp	r3, r2
 800252a:	dc04      	bgt.n	8002536 <HAL_I2C_MemRxCpltCallback+0x2a>
		  counter2++;
 800252c:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	4a2c      	ldr	r2, [pc, #176]	; (80025e4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8002534:	6013      	str	r3, [r2, #0]
	  }

	  if (counter2 > 1000) {
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800253e:	dd01      	ble.n	8002544 <HAL_I2C_MemRxCpltCallback+0x38>
		  speedRegulation();
 8002540:	f7ff fe5e 	bl	8002200 <speedRegulation>
	  }

	  sprintf(uartMsg, "$%d %d %d, %d;", (int)(Pa*kp), (int)(Ia*ki), (int)(Da*kd), (int)(filtAngErr));
 8002544:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_I2C_MemRxCpltCallback+0xdc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe fb57 	bl	8000bfc <__aeabi_i2f>
 800254e:	4602      	mov	r2, r0
 8002550:	4b26      	ldr	r3, [pc, #152]	; (80025ec <HAL_I2C_MemRxCpltCallback+0xe0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f7fe fba4 	bl	8000ca4 <__aeabi_fmul>
 800255c:	4603      	mov	r3, r0
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fd7c 	bl	800105c <__aeabi_f2iz>
 8002564:	4604      	mov	r4, r0
 8002566:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fb46 	bl	8000bfc <__aeabi_i2f>
 8002570:	4602      	mov	r2, r0
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <HAL_I2C_MemRxCpltCallback+0xe8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	4610      	mov	r0, r2
 800257a:	f7fe fb93 	bl	8000ca4 <__aeabi_fmul>
 800257e:	4603      	mov	r3, r0
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fd6b 	bl	800105c <__aeabi_f2iz>
 8002586:	4605      	mov	r5, r0
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_I2C_MemRxCpltCallback+0xec>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fb35 	bl	8000bfc <__aeabi_i2f>
 8002592:	4602      	mov	r2, r0
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_I2C_MemRxCpltCallback+0xf0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f7fe fb82 	bl	8000ca4 <__aeabi_fmul>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fd5a 	bl	800105c <__aeabi_f2iz>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_I2C_MemRxCpltCallback+0xf4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	9200      	str	r2, [sp, #0]
 80025b2:	462b      	mov	r3, r5
 80025b4:	4622      	mov	r2, r4
 80025b6:	4913      	ldr	r1, [pc, #76]	; (8002604 <HAL_I2C_MemRxCpltCallback+0xf8>)
 80025b8:	4813      	ldr	r0, [pc, #76]	; (8002608 <HAL_I2C_MemRxCpltCallback+0xfc>)
 80025ba:	f007 fb9d 	bl	8009cf8 <siprintf>
	  //sprintf(uartMsg, "$%d %d %d, %d;", (int)(Pv*kpv), (int)(Iv*kiv), (int)(Dv*kdv), (int)(filtSpeed));
	  //sprintf(msg, "$%.3f %d %.3f;", (float)(kp), (int)(ki), (float)(kd));
	  //sprintf(uartMsg, "$%.3f %.3f %.3f;", (float)(kpv), (float)(kiv), (float)(kdv));
	  HAL_UART_Transmit(&huart2, (uint8_t*)uartMsg, sizeof(uartMsg), HAL_MAX_DELAY);
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	2219      	movs	r2, #25
 80025c4:	4910      	ldr	r1, [pc, #64]	; (8002608 <HAL_I2C_MemRxCpltCallback+0xfc>)
 80025c6:	4811      	ldr	r0, [pc, #68]	; (800260c <HAL_I2C_MemRxCpltCallback+0x100>)
 80025c8:	f006 fd9a 	bl	8009100 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), HAL_MAX_DELAY);
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	2202      	movs	r2, #2
 80025d2:	490f      	ldr	r1, [pc, #60]	; (8002610 <HAL_I2C_MemRxCpltCallback+0x104>)
 80025d4:	480d      	ldr	r0, [pc, #52]	; (800260c <HAL_I2C_MemRxCpltCallback+0x100>)
 80025d6:	f006 fd93 	bl	8009100 <HAL_UART_Transmit>

}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bdb0      	pop	{r4, r5, r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000494 	.word	0x20000494
 80025e8:	200004c4 	.word	0x200004c4
 80025ec:	20000010 	.word	0x20000010
 80025f0:	200004ac 	.word	0x200004ac
 80025f4:	20000014 	.word	0x20000014
 80025f8:	200004c8 	.word	0x200004c8
 80025fc:	20000018 	.word	0x20000018
 8002600:	200004b4 	.word	0x200004b4
 8002604:	0800c578 	.word	0x0800c578
 8002608:	20000460 	.word	0x20000460
 800260c:	2000040c 	.word	0x2000040c
 8002610:	0800c588 	.word	0x0800c588

08002614 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d109      	bne.n	800263a <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		htim1.Instance->CCR3 = pwm;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c
		htim1.Instance->CCR2 = pwm;
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	40012c00 	.word	0x40012c00
 8002648:	20000480 	.word	0x20000480
 800264c:	20000338 	.word	0x20000338

08002650 <InitMPU6050>:

void InitMPU6050(void) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af04      	add	r7, sp, #16
        uint8_t mpuData;
        mpuData = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_Address, 0x6B, 1, &mpuData, 1, 500); //dont sleep
 800265a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800265e:	9302      	str	r3, [sp, #8]
 8002660:	2301      	movs	r3, #1
 8002662:	9301      	str	r3, [sp, #4]
 8002664:	1dfb      	adds	r3, r7, #7
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2301      	movs	r3, #1
 800266a:	226b      	movs	r2, #107	; 0x6b
 800266c:	21d0      	movs	r1, #208	; 0xd0
 800266e:	4821      	ldr	r0, [pc, #132]	; (80026f4 <InitMPU6050+0xa4>)
 8002670:	f002 f80e 	bl	8004690 <HAL_I2C_Mem_Write>

        mpuData = 0x15;
 8002674:	2315      	movs	r3, #21
 8002676:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_Address, 0x19, 1, &mpuData, 1, 500); //  sample rate = 8kHz / 16 = 500Hz
 8002678:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800267c:	9302      	str	r3, [sp, #8]
 800267e:	2301      	movs	r3, #1
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2301      	movs	r3, #1
 8002688:	2219      	movs	r2, #25
 800268a:	21d0      	movs	r1, #208	; 0xd0
 800268c:	4819      	ldr	r0, [pc, #100]	; (80026f4 <InitMPU6050+0xa4>)
 800268e:	f001 ffff 	bl	8004690 <HAL_I2C_Mem_Write>

        mpuData = 0x18;
 8002692:	2318      	movs	r3, #24
 8002694:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_Address, 0x1B, 1, &mpuData, 1, 500); //  gyro full scale = +/- 2000dps
 8002696:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	2301      	movs	r3, #1
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	1dfb      	adds	r3, r7, #7
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2301      	movs	r3, #1
 80026a6:	221b      	movs	r2, #27
 80026a8:	21d0      	movs	r1, #208	; 0xd0
 80026aa:	4812      	ldr	r0, [pc, #72]	; (80026f4 <InitMPU6050+0xa4>)
 80026ac:	f001 fff0 	bl	8004690 <HAL_I2C_Mem_Write>

        mpuData = 0x08;
 80026b0:	2308      	movs	r3, #8
 80026b2:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_Address, 0x1C, 1, &mpuData, 1, 500); //  accelerometer full scale = +/- 4g
 80026b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	2301      	movs	r3, #1
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2301      	movs	r3, #1
 80026c4:	221c      	movs	r2, #28
 80026c6:	21d0      	movs	r1, #208	; 0xd0
 80026c8:	480a      	ldr	r0, [pc, #40]	; (80026f4 <InitMPU6050+0xa4>)
 80026ca:	f001 ffe1 	bl	8004690 <HAL_I2C_Mem_Write>

        mpuData = 0x01;
 80026ce:	2301      	movs	r3, #1
 80026d0:	71fb      	strb	r3, [r7, #7]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_Address, 0x38, 1, &mpuData, 1, 500); //  enable INTA interrupt*/
 80026d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	2301      	movs	r3, #1
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2301      	movs	r3, #1
 80026e2:	2238      	movs	r2, #56	; 0x38
 80026e4:	21d0      	movs	r1, #208	; 0xd0
 80026e6:	4803      	ldr	r0, [pc, #12]	; (80026f4 <InitMPU6050+0xa4>)
 80026e8:	f001 ffd2 	bl	8004690 <HAL_I2C_Mem_Write>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200002a0 	.word	0x200002a0

080026f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026fc:	b672      	cpsid	i
}
 80026fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002700:	e7fe      	b.n	8002700 <Error_Handler+0x8>
	...

08002704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <HAL_MspInit+0x5c>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	4a14      	ldr	r2, [pc, #80]	; (8002760 <HAL_MspInit+0x5c>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6193      	str	r3, [r2, #24]
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_MspInit+0x5c>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <HAL_MspInit+0x5c>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_MspInit+0x5c>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	61d3      	str	r3, [r2, #28]
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <HAL_MspInit+0x5c>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_MspInit+0x60>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_MspInit+0x60>)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	40021000 	.word	0x40021000
 8002764:	40010000 	.word	0x40010000

08002768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0310 	add.w	r3, r7, #16
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <HAL_ADC_MspInit+0xcc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d151      	bne.n	800282c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_ADC_MspInit+0xd0>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <HAL_ADC_MspInit+0xd0>)
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_ADC_MspInit+0xd0>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <HAL_ADC_MspInit+0xd0>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a24      	ldr	r2, [pc, #144]	; (8002838 <HAL_ADC_MspInit+0xd0>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b22      	ldr	r3, [pc, #136]	; (8002838 <HAL_ADC_MspInit+0xd0>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = KP_Pin|KI_Pin|KD_Pin;
 80027b8:	2370      	movs	r3, #112	; 0x70
 80027ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027bc:	2303      	movs	r3, #3
 80027be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	4619      	mov	r1, r3
 80027c6:	481d      	ldr	r0, [pc, #116]	; (800283c <HAL_ADC_MspInit+0xd4>)
 80027c8:	f001 fc82 	bl	80040d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 80027ce:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <HAL_ADC_MspInit+0xdc>)
 80027d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 80027e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 80027ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002800:	480f      	ldr	r0, [pc, #60]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 8002802:	f001 f9f5 	bl	8003bf0 <HAL_DMA_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800280c:	f7ff ff74 	bl	80026f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 8002814:	621a      	str	r2, [r3, #32]
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_ADC_MspInit+0xd8>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2100      	movs	r1, #0
 8002820:	2012      	movs	r0, #18
 8002822:	f001 f9ae 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002826:	2012      	movs	r0, #18
 8002828:	f001 f9c7 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800282c:	bf00      	nop
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40012400 	.word	0x40012400
 8002838:	40021000 	.word	0x40021000
 800283c:	40010800 	.word	0x40010800
 8002840:	2000025c 	.word	0x2000025c
 8002844:	40020008 	.word	0x40020008

08002848 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a30      	ldr	r2, [pc, #192]	; (8002924 <HAL_I2C_MspInit+0xdc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d159      	bne.n	800291c <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002868:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_I2C_MspInit+0xe0>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4a2e      	ldr	r2, [pc, #184]	; (8002928 <HAL_I2C_MspInit+0xe0>)
 800286e:	f043 0308 	orr.w	r3, r3, #8
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <HAL_I2C_MspInit+0xe0>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002880:	23c0      	movs	r3, #192	; 0xc0
 8002882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002884:	2312      	movs	r3, #18
 8002886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	4619      	mov	r1, r3
 8002892:	4826      	ldr	r0, [pc, #152]	; (800292c <HAL_I2C_MspInit+0xe4>)
 8002894:	f001 fc1c 	bl	80040d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002898:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_I2C_MspInit+0xe0>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_I2C_MspInit+0xe0>)
 800289e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028a2:	61d3      	str	r3, [r2, #28]
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_I2C_MspInit+0xe0>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80028b0:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <HAL_I2C_MspInit+0xec>)
 80028b4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c8:	4b19      	ldr	r3, [pc, #100]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028dc:	2200      	movs	r2, #0
 80028de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80028e0:	4813      	ldr	r0, [pc, #76]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028e2:	f001 f985 	bl	8003bf0 <HAL_DMA_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80028ec:	f7ff ff04 	bl	80026f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <HAL_I2C_MspInit+0xe8>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	201f      	movs	r0, #31
 8002902:	f001 f93e 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002906:	201f      	movs	r0, #31
 8002908:	f001 f957 	bl	8003bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2100      	movs	r1, #0
 8002910:	2020      	movs	r0, #32
 8002912:	f001 f936 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002916:	2020      	movs	r0, #32
 8002918:	f001 f94f 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800291c:	bf00      	nop
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40005400 	.word	0x40005400
 8002928:	40021000 	.word	0x40021000
 800292c:	40010c00 	.word	0x40010c00
 8002930:	200002f4 	.word	0x200002f4
 8002934:	40020080 	.word	0x40020080

08002938 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a15      	ldr	r2, [pc, #84]	; (800299c <HAL_TIM_PWM_MspInit+0x64>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d123      	bne.n	8002992 <HAL_TIM_PWM_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_TIM_PWM_MspInit+0x68>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	4a14      	ldr	r2, [pc, #80]	; (80029a0 <HAL_TIM_PWM_MspInit+0x68>)
 8002950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002954:	6193      	str	r3, [r2, #24]
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_TIM_PWM_MspInit+0x68>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	2018      	movs	r0, #24
 8002968:	f001 f90b 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800296c:	2018      	movs	r0, #24
 800296e:	f001 f924 	bl	8003bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	2019      	movs	r0, #25
 8002978:	f001 f903 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800297c:	2019      	movs	r0, #25
 800297e:	f001 f91c 	bl	8003bba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8002982:	2200      	movs	r2, #0
 8002984:	2100      	movs	r1, #0
 8002986:	201a      	movs	r0, #26
 8002988:	f001 f8fb 	bl	8003b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800298c:	201a      	movs	r0, #26
 800298e:	f001 f914 	bl	8003bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d15e      	bne.n	8002a82 <HAL_TIM_Base_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029c4:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <HAL_TIM_Base_MspInit+0xe8>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_TIM_Base_MspInit+0xe8>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	61d3      	str	r3, [r2, #28]
 80029d0:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <HAL_TIM_Base_MspInit+0xe8>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029dc:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <HAL_TIM_Base_MspInit+0xe8>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <HAL_TIM_Base_MspInit+0xe8>)
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <HAL_TIM_Base_MspInit+0xe8>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4821      	ldr	r0, [pc, #132]	; (8002a90 <HAL_TIM_Base_MspInit+0xec>)
 8002a0a:	f001 fb61 	bl	80040d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002a0e:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_TIM_Base_MspInit+0xf0>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_TIM_Base_MspInit+0xf0>)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	6053      	str	r3, [r2, #4]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_TIM_Base_MspInit+0xf8>)
 8002a36:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a50:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a58:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002a66:	480c      	ldr	r0, [pc, #48]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a68:	f001 f8c2 	bl	8003bf0 <HAL_DMA_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 8002a72:	f7ff fe41 	bl	80026f8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
 8002a7c:	4a06      	ldr	r2, [pc, #24]	; (8002a98 <HAL_TIM_Base_MspInit+0xf4>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010800 	.word	0x40010800
 8002a94:	40010000 	.word	0x40010000
 8002a98:	200003c8 	.word	0x200003c8
 8002a9c:	40020058 	.word	0x40020058

08002aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_TIM_MspPostInit+0x5c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d118      	bne.n	8002af2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_TIM_MspPostInit+0x60>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <HAL_TIM_MspPostInit+0x60>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_TIM_MspPostInit+0x60>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ad8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002adc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0310 	add.w	r3, r7, #16
 8002aea:	4619      	mov	r1, r3
 8002aec:	4805      	ldr	r0, [pc, #20]	; (8002b04 <HAL_TIM_MspPostInit+0x64>)
 8002aee:	f001 faef 	bl	80040d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002af2:	bf00      	nop
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40010800 	.word	0x40010800

08002b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_UART_MspInit+0x88>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d12f      	bne.n	8002b88 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_UART_MspInit+0x8c>)
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_UART_MspInit+0x8c>)
 8002b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b32:	61d3      	str	r3, [r2, #28]
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_UART_MspInit+0x8c>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_UART_MspInit+0x8c>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <HAL_UART_MspInit+0x8c>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	6193      	str	r3, [r2, #24]
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_UART_MspInit+0x8c>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b58:	2304      	movs	r3, #4
 8002b5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b60:	2303      	movs	r3, #3
 8002b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0310 	add.w	r3, r7, #16
 8002b68:	4619      	mov	r1, r3
 8002b6a:	480b      	ldr	r0, [pc, #44]	; (8002b98 <HAL_UART_MspInit+0x90>)
 8002b6c:	f001 fab0 	bl	80040d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b70:	2308      	movs	r3, #8
 8002b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	4619      	mov	r1, r3
 8002b82:	4805      	ldr	r0, [pc, #20]	; (8002b98 <HAL_UART_MspInit+0x90>)
 8002b84:	f001 faa4 	bl	80040d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b88:	bf00      	nop
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40004400 	.word	0x40004400
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010800 	.word	0x40010800

08002b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <NMI_Handler+0x4>

08002ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba6:	e7fe      	b.n	8002ba6 <HardFault_Handler+0x4>

08002ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <MemManage_Handler+0x4>

08002bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb2:	e7fe      	b.n	8002bb2 <BusFault_Handler+0x4>

08002bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <UsageFault_Handler+0x4>

08002bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be2:	f000 f98f 	bl	8002f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <DMA1_Channel1_IRQHandler+0x10>)
 8002bf2:	f001 f92d 	bl	8003e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	2000025c 	.word	0x2000025c

08002c00 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <DMA1_Channel5_IRQHandler+0x10>)
 8002c06:	f001 f923 	bl	8003e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200003c8 	.word	0x200003c8

08002c14 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <DMA1_Channel7_IRQHandler+0x10>)
 8002c1a:	f001 f919 	bl	8003e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200002f4 	.word	0x200002f4

08002c28 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <ADC1_2_IRQHandler+0x10>)
 8002c2e:	f000 fa5d 	bl	80030ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000022c 	.word	0x2000022c

08002c3c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <TIM1_BRK_IRQHandler+0x10>)
 8002c42:	f005 f97f 	bl	8007f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000338 	.word	0x20000338

08002c50 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <TIM1_UP_IRQHandler+0x10>)
 8002c56:	f005 f975 	bl	8007f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000338 	.word	0x20000338

08002c64 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002c6a:	f005 f96b 	bl	8007f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000338 	.word	0x20000338

08002c78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <I2C1_EV_IRQHandler+0x10>)
 8002c7e:	f001 ff7f 	bl	8004b80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200002a0 	.word	0x200002a0

08002c8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c90:	4802      	ldr	r0, [pc, #8]	; (8002c9c <I2C1_ER_IRQHandler+0x10>)
 8002c92:	f002 f8e6 	bl	8004e62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200002a0 	.word	0x200002a0

08002ca0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
	return 1;
 8002ca4:	2301      	movs	r3, #1
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <_kill>:

int _kill(int pid, int sig)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cb8:	f006 fb8c 	bl	80093d4 <__errno>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2216      	movs	r2, #22
 8002cc0:	601a      	str	r2, [r3, #0]
	return -1;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_exit>:

void _exit (int status)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ffe7 	bl	8002cae <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ce0:	e7fe      	b.n	8002ce0 <_exit+0x12>

08002ce2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e00a      	b.n	8002d0a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cf4:	f3af 8000 	nop.w
 8002cf8:	4601      	mov	r1, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	60ba      	str	r2, [r7, #8]
 8002d00:	b2ca      	uxtb	r2, r1
 8002d02:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	dbf0      	blt.n	8002cf4 <_read+0x12>
	}

return len;
 8002d12:	687b      	ldr	r3, [r7, #4]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e009      	b.n	8002d42 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	60ba      	str	r2, [r7, #8]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	dbf1      	blt.n	8002d2e <_write+0x12>
	}
	return len;
 8002d4a:	687b      	ldr	r3, [r7, #4]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_close>:

int _close(int file)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	return -1;
 8002d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d7a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <_isatty>:

int _isatty(int file)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
	return 1;
 8002d90:	2301      	movs	r3, #1
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
	return 0;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dbc:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <_sbrk+0x5c>)
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <_sbrk+0x60>)
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <_sbrk+0x64>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <_sbrk+0x64>)
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <_sbrk+0x68>)
 8002dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <_sbrk+0x64>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d207      	bcs.n	8002df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de4:	f006 faf6 	bl	80093d4 <__errno>
 8002de8:	4603      	mov	r3, r0
 8002dea:	220c      	movs	r2, #12
 8002dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	e009      	b.n	8002e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <_sbrk+0x64>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfa:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <_sbrk+0x64>)
 8002e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e06:	68fb      	ldr	r3, [r7, #12]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20005000 	.word	0x20005000
 8002e14:	00000400 	.word	0x00000400
 8002e18:	200004d4 	.word	0x200004d4
 8002e1c:	200004f0 	.word	0x200004f0

08002e20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e2c:	480c      	ldr	r0, [pc, #48]	; (8002e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e2e:	490d      	ldr	r1, [pc, #52]	; (8002e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e34:	e002      	b.n	8002e3c <LoopCopyDataInit>

08002e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3a:	3304      	adds	r3, #4

08002e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e40:	d3f9      	bcc.n	8002e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e44:	4c0a      	ldr	r4, [pc, #40]	; (8002e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e48:	e001      	b.n	8002e4e <LoopFillZerobss>

08002e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e4c:	3204      	adds	r2, #4

08002e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e50:	d3fb      	bcc.n	8002e4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e52:	f7ff ffe5 	bl	8002e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e56:	f006 fac3 	bl	80093e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e5a:	f7fe fd11 	bl	8001880 <main>
  bx lr
 8002e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8002e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e64:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002e68:	0800c9a4 	.word	0x0800c9a4
  ldr r2, =_sbss
 8002e6c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002e70:	200004ec 	.word	0x200004ec

08002e74 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e74:	e7fe      	b.n	8002e74 <CAN1_RX1_IRQHandler>
	...

08002e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_Init+0x28>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <HAL_Init+0x28>)
 8002e82:	f043 0310 	orr.w	r3, r3, #16
 8002e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e88:	2003      	movs	r0, #3
 8002e8a:	f000 fe6f 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8e:	200f      	movs	r0, #15
 8002e90:	f000 f808 	bl	8002ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e94:	f7ff fc36 	bl	8002704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40022000 	.word	0x40022000

08002ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002eac:	4b12      	ldr	r3, [pc, #72]	; (8002ef8 <HAL_InitTick+0x54>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_InitTick+0x58>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fe87 	bl	8003bd6 <HAL_SYSTICK_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00e      	b.n	8002ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b0f      	cmp	r3, #15
 8002ed6:	d80a      	bhi.n	8002eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f000 fe4f 	bl	8003b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ee4:	4a06      	ldr	r2, [pc, #24]	; (8002f00 <HAL_InitTick+0x5c>)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20000028 	.word	0x20000028
 8002efc:	20000030 	.word	0x20000030
 8002f00:	2000002c 	.word	0x2000002c

08002f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_IncTick+0x1c>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_IncTick+0x20>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	4a03      	ldr	r2, [pc, #12]	; (8002f24 <HAL_IncTick+0x20>)
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	20000030 	.word	0x20000030
 8002f24:	200004d8 	.word	0x200004d8

08002f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f2c:	4b02      	ldr	r3, [pc, #8]	; (8002f38 <HAL_GetTick+0x10>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	200004d8 	.word	0x200004d8

08002f3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0be      	b.n	80030dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff fbf4 	bl	8002768 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f9e3 	bl	800334c <ADC_ConversionStop_Disable>
 8002f86:	4603      	mov	r3, r0
 8002f88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f040 8099 	bne.w	80030ca <HAL_ADC_Init+0x18e>
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f040 8095 	bne.w	80030ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fa8:	f023 0302 	bic.w	r3, r3, #2
 8002fac:	f043 0202 	orr.w	r2, r3, #2
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7b1b      	ldrb	r3, [r3, #12]
 8002fc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd4:	d003      	beq.n	8002fde <HAL_ADC_Init+0xa2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d102      	bne.n	8002fe4 <HAL_ADC_Init+0xa8>
 8002fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fe2:	e000      	b.n	8002fe6 <HAL_ADC_Init+0xaa>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7d1b      	ldrb	r3, [r3, #20]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d119      	bne.n	8003028 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7b1b      	ldrb	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	3b01      	subs	r3, #1
 8003002:	035a      	lsls	r2, r3, #13
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	e00b      	b.n	8003028 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	f043 0201 	orr.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_ADC_Init+0x1a8>)
 8003044:	4013      	ands	r3, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	430b      	orrs	r3, r1
 800304e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003058:	d003      	beq.n	8003062 <HAL_ADC_Init+0x126>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d104      	bne.n	800306c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	3b01      	subs	r3, #1
 8003068:	051b      	lsls	r3, r3, #20
 800306a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	430a      	orrs	r2, r1
 800307e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <HAL_ADC_Init+0x1ac>)
 8003088:	4013      	ands	r3, r2
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	d10b      	bne.n	80030a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030a6:	e018      	b.n	80030da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	f023 0312 	bic.w	r3, r3, #18
 80030b0:	f043 0210 	orr.w	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030c8:	e007      	b.n	80030da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030da:	7dfb      	ldrb	r3, [r7, #23]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	ffe1f7fd 	.word	0xffe1f7fd
 80030e8:	ff1f0efe 	.word	0xff1f0efe

080030ec <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d140      	bne.n	8003184 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b02      	cmp	r3, #2
 800310e:	d139      	bne.n	8003184 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d105      	bne.n	8003128 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003132:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003136:	d11d      	bne.n	8003174 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800313c:	2b00      	cmp	r3, #0
 800313e:	d119      	bne.n	8003174 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0220 	bic.w	r2, r2, #32
 800314e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f87c 	bl	8003272 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0212 	mvn.w	r2, #18
 8003182:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318e:	2b80      	cmp	r3, #128	; 0x80
 8003190:	d14f      	bne.n	8003232 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d148      	bne.n	8003232 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80031c2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80031c6:	d012      	beq.n	80031ee <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d125      	bne.n	8003222 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80031e0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031e4:	d11d      	bne.n	8003222 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d119      	bne.n	8003222 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031fc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff f92c 	bl	8002480 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 020c 	mvn.w	r2, #12
 8003230:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d114      	bne.n	800326a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10d      	bne.n	800326a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f812 	bl	8003284 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0201 	mvn.w	r2, #1
 8003268:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
	...

08003298 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d040      	beq.n	8003338 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032c6:	4b1f      	ldr	r3, [pc, #124]	; (8003344 <ADC_Enable+0xac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <ADC_Enable+0xb0>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	0c9b      	lsrs	r3, r3, #18
 80032d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032d4:	e002      	b.n	80032dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f9      	bne.n	80032d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032e2:	f7ff fe21 	bl	8002f28 <HAL_GetTick>
 80032e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032e8:	e01f      	b.n	800332a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032ea:	f7ff fe1d 	bl	8002f28 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d918      	bls.n	800332a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b01      	cmp	r3, #1
 8003304:	d011      	beq.n	800332a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	f043 0210 	orr.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e007      	b.n	800333a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d1d8      	bne.n	80032ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000028 	.word	0x20000028
 8003348:	431bde83 	.word	0x431bde83

0800334c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d12e      	bne.n	80033c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003376:	f7ff fdd7 	bl	8002f28 <HAL_GetTick>
 800337a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800337c:	e01b      	b.n	80033b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800337e:	f7ff fdd3 	bl	8002f28 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d914      	bls.n	80033b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10d      	bne.n	80033b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	f043 0210 	orr.w	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e007      	b.n	80033c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d0dc      	beq.n	800337e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_ADCEx_Calibration_Start+0x1e>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e095      	b.n	800351a <HAL_ADCEx_Calibration_Start+0x14a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ffa8 	bl	800334c <ADC_ConversionStop_Disable>
 80033fc:	4603      	mov	r3, r0
 80033fe:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 8084 	bne.w	8003510 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003410:	f023 0302 	bic.w	r3, r3, #2
 8003414:	f043 0202 	orr.w	r2, r3, #2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800341c:	4b41      	ldr	r3, [pc, #260]	; (8003524 <HAL_ADCEx_Calibration_Start+0x154>)
 800341e:	681c      	ldr	r4, [r3, #0]
 8003420:	2002      	movs	r0, #2
 8003422:	f004 f959 	bl	80076d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003426:	4603      	mov	r3, r0
 8003428:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800342c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800342e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003430:	e002      	b.n	8003438 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3b01      	subs	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f9      	bne.n	8003432 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ff2a 	bl	8003298 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0208 	orr.w	r2, r2, #8
 8003452:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003454:	f7ff fd68 	bl	8002f28 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800345a:	e01b      	b.n	8003494 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800345c:	f7ff fd64 	bl	8002f28 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b0a      	cmp	r3, #10
 8003468:	d914      	bls.n	8003494 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	f023 0312 	bic.w	r3, r3, #18
 8003480:	f043 0210 	orr.w	r2, r3, #16
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e042      	b.n	800351a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1dc      	bne.n	800345c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0204 	orr.w	r2, r2, #4
 80034b0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034b2:	f7ff fd39 	bl	8002f28 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034b8:	e01b      	b.n	80034f2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034ba:	f7ff fd35 	bl	8002f28 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b0a      	cmp	r3, #10
 80034c6:	d914      	bls.n	80034f2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	f023 0312 	bic.w	r3, r3, #18
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e013      	b.n	800351a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1dc      	bne.n	80034ba <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	f023 0303 	bic.w	r3, r3, #3
 8003508:	f043 0201 	orr.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003518:	7dfb      	ldrb	r3, [r7, #23]
}
 800351a:	4618      	mov	r0, r3
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd90      	pop	{r4, r7, pc}
 8003522:	bf00      	nop
 8003524:	20000028 	.word	0x20000028

08003528 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_ADCEx_InjectedStart_IT+0x1a>
 800353e:	2302      	movs	r3, #2
 8003540:	e078      	b.n	8003634 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fea4 	bl	8003298 <ADC_Enable>
 8003550:	4603      	mov	r3, r0
 8003552:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d167      	bne.n	800362a <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a32      	ldr	r2, [pc, #200]	; (800363c <HAL_ADCEx_InjectedStart_IT+0x114>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d105      	bne.n	8003584 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8003578:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	629a      	str	r2, [r3, #40]	; 0x28
 8003590:	e005      	b.n	800359e <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0204 	mvn.w	r2, #4
 80035c0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d0:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d128      	bne.n	8003632 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80035ea:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80035ee:	d113      	bne.n	8003618 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80035f4:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_ADCEx_InjectedStart_IT+0x114>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d105      	bne.n	8003606 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80035fa:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	e00c      	b.n	8003632 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	e003      	b.n	8003632 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40012800 	.word	0x40012800
 8003640:	40012400 	.word	0x40012400

08003644 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d009      	beq.n	800366c <HAL_ADCEx_InjectedGetValue+0x28>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d815      	bhi.n	800368a <HAL_ADCEx_InjectedGetValue+0x46>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d00d      	beq.n	8003680 <HAL_ADCEx_InjectedGetValue+0x3c>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d005      	beq.n	8003676 <HAL_ADCEx_InjectedGetValue+0x32>
 800366a:	e00e      	b.n	800368a <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003672:	60fb      	str	r3, [r7, #12]
      break;
 8003674:	e00e      	b.n	8003694 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	60fb      	str	r3, [r7, #12]
      break;
 800367e:	e009      	b.n	8003694 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	60fb      	str	r3, [r7, #12]
      break;
 8003688:	e004      	b.n	8003694 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003690:	60fb      	str	r3, [r7, #12]
      break;
 8003692:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80036a0:	b490      	push	{r4, r7}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_ADCEx_InjectedConfigChannel+0x20>
 80036bc:	2302      	movs	r3, #2
 80036be:	e17d      	b.n	80039bc <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d119      	bne.n	8003704 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10c      	bne.n	80036f2 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	0d9b      	lsrs	r3, r3, #22
 80036e0:	059b      	lsls	r3, r3, #22
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	03d1      	lsls	r1, r2, #15
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6393      	str	r3, [r2, #56]	; 0x38
 80036f0:	e04f      	b.n	8003792 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	e046      	b.n	8003792 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	429a      	cmp	r2, r3
 800370e:	d82a      	bhi.n	8003766 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	1ad2      	subs	r2, r2, r3
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	330f      	adds	r3, #15
 8003728:	221f      	movs	r2, #31
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003732:	43db      	mvns	r3, r3
 8003734:	4019      	ands	r1, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	3b01      	subs	r3, #1
 800373c:	0518      	lsls	r0, r3, #20
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681c      	ldr	r4, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	1ad2      	subs	r2, r2, r3
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	330f      	adds	r3, #15
 8003754:	fa04 f303 	lsl.w	r3, r4, r3
 8003758:	ea40 0203 	orr.w	r2, r0, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
 8003764:	e015      	b.n	8003792 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	1ad2      	subs	r2, r2, r3
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	330f      	adds	r3, #15
 800377e:	221f      	movs	r2, #31
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003788:	43da      	mvns	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	400a      	ands	r2, r1
 8003790:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d00c      	beq.n	80037ba <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	6991      	ldr	r1, [r2, #24]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6812      	ldr	r2, [r2, #0]
 80037b6:	430b      	orrs	r3, r1
 80037b8:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	7d5b      	ldrb	r3, [r3, #21]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d115      	bne.n	80037ee <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80037ca:	d108      	bne.n	80037de <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	e007      	b.n	80037ee <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	7d1b      	ldrb	r3, [r3, #20]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d114      	bne.n	8003820 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	7d5b      	ldrb	r3, [r3, #21]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d108      	bne.n	8003810 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	e007      	b.n	8003820 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b09      	cmp	r3, #9
 8003826:	d91c      	bls.n	8003862 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68d9      	ldr	r1, [r3, #12]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	3b1e      	subs	r3, #30
 800383a:	2207      	movs	r2, #7
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	4019      	ands	r1, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	6898      	ldr	r0, [r3, #8]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	4413      	add	r3, r2
 8003852:	3b1e      	subs	r3, #30
 8003854:	fa00 f203 	lsl.w	r2, r0, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	60da      	str	r2, [r3, #12]
 8003860:	e019      	b.n	8003896 <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6919      	ldr	r1, [r3, #16]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	2207      	movs	r2, #7
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	4019      	ands	r1, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6898      	ldr	r0, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	fa00 f203 	lsl.w	r2, r0, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b10      	cmp	r3, #16
 800389c:	d003      	beq.n	80038a6 <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80038a2:	2b11      	cmp	r3, #17
 80038a4:	d107      	bne.n	80038b6 <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80038b4:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d022      	beq.n	8003904 <HAL_ADCEx_InjectedConfigChannel+0x264>
 80038be:	2b03      	cmp	r3, #3
 80038c0:	d82e      	bhi.n	8003920 <HAL_ADCEx_InjectedConfigChannel+0x280>
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d002      	beq.n	80038cc <HAL_ADCEx_InjectedConfigChannel+0x22c>
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d00e      	beq.n	80038e8 <HAL_ADCEx_InjectedConfigChannel+0x248>
 80038ca:	e029      	b.n	8003920 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80038d6:	f023 030f 	bic.w	r3, r3, #15
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	68d1      	ldr	r1, [r2, #12]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 80038e6:	e029      	b.n	800393c <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80038f2:	f023 030f 	bic.w	r3, r3, #15
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	68d1      	ldr	r1, [r2, #12]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	430b      	orrs	r3, r1
 8003900:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8003902:	e01b      	b.n	800393c <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800390e:	f023 030f 	bic.w	r3, r3, #15
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	68d1      	ldr	r1, [r2, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	430b      	orrs	r3, r1
 800391c:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 800391e:	e00d      	b.n	800393c <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800392a:	f023 030f 	bic.w	r3, r3, #15
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	68d1      	ldr	r1, [r2, #12]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	430b      	orrs	r3, r1
 8003938:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 800393a:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b10      	cmp	r3, #16
 8003942:	d003      	beq.n	800394c <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003948:	2b11      	cmp	r3, #17
 800394a:	d132      	bne.n	80039b2 <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d125      	bne.n	80039a2 <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d126      	bne.n	80039b2 <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003972:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b10      	cmp	r3, #16
 800397a:	d11a      	bne.n	80039b2 <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0c9a      	lsrs	r2, r3, #18
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003992:	e002      	b.n	800399a <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3b01      	subs	r3, #1
 8003998:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f9      	bne.n	8003994 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 80039a0:	e007      	b.n	80039b2 <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc90      	pop	{r4, r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40012400 	.word	0x40012400
 80039cc:	20000028 	.word	0x20000028
 80039d0:	431bde83 	.word	0x431bde83

080039d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a06:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	60d3      	str	r3, [r2, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <__NVIC_GetPriorityGrouping+0x18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0307 	and.w	r3, r3, #7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db0b      	blt.n	8003a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4906      	ldr	r1, [pc, #24]	; (8003a6c <__NVIC_EnableIRQ+0x34>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2001      	movs	r0, #1
 8003a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db0a      	blt.n	8003a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	490c      	ldr	r1, [pc, #48]	; (8003abc <__NVIC_SetPriority+0x4c>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	440b      	add	r3, r1
 8003a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a98:	e00a      	b.n	8003ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4908      	ldr	r1, [pc, #32]	; (8003ac0 <__NVIC_SetPriority+0x50>)
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	440b      	add	r3, r1
 8003aae:	761a      	strb	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000e100 	.word	0xe000e100
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	bf28      	it	cs
 8003ae2:	2304      	movcs	r3, #4
 8003ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d902      	bls.n	8003af4 <NVIC_EncodePriority+0x30>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b03      	subs	r3, #3
 8003af2:	e000      	b.n	8003af6 <NVIC_EncodePriority+0x32>
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	401a      	ands	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43d9      	mvns	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	4313      	orrs	r3, r2
         );
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b38:	d301      	bcc.n	8003b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00f      	b.n	8003b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <SysTick_Config+0x40>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b46:	210f      	movs	r1, #15
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	f7ff ff90 	bl	8003a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <SysTick_Config+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <SysTick_Config+0x40>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff2d 	bl	80039d4 <__NVIC_SetPriorityGrouping>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b94:	f7ff ff42 	bl	8003a1c <__NVIC_GetPriorityGrouping>
 8003b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff90 	bl	8003ac4 <NVIC_EncodePriority>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff5f 	bl	8003a70 <__NVIC_SetPriority>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff35 	bl	8003a38 <__NVIC_EnableIRQ>
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ffa2 	bl	8003b28 <SysTick_Config>
 8003be4:	4603      	mov	r3, r0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e043      	b.n	8003c8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <HAL_DMA_Init+0xa8>)
 8003c0e:	4413      	add	r3, r2
 8003c10:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <HAL_DMA_Init+0xac>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	009a      	lsls	r2, r3, #2
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <HAL_DMA_Init+0xb0>)
 8003c22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	bffdfff8 	.word	0xbffdfff8
 8003c9c:	cccccccd 	.word	0xcccccccd
 8003ca0:	40020000 	.word	0x40020000

08003ca4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_DMA_Start_IT+0x20>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e04a      	b.n	8003d5a <HAL_DMA_Start_IT+0xb6>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d13a      	bne.n	8003d4c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0201 	bic.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f9ba 	bl	8004074 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 020e 	orr.w	r2, r2, #14
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e00f      	b.n	8003d3a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0204 	bic.w	r2, r2, #4
 8003d28:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 020a 	orr.w	r2, r2, #10
 8003d38:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	e005      	b.n	8003d58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d54:	2302      	movs	r3, #2
 8003d56:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d005      	beq.n	8003d86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e051      	b.n	8003e2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 020e 	bic.w	r2, r2, #14
 8003d94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a22      	ldr	r2, [pc, #136]	; (8003e34 <HAL_DMA_Abort_IT+0xd0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d029      	beq.n	8003e04 <HAL_DMA_Abort_IT+0xa0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <HAL_DMA_Abort_IT+0xd4>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d022      	beq.n	8003e00 <HAL_DMA_Abort_IT+0x9c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1f      	ldr	r2, [pc, #124]	; (8003e3c <HAL_DMA_Abort_IT+0xd8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d01a      	beq.n	8003dfa <HAL_DMA_Abort_IT+0x96>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <HAL_DMA_Abort_IT+0xdc>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d012      	beq.n	8003df4 <HAL_DMA_Abort_IT+0x90>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_DMA_Abort_IT+0xe0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00a      	beq.n	8003dee <HAL_DMA_Abort_IT+0x8a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <HAL_DMA_Abort_IT+0xe4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d102      	bne.n	8003de8 <HAL_DMA_Abort_IT+0x84>
 8003de2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003de6:	e00e      	b.n	8003e06 <HAL_DMA_Abort_IT+0xa2>
 8003de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dec:	e00b      	b.n	8003e06 <HAL_DMA_Abort_IT+0xa2>
 8003dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003df2:	e008      	b.n	8003e06 <HAL_DMA_Abort_IT+0xa2>
 8003df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003df8:	e005      	b.n	8003e06 <HAL_DMA_Abort_IT+0xa2>
 8003dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dfe:	e002      	b.n	8003e06 <HAL_DMA_Abort_IT+0xa2>
 8003e00:	2310      	movs	r3, #16
 8003e02:	e000      	b.n	8003e06 <HAL_DMA_Abort_IT+0xa2>
 8003e04:	2301      	movs	r3, #1
 8003e06:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <HAL_DMA_Abort_IT+0xe8>)
 8003e08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
    } 
  }
  return status;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40020008 	.word	0x40020008
 8003e38:	4002001c 	.word	0x4002001c
 8003e3c:	40020030 	.word	0x40020030
 8003e40:	40020044 	.word	0x40020044
 8003e44:	40020058 	.word	0x40020058
 8003e48:	4002006c 	.word	0x4002006c
 8003e4c:	40020000 	.word	0x40020000

08003e50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d04f      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xc8>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04a      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0204 	bic.w	r2, r2, #4
 8003e9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a66      	ldr	r2, [pc, #408]	; (8004040 <HAL_DMA_IRQHandler+0x1f0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d029      	beq.n	8003efe <HAL_DMA_IRQHandler+0xae>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a65      	ldr	r2, [pc, #404]	; (8004044 <HAL_DMA_IRQHandler+0x1f4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d022      	beq.n	8003efa <HAL_DMA_IRQHandler+0xaa>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a63      	ldr	r2, [pc, #396]	; (8004048 <HAL_DMA_IRQHandler+0x1f8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01a      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xa4>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a62      	ldr	r2, [pc, #392]	; (800404c <HAL_DMA_IRQHandler+0x1fc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d012      	beq.n	8003eee <HAL_DMA_IRQHandler+0x9e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a60      	ldr	r2, [pc, #384]	; (8004050 <HAL_DMA_IRQHandler+0x200>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0x98>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a5f      	ldr	r2, [pc, #380]	; (8004054 <HAL_DMA_IRQHandler+0x204>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d102      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0x92>
 8003edc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ee0:	e00e      	b.n	8003f00 <HAL_DMA_IRQHandler+0xb0>
 8003ee2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ee6:	e00b      	b.n	8003f00 <HAL_DMA_IRQHandler+0xb0>
 8003ee8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003eec:	e008      	b.n	8003f00 <HAL_DMA_IRQHandler+0xb0>
 8003eee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ef2:	e005      	b.n	8003f00 <HAL_DMA_IRQHandler+0xb0>
 8003ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef8:	e002      	b.n	8003f00 <HAL_DMA_IRQHandler+0xb0>
 8003efa:	2340      	movs	r3, #64	; 0x40
 8003efc:	e000      	b.n	8003f00 <HAL_DMA_IRQHandler+0xb0>
 8003efe:	2304      	movs	r3, #4
 8003f00:	4a55      	ldr	r2, [pc, #340]	; (8004058 <HAL_DMA_IRQHandler+0x208>)
 8003f02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8094 	beq.w	8004036 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003f16:	e08e      	b.n	8004036 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d056      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x186>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d051      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 020a 	bic.w	r2, r2, #10
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a38      	ldr	r2, [pc, #224]	; (8004040 <HAL_DMA_IRQHandler+0x1f0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d029      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0x166>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a37      	ldr	r2, [pc, #220]	; (8004044 <HAL_DMA_IRQHandler+0x1f4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d022      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0x162>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a35      	ldr	r2, [pc, #212]	; (8004048 <HAL_DMA_IRQHandler+0x1f8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01a      	beq.n	8003fac <HAL_DMA_IRQHandler+0x15c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a34      	ldr	r2, [pc, #208]	; (800404c <HAL_DMA_IRQHandler+0x1fc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d012      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x156>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a32      	ldr	r2, [pc, #200]	; (8004050 <HAL_DMA_IRQHandler+0x200>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00a      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x150>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a31      	ldr	r2, [pc, #196]	; (8004054 <HAL_DMA_IRQHandler+0x204>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d102      	bne.n	8003f9a <HAL_DMA_IRQHandler+0x14a>
 8003f94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f98:	e00e      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x168>
 8003f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f9e:	e00b      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x168>
 8003fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fa4:	e008      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x168>
 8003fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003faa:	e005      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x168>
 8003fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb0:	e002      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x168>
 8003fb2:	2320      	movs	r3, #32
 8003fb4:	e000      	b.n	8003fb8 <HAL_DMA_IRQHandler+0x168>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	4a27      	ldr	r2, [pc, #156]	; (8004058 <HAL_DMA_IRQHandler+0x208>)
 8003fba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d034      	beq.n	8004036 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003fd4:	e02f      	b.n	8004036 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2208      	movs	r2, #8
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d028      	beq.n	8004038 <HAL_DMA_IRQHandler+0x1e8>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d023      	beq.n	8004038 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 020e 	bic.w	r2, r2, #14
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f202 	lsl.w	r2, r1, r2
 800400e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4798      	blx	r3
    }
  }
  return;
 8004036:	bf00      	nop
 8004038:	bf00      	nop
}
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40020008 	.word	0x40020008
 8004044:	4002001c 	.word	0x4002001c
 8004048:	40020030 	.word	0x40020030
 800404c:	40020044 	.word	0x40020044
 8004050:	40020058 	.word	0x40020058
 8004054:	4002006c 	.word	0x4002006c
 8004058:	40020000 	.word	0x40020000

0800405c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	2101      	movs	r1, #1
 800408c:	fa01 f202 	lsl.w	r2, r1, r2
 8004090:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d108      	bne.n	80040b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040b2:	e007      	b.n	80040c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	60da      	str	r2, [r3, #12]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b08b      	sub	sp, #44	; 0x2c
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040de:	2300      	movs	r3, #0
 80040e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e2:	e169      	b.n	80043b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040e4:	2201      	movs	r2, #1
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f040 8158 	bne.w	80043b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4a9a      	ldr	r2, [pc, #616]	; (8004370 <HAL_GPIO_Init+0x2a0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d05e      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 800410c:	4a98      	ldr	r2, [pc, #608]	; (8004370 <HAL_GPIO_Init+0x2a0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d875      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 8004112:	4a98      	ldr	r2, [pc, #608]	; (8004374 <HAL_GPIO_Init+0x2a4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d058      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 8004118:	4a96      	ldr	r2, [pc, #600]	; (8004374 <HAL_GPIO_Init+0x2a4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d86f      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 800411e:	4a96      	ldr	r2, [pc, #600]	; (8004378 <HAL_GPIO_Init+0x2a8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d052      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 8004124:	4a94      	ldr	r2, [pc, #592]	; (8004378 <HAL_GPIO_Init+0x2a8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d869      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 800412a:	4a94      	ldr	r2, [pc, #592]	; (800437c <HAL_GPIO_Init+0x2ac>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d04c      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 8004130:	4a92      	ldr	r2, [pc, #584]	; (800437c <HAL_GPIO_Init+0x2ac>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d863      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 8004136:	4a92      	ldr	r2, [pc, #584]	; (8004380 <HAL_GPIO_Init+0x2b0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d046      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 800413c:	4a90      	ldr	r2, [pc, #576]	; (8004380 <HAL_GPIO_Init+0x2b0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d85d      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 8004142:	2b12      	cmp	r3, #18
 8004144:	d82a      	bhi.n	800419c <HAL_GPIO_Init+0xcc>
 8004146:	2b12      	cmp	r3, #18
 8004148:	d859      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 800414a:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <HAL_GPIO_Init+0x80>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	080041cb 	.word	0x080041cb
 8004154:	080041a5 	.word	0x080041a5
 8004158:	080041b7 	.word	0x080041b7
 800415c:	080041f9 	.word	0x080041f9
 8004160:	080041ff 	.word	0x080041ff
 8004164:	080041ff 	.word	0x080041ff
 8004168:	080041ff 	.word	0x080041ff
 800416c:	080041ff 	.word	0x080041ff
 8004170:	080041ff 	.word	0x080041ff
 8004174:	080041ff 	.word	0x080041ff
 8004178:	080041ff 	.word	0x080041ff
 800417c:	080041ff 	.word	0x080041ff
 8004180:	080041ff 	.word	0x080041ff
 8004184:	080041ff 	.word	0x080041ff
 8004188:	080041ff 	.word	0x080041ff
 800418c:	080041ff 	.word	0x080041ff
 8004190:	080041ff 	.word	0x080041ff
 8004194:	080041ad 	.word	0x080041ad
 8004198:	080041c1 	.word	0x080041c1
 800419c:	4a79      	ldr	r2, [pc, #484]	; (8004384 <HAL_GPIO_Init+0x2b4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041a2:	e02c      	b.n	80041fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	623b      	str	r3, [r7, #32]
          break;
 80041aa:	e029      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	3304      	adds	r3, #4
 80041b2:	623b      	str	r3, [r7, #32]
          break;
 80041b4:	e024      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	3308      	adds	r3, #8
 80041bc:	623b      	str	r3, [r7, #32]
          break;
 80041be:	e01f      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	330c      	adds	r3, #12
 80041c6:	623b      	str	r3, [r7, #32]
          break;
 80041c8:	e01a      	b.n	8004200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041d2:	2304      	movs	r3, #4
 80041d4:	623b      	str	r3, [r7, #32]
          break;
 80041d6:	e013      	b.n	8004200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041e0:	2308      	movs	r3, #8
 80041e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	611a      	str	r2, [r3, #16]
          break;
 80041ea:	e009      	b.n	8004200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041ec:	2308      	movs	r3, #8
 80041ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	615a      	str	r2, [r3, #20]
          break;
 80041f6:	e003      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041f8:	2300      	movs	r3, #0
 80041fa:	623b      	str	r3, [r7, #32]
          break;
 80041fc:	e000      	b.n	8004200 <HAL_GPIO_Init+0x130>
          break;
 80041fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2bff      	cmp	r3, #255	; 0xff
 8004204:	d801      	bhi.n	800420a <HAL_GPIO_Init+0x13a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	e001      	b.n	800420e <HAL_GPIO_Init+0x13e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2bff      	cmp	r3, #255	; 0xff
 8004214:	d802      	bhi.n	800421c <HAL_GPIO_Init+0x14c>
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	e002      	b.n	8004222 <HAL_GPIO_Init+0x152>
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	3b08      	subs	r3, #8
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	210f      	movs	r1, #15
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	6a39      	ldr	r1, [r7, #32]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	431a      	orrs	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80b1 	beq.w	80043b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004250:	4b4d      	ldr	r3, [pc, #308]	; (8004388 <HAL_GPIO_Init+0x2b8>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4a4c      	ldr	r2, [pc, #304]	; (8004388 <HAL_GPIO_Init+0x2b8>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6193      	str	r3, [r2, #24]
 800425c:	4b4a      	ldr	r3, [pc, #296]	; (8004388 <HAL_GPIO_Init+0x2b8>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004268:	4a48      	ldr	r2, [pc, #288]	; (800438c <HAL_GPIO_Init+0x2bc>)
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	089b      	lsrs	r3, r3, #2
 800426e:	3302      	adds	r3, #2
 8004270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	220f      	movs	r2, #15
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a40      	ldr	r2, [pc, #256]	; (8004390 <HAL_GPIO_Init+0x2c0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_GPIO_Init+0x1ec>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3f      	ldr	r2, [pc, #252]	; (8004394 <HAL_GPIO_Init+0x2c4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00d      	beq.n	80042b8 <HAL_GPIO_Init+0x1e8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3e      	ldr	r2, [pc, #248]	; (8004398 <HAL_GPIO_Init+0x2c8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <HAL_GPIO_Init+0x1e4>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3d      	ldr	r2, [pc, #244]	; (800439c <HAL_GPIO_Init+0x2cc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_GPIO_Init+0x1e0>
 80042ac:	2303      	movs	r3, #3
 80042ae:	e006      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042b0:	2304      	movs	r3, #4
 80042b2:	e004      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e002      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042bc:	2300      	movs	r3, #0
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	f002 0203 	and.w	r2, r2, #3
 80042c4:	0092      	lsls	r2, r2, #2
 80042c6:	4093      	lsls	r3, r2
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042ce:	492f      	ldr	r1, [pc, #188]	; (800438c <HAL_GPIO_Init+0x2bc>)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	3302      	adds	r3, #2
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80042e8:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	492c      	ldr	r1, [pc, #176]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]
 80042f4:	e006      	b.n	8004304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80042f6:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	4928      	ldr	r1, [pc, #160]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004300:	4013      	ands	r3, r2
 8004302:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004310:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	4922      	ldr	r1, [pc, #136]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
 800431c:	e006      	b.n	800432c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	43db      	mvns	r3, r3
 8004326:	491e      	ldr	r1, [pc, #120]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004328:	4013      	ands	r3, r2
 800432a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	4918      	ldr	r1, [pc, #96]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]
 8004344:	e006      	b.n	8004354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	43db      	mvns	r3, r3
 800434e:	4914      	ldr	r1, [pc, #80]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004350:	4013      	ands	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d021      	beq.n	80043a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	490e      	ldr	r1, [pc, #56]	; (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	60cb      	str	r3, [r1, #12]
 800436c:	e021      	b.n	80043b2 <HAL_GPIO_Init+0x2e2>
 800436e:	bf00      	nop
 8004370:	10320000 	.word	0x10320000
 8004374:	10310000 	.word	0x10310000
 8004378:	10220000 	.word	0x10220000
 800437c:	10210000 	.word	0x10210000
 8004380:	10120000 	.word	0x10120000
 8004384:	10110000 	.word	0x10110000
 8004388:	40021000 	.word	0x40021000
 800438c:	40010000 	.word	0x40010000
 8004390:	40010800 	.word	0x40010800
 8004394:	40010c00 	.word	0x40010c00
 8004398:	40011000 	.word	0x40011000
 800439c:	40011400 	.word	0x40011400
 80043a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_GPIO_Init+0x304>)
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	4909      	ldr	r1, [pc, #36]	; (80043d4 <HAL_GPIO_Init+0x304>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	3301      	adds	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f47f ae8e 	bne.w	80040e4 <HAL_GPIO_Init+0x14>
  }
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	372c      	adds	r7, #44	; 0x2c
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	40010400 	.word	0x40010400

080043d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043f4:	e003      	b.n	80043fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	611a      	str	r2, [r3, #16]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e12b      	b.n	8004672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fe fa0a 	bl	8002848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2224      	movs	r2, #36	; 0x24
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800445a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800446a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800446c:	f003 f838 	bl	80074e0 <HAL_RCC_GetPCLK1Freq>
 8004470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4a81      	ldr	r2, [pc, #516]	; (800467c <HAL_I2C_Init+0x274>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d807      	bhi.n	800448c <HAL_I2C_Init+0x84>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4a80      	ldr	r2, [pc, #512]	; (8004680 <HAL_I2C_Init+0x278>)
 8004480:	4293      	cmp	r3, r2
 8004482:	bf94      	ite	ls
 8004484:	2301      	movls	r3, #1
 8004486:	2300      	movhi	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e006      	b.n	800449a <HAL_I2C_Init+0x92>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4a7d      	ldr	r2, [pc, #500]	; (8004684 <HAL_I2C_Init+0x27c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	bf94      	ite	ls
 8004494:	2301      	movls	r3, #1
 8004496:	2300      	movhi	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e0e7      	b.n	8004672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a78      	ldr	r2, [pc, #480]	; (8004688 <HAL_I2C_Init+0x280>)
 80044a6:	fba2 2303 	umull	r2, r3, r2, r3
 80044aa:	0c9b      	lsrs	r3, r3, #18
 80044ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4a6a      	ldr	r2, [pc, #424]	; (800467c <HAL_I2C_Init+0x274>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d802      	bhi.n	80044dc <HAL_I2C_Init+0xd4>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	3301      	adds	r3, #1
 80044da:	e009      	b.n	80044f0 <HAL_I2C_Init+0xe8>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	4a69      	ldr	r2, [pc, #420]	; (800468c <HAL_I2C_Init+0x284>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	3301      	adds	r3, #1
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	495c      	ldr	r1, [pc, #368]	; (800467c <HAL_I2C_Init+0x274>)
 800450c:	428b      	cmp	r3, r1
 800450e:	d819      	bhi.n	8004544 <HAL_I2C_Init+0x13c>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1e59      	subs	r1, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	fbb1 f3f3 	udiv	r3, r1, r3
 800451e:	1c59      	adds	r1, r3, #1
 8004520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004524:	400b      	ands	r3, r1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_I2C_Init+0x138>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1e59      	subs	r1, r3, #1
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	fbb1 f3f3 	udiv	r3, r1, r3
 8004538:	3301      	adds	r3, #1
 800453a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453e:	e051      	b.n	80045e4 <HAL_I2C_Init+0x1dc>
 8004540:	2304      	movs	r3, #4
 8004542:	e04f      	b.n	80045e4 <HAL_I2C_Init+0x1dc>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d111      	bne.n	8004570 <HAL_I2C_Init+0x168>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1e58      	subs	r0, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	440b      	add	r3, r1
 800455a:	fbb0 f3f3 	udiv	r3, r0, r3
 800455e:	3301      	adds	r3, #1
 8004560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e012      	b.n	8004596 <HAL_I2C_Init+0x18e>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1e58      	subs	r0, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6859      	ldr	r1, [r3, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	0099      	lsls	r1, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	fbb0 f3f3 	udiv	r3, r0, r3
 8004586:	3301      	adds	r3, #1
 8004588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Init+0x196>
 800459a:	2301      	movs	r3, #1
 800459c:	e022      	b.n	80045e4 <HAL_I2C_Init+0x1dc>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10e      	bne.n	80045c4 <HAL_I2C_Init+0x1bc>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1e58      	subs	r0, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6859      	ldr	r1, [r3, #4]
 80045ae:	460b      	mov	r3, r1
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	440b      	add	r3, r1
 80045b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c2:	e00f      	b.n	80045e4 <HAL_I2C_Init+0x1dc>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1e58      	subs	r0, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	0099      	lsls	r1, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045da:	3301      	adds	r3, #1
 80045dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	6809      	ldr	r1, [r1, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69da      	ldr	r2, [r3, #28]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6911      	ldr	r1, [r2, #16]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68d2      	ldr	r2, [r2, #12]
 800461e:	4311      	orrs	r1, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	430b      	orrs	r3, r1
 8004626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	000186a0 	.word	0x000186a0
 8004680:	001e847f 	.word	0x001e847f
 8004684:	003d08ff 	.word	0x003d08ff
 8004688:	431bde83 	.word	0x431bde83
 800468c:	10624dd3 	.word	0x10624dd3

08004690 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	4608      	mov	r0, r1
 800469a:	4611      	mov	r1, r2
 800469c:	461a      	mov	r2, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	817b      	strh	r3, [r7, #10]
 80046a2:	460b      	mov	r3, r1
 80046a4:	813b      	strh	r3, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046aa:	f7fe fc3d 	bl	8002f28 <HAL_GetTick>
 80046ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	f040 80d9 	bne.w	8004870 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2319      	movs	r3, #25
 80046c4:	2201      	movs	r2, #1
 80046c6:	496d      	ldr	r1, [pc, #436]	; (800487c <HAL_I2C_Mem_Write+0x1ec>)
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f002 f963 	bl	8006994 <I2C_WaitOnFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
 80046d6:	e0cc      	b.n	8004872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_I2C_Mem_Write+0x56>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e0c5      	b.n	8004872 <HAL_I2C_Mem_Write+0x1e2>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d007      	beq.n	800470c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800471a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2221      	movs	r2, #33	; 0x21
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2240      	movs	r2, #64	; 0x40
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800473c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a4d      	ldr	r2, [pc, #308]	; (8004880 <HAL_I2C_Mem_Write+0x1f0>)
 800474c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800474e:	88f8      	ldrh	r0, [r7, #6]
 8004750:	893a      	ldrh	r2, [r7, #8]
 8004752:	8979      	ldrh	r1, [r7, #10]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	9301      	str	r3, [sp, #4]
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	4603      	mov	r3, r0
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f001 fde6 	bl	8006330 <I2C_RequestMemoryWrite>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d052      	beq.n	8004810 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e081      	b.n	8004872 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f002 f9e4 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00d      	beq.n	800479a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	2b04      	cmp	r3, #4
 8004784:	d107      	bne.n	8004796 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004794:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e06b      	b.n	8004872 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d11b      	bne.n	8004810 <HAL_I2C_Mem_Write+0x180>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1aa      	bne.n	800476e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f002 f9d0 	bl	8006bc2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	2b04      	cmp	r3, #4
 800482e:	d107      	bne.n	8004840 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e016      	b.n	8004872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	e000      	b.n	8004872 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004870:	2302      	movs	r3, #2
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	00100002 	.word	0x00100002
 8004880:	ffff0000 	.word	0xffff0000

08004884 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08c      	sub	sp, #48	; 0x30
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	461a      	mov	r2, r3
 8004892:	4603      	mov	r3, r0
 8004894:	817b      	strh	r3, [r7, #10]
 8004896:	460b      	mov	r3, r1
 8004898:	813b      	strh	r3, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800489e:	f7fe fb43 	bl	8002f28 <HAL_GetTick>
 80048a2:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	f040 8160 	bne.w	8004b76 <HAL_I2C_Mem_Read_DMA+0x2f2>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80048b6:	4b9c      	ldr	r3, [pc, #624]	; (8004b28 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	08db      	lsrs	r3, r3, #3
 80048bc:	4a9b      	ldr	r2, [pc, #620]	; (8004b2c <HAL_I2C_Mem_Read_DMA+0x2a8>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	0a1a      	lsrs	r2, r3, #8
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009a      	lsls	r2, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d116      	bne.n	800490a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e136      	b.n	8004b78 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b02      	cmp	r3, #2
 8004916:	d0db      	beq.n	80048d0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004922:	2302      	movs	r3, #2
 8004924:	e128      	b.n	8004b78 <HAL_I2C_Mem_Read_DMA+0x2f4>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d007      	beq.n	800494c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2222      	movs	r2, #34	; 0x22
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2240      	movs	r2, #64	; 0x40
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004976:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800497c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a69      	ldr	r2, [pc, #420]	; (8004b30 <HAL_I2C_Mem_Read_DMA+0x2ac>)
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80b8 	beq.w	8004b08 <HAL_I2C_Mem_Read_DMA+0x284>
    {
      if (hi2c->hdmarx != NULL)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d024      	beq.n	80049ea <HAL_I2C_Mem_Read_DMA+0x166>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	4a63      	ldr	r2, [pc, #396]	; (8004b34 <HAL_I2C_Mem_Read_DMA+0x2b0>)
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	4a62      	ldr	r2, [pc, #392]	; (8004b38 <HAL_I2C_Mem_Read_DMA+0x2b4>)
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	2200      	movs	r2, #0
 80049b6:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	2200      	movs	r2, #0
 80049be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3310      	adds	r3, #16
 80049ca:	4619      	mov	r1, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	461a      	mov	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d6:	f7ff f965 	bl	8003ca4 <HAL_DMA_Start_IT>
 80049da:	4603      	mov	r3, r0
 80049dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80049e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d17b      	bne.n	8004ae0 <HAL_I2C_Mem_Read_DMA+0x25c>
 80049e8:	e013      	b.n	8004a12 <HAL_I2C_Mem_Read_DMA+0x18e>
        hi2c->State     = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0b2      	b.n	8004b78 <HAL_I2C_Mem_Read_DMA+0x2f4>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004a12:	88f8      	ldrh	r0, [r7, #6]
 8004a14:	893a      	ldrh	r2, [r7, #8]
 8004a16:	8979      	ldrh	r1, [r7, #10]
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	2323      	movs	r3, #35	; 0x23
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	4603      	mov	r3, r0
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f001 fd1a 	bl	800645c <I2C_RequestMemoryRead>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d023      	beq.n	8004a76 <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff f996 	bl	8003d64 <HAL_DMA_Abort_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	2200      	movs	r2, #0
 8004a44:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a54:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e080      	b.n	8004b78 <HAL_I2C_Mem_Read_DMA+0x2f4>
        }

        if (hi2c->XferSize == 1U)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d108      	bne.n	8004a90 <HAL_I2C_Mem_Read_DMA+0x20c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e007      	b.n	8004aa0 <HAL_I2C_Mem_Read_DMA+0x21c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a9e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	61bb      	str	r3, [r7, #24]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	61bb      	str	r3, [r7, #24]
 8004ab4:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004acc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	e048      	b.n	8004b72 <HAL_I2C_Mem_Read_DMA+0x2ee>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	f043 0210 	orr.w	r2, r3, #16
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e037      	b.n	8004b78 <HAL_I2C_Mem_Read_DMA+0x2f4>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004b08:	88f8      	ldrh	r0, [r7, #6]
 8004b0a:	893a      	ldrh	r2, [r7, #8]
 8004b0c:	8979      	ldrh	r1, [r7, #10]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	2323      	movs	r3, #35	; 0x23
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4603      	mov	r3, r0
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f001 fc9f 	bl	800645c <I2C_RequestMemoryRead>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_I2C_Mem_Read_DMA+0x2b8>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e027      	b.n	8004b78 <HAL_I2C_Mem_Read_DMA+0x2f4>
 8004b28:	20000028 	.word	0x20000028
 8004b2c:	14f8b589 	.word	0x14f8b589
 8004b30:	ffff0000 	.word	0xffff0000
 8004b34:	0800662d 	.word	0x0800662d
 8004b38:	080067d7 	.word	0x080067d7
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b60:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	e000      	b.n	8004b78 <HAL_I2C_Mem_Read_DMA+0x2f4>
  }
  else
  {
    return HAL_BUSY;
 8004b76:	2302      	movs	r3, #2
  }
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3728      	adds	r7, #40	; 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d003      	beq.n	8004bb8 <HAL_I2C_EV_IRQHandler+0x38>
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	f040 80c1 	bne.w	8004d3a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <HAL_I2C_EV_IRQHandler+0x6e>
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bd8:	d003      	beq.n	8004be2 <HAL_I2C_EV_IRQHandler+0x62>
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004be0:	d101      	bne.n	8004be6 <HAL_I2C_EV_IRQHandler+0x66>
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <HAL_I2C_EV_IRQHandler+0x68>
 8004be6:	2300      	movs	r3, #0
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	f000 8132 	beq.w	8004e52 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <HAL_I2C_EV_IRQHandler+0x92>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	0a5b      	lsrs	r3, r3, #9
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f002 f87d 	bl	8006d04 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fd6e 	bl	80056ec <I2C_Master_SB>
 8004c10:	e092      	b.n	8004d38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	08db      	lsrs	r3, r3, #3
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_I2C_EV_IRQHandler+0xb2>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	0a5b      	lsrs	r3, r3, #9
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fde3 	bl	80057f6 <I2C_Master_ADD10>
 8004c30:	e082      	b.n	8004d38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <HAL_I2C_EV_IRQHandler+0xd2>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	0a5b      	lsrs	r3, r3, #9
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fdfc 	bl	8005848 <I2C_Master_ADDR>
 8004c50:	e072      	b.n	8004d38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	089b      	lsrs	r3, r3, #2
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d03b      	beq.n	8004cd6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6c:	f000 80f3 	beq.w	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	09db      	lsrs	r3, r3, #7
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00f      	beq.n	8004c9c <HAL_I2C_EV_IRQHandler+0x11c>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	0a9b      	lsrs	r3, r3, #10
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <HAL_I2C_EV_IRQHandler+0x11c>
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d103      	bne.n	8004c9c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f9e8 	bl	800506a <I2C_MasterTransmit_TXE>
 8004c9a:	e04d      	b.n	8004d38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80d6 	beq.w	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	0a5b      	lsrs	r3, r3, #9
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80cf 	beq.w	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004cb8:	7bbb      	ldrb	r3, [r7, #14]
 8004cba:	2b21      	cmp	r3, #33	; 0x21
 8004cbc:	d103      	bne.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa6f 	bl	80051a2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cc4:	e0c7      	b.n	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	f040 80c4 	bne.w	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fadd 	bl	800528e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cd4:	e0bf      	b.n	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce4:	f000 80b7 	beq.w	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	099b      	lsrs	r3, r3, #6
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00f      	beq.n	8004d14 <HAL_I2C_EV_IRQHandler+0x194>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	0a9b      	lsrs	r3, r3, #10
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d009      	beq.n	8004d14 <HAL_I2C_EV_IRQHandler+0x194>
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	089b      	lsrs	r3, r3, #2
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fb52 	bl	80053b6 <I2C_MasterReceive_RXNE>
 8004d12:	e011      	b.n	8004d38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 809a 	beq.w	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	0a5b      	lsrs	r3, r3, #9
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8093 	beq.w	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fbf1 	bl	8005518 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d36:	e08e      	b.n	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d38:	e08d      	b.n	8004e56 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e007      	b.n	8004d5c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d012      	beq.n	8004d8e <HAL_I2C_EV_IRQHandler+0x20e>
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	0a5b      	lsrs	r3, r3, #9
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00c      	beq.n	8004d8e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004d84:	69b9      	ldr	r1, [r7, #24]
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 ffb5 	bl	8005cf6 <I2C_Slave_ADDR>
 8004d8c:	e066      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <HAL_I2C_EV_IRQHandler+0x22e>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	0a5b      	lsrs	r3, r3, #9
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fff0 	bl	8005d8c <I2C_Slave_STOPF>
 8004dac:	e056      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004dae:	7bbb      	ldrb	r3, [r7, #14]
 8004db0:	2b21      	cmp	r3, #33	; 0x21
 8004db2:	d002      	beq.n	8004dba <HAL_I2C_EV_IRQHandler+0x23a>
 8004db4:	7bbb      	ldrb	r3, [r7, #14]
 8004db6:	2b29      	cmp	r3, #41	; 0x29
 8004db8:	d125      	bne.n	8004e06 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	09db      	lsrs	r3, r3, #7
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00f      	beq.n	8004de6 <HAL_I2C_EV_IRQHandler+0x266>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	0a9b      	lsrs	r3, r3, #10
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <HAL_I2C_EV_IRQHandler+0x266>
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d103      	bne.n	8004de6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fecd 	bl	8005b7e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004de4:	e039      	b.n	8004e5a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d033      	beq.n	8004e5a <HAL_I2C_EV_IRQHandler+0x2da>
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	0a5b      	lsrs	r3, r3, #9
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d02d      	beq.n	8004e5a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fefa 	bl	8005bf8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e04:	e029      	b.n	8004e5a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	099b      	lsrs	r3, r3, #6
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00f      	beq.n	8004e32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	0a9b      	lsrs	r3, r3, #10
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	089b      	lsrs	r3, r3, #2
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 ff04 	bl	8005c38 <I2C_SlaveReceive_RXNE>
 8004e30:	e014      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	089b      	lsrs	r3, r3, #2
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00e      	beq.n	8004e5c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	0a5b      	lsrs	r3, r3, #9
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 ff32 	bl	8005cb4 <I2C_SlaveReceive_BTF>
 8004e50:	e004      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004e5c:	3720      	adds	r7, #32
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b08a      	sub	sp, #40	; 0x28
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e84:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <HAL_I2C_ER_IRQHandler+0x5e>
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	0a1b      	lsrs	r3, r3, #8
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d010      	beq.n	8004ec0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004eae:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ebe:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	0a5b      	lsrs	r3, r3, #9
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00e      	beq.n	8004eea <HAL_I2C_ER_IRQHandler+0x88>
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	f043 0302 	orr.w	r3, r3, #2
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004ee8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	0a9b      	lsrs	r3, r3, #10
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d03f      	beq.n	8004f76 <HAL_I2C_ER_IRQHandler+0x114>
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	0a1b      	lsrs	r3, r3, #8
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d039      	beq.n	8004f76 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004f02:	7efb      	ldrb	r3, [r7, #27]
 8004f04:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f14:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004f1c:	7ebb      	ldrb	r3, [r7, #26]
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d112      	bne.n	8004f48 <HAL_I2C_ER_IRQHandler+0xe6>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10f      	bne.n	8004f48 <HAL_I2C_ER_IRQHandler+0xe6>
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	2b21      	cmp	r3, #33	; 0x21
 8004f2c:	d008      	beq.n	8004f40 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	2b29      	cmp	r3, #41	; 0x29
 8004f32:	d005      	beq.n	8004f40 <HAL_I2C_ER_IRQHandler+0xde>
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	2b28      	cmp	r3, #40	; 0x28
 8004f38:	d106      	bne.n	8004f48 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b21      	cmp	r3, #33	; 0x21
 8004f3e:	d103      	bne.n	8004f48 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 f853 	bl	8005fec <I2C_Slave_AF>
 8004f46:	e016      	b.n	8004f76 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f50:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	f043 0304 	orr.w	r3, r3, #4
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f5a:	7efb      	ldrb	r3, [r7, #27]
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d002      	beq.n	8004f66 <HAL_I2C_ER_IRQHandler+0x104>
 8004f60:	7efb      	ldrb	r3, [r7, #27]
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d107      	bne.n	8004f76 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f74:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	0adb      	lsrs	r3, r3, #11
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00e      	beq.n	8004fa0 <HAL_I2C_ER_IRQHandler+0x13e>
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	f043 0308 	orr.w	r3, r3, #8
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004f9e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d008      	beq.n	8004fb8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 f88a 	bl	80060cc <I2C_ITError>
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3728      	adds	r7, #40	; 0x28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr

08005008 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
 8005014:	4613      	mov	r3, r2
 8005016:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005078:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005080:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508c:	2b00      	cmp	r3, #0
 800508e:	d150      	bne.n	8005132 <I2C_MasterTransmit_TXE+0xc8>
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b21      	cmp	r3, #33	; 0x21
 8005094:	d14d      	bne.n	8005132 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d01d      	beq.n	80050d8 <I2C_MasterTransmit_TXE+0x6e>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d01a      	beq.n	80050d8 <I2C_MasterTransmit_TXE+0x6e>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050a8:	d016      	beq.n	80050d8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050b8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2211      	movs	r2, #17
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff ff75 	bl	8004fc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050d6:	e060      	b.n	800519a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050e6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050f6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b40      	cmp	r3, #64	; 0x40
 8005110:	d107      	bne.n	8005122 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ff8a 	bl	8005034 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005120:	e03b      	b.n	800519a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ff48 	bl	8004fc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005130:	e033      	b.n	800519a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b21      	cmp	r3, #33	; 0x21
 8005136:	d005      	beq.n	8005144 <I2C_MasterTransmit_TXE+0xda>
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d12d      	bne.n	800519a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b22      	cmp	r3, #34	; 0x22
 8005142:	d12a      	bne.n	800519a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800515e:	e01c      	b.n	800519a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d103      	bne.n	8005174 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f88e 	bl	800528e <I2C_MemoryTransmit_TXE_BTF>
}
 8005172:	e012      	b.n	800519a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005198:	e7ff      	b.n	800519a <I2C_MasterTransmit_TXE+0x130>
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b21      	cmp	r3, #33	; 0x21
 80051ba:	d164      	bne.n	8005286 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d012      	beq.n	80051ec <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	781a      	ldrb	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80051ea:	e04c      	b.n	8005286 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d01d      	beq.n	800522e <I2C_MasterTransmit_BTF+0x8c>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d01a      	beq.n	800522e <I2C_MasterTransmit_BTF+0x8c>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051fe:	d016      	beq.n	800522e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800520e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2211      	movs	r2, #17
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff feca 	bl	8004fc0 <HAL_I2C_MasterTxCpltCallback>
}
 800522c:	e02b      	b.n	8005286 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800523c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d107      	bne.n	8005278 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff fedf 	bl	8005034 <HAL_I2C_MemTxCpltCallback>
}
 8005276:	e006      	b.n	8005286 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff fe9d 	bl	8004fc0 <HAL_I2C_MasterTxCpltCallback>
}
 8005286:	bf00      	nop
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11d      	bne.n	80052e2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10b      	bne.n	80052c6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052be:	1c9a      	adds	r2, r3, #2
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80052c4:	e073      	b.n	80053ae <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	121b      	asrs	r3, r3, #8
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052e0:	e065      	b.n	80053ae <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10b      	bne.n	8005302 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005300:	e055      	b.n	80053ae <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005306:	2b02      	cmp	r3, #2
 8005308:	d151      	bne.n	80053ae <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	2b22      	cmp	r3, #34	; 0x22
 800530e:	d10d      	bne.n	800532c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	651a      	str	r2, [r3, #80]	; 0x50
}
 800532a:	e040      	b.n	80053ae <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d015      	beq.n	8005362 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	2b21      	cmp	r3, #33	; 0x21
 800533a:	d112      	bne.n	8005362 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005360:	e025      	b.n	80053ae <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d120      	bne.n	80053ae <I2C_MemoryTransmit_TXE_BTF+0x120>
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b21      	cmp	r3, #33	; 0x21
 8005370:	d11d      	bne.n	80053ae <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005380:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005390:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fe43 	bl	8005034 <HAL_I2C_MemTxCpltCallback>
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b22      	cmp	r3, #34	; 0x22
 80053c8:	f040 80a2 	bne.w	8005510 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d921      	bls.n	800541e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b03      	cmp	r3, #3
 8005408:	f040 8082 	bne.w	8005510 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800541c:	e078      	b.n	8005510 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	2b02      	cmp	r3, #2
 8005424:	d074      	beq.n	8005510 <I2C_MasterReceive_RXNE+0x15a>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d002      	beq.n	8005432 <I2C_MasterReceive_RXNE+0x7c>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d16e      	bne.n	8005510 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 fc06 	bl	8006c44 <I2C_WaitOnSTOPRequestThroughIT>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d142      	bne.n	80054c4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800545c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	d10a      	bne.n	80054ae <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fd f830 	bl	800250c <HAL_I2C_MemRxCpltCallback>
}
 80054ac:	e030      	b.n	8005510 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2212      	movs	r2, #18
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fd88 	bl	8004fd2 <HAL_I2C_MasterRxCpltCallback>
}
 80054c2:	e025      	b.n	8005510 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff fd9b 	bl	8005046 <HAL_I2C_ErrorCallback>
}
 8005510:	bf00      	nop
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b04      	cmp	r3, #4
 800552e:	d11b      	bne.n	8005568 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	691a      	ldr	r2, [r3, #16]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005566:	e0bd      	b.n	80056e4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b03      	cmp	r3, #3
 8005570:	d129      	bne.n	80055c6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005580:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b04      	cmp	r3, #4
 8005586:	d00a      	beq.n	800559e <I2C_MasterReceive_BTF+0x86>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d007      	beq.n	800559e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055c4:	e08e      	b.n	80056e4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d176      	bne.n	80056be <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d002      	beq.n	80055dc <I2C_MasterReceive_BTF+0xc4>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d108      	bne.n	80055ee <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e019      	b.n	8005622 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d002      	beq.n	80055fa <I2C_MasterReceive_BTF+0xe2>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d108      	bne.n	800560c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e00a      	b.n	8005622 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b10      	cmp	r3, #16
 8005610:	d007      	beq.n	8005622 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005620:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b01      	subs	r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800567c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d10a      	bne.n	80056a8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fc ff33 	bl	800250c <HAL_I2C_MemRxCpltCallback>
}
 80056a6:	e01d      	b.n	80056e4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2212      	movs	r2, #18
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff fc8b 	bl	8004fd2 <HAL_I2C_MasterRxCpltCallback>
}
 80056bc:	e012      	b.n	80056e4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d117      	bne.n	8005730 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570c:	b2db      	uxtb	r3, r3
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005718:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800571a:	e067      	b.n	80057ec <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005720:	b2db      	uxtb	r3, r3
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	b2da      	uxtb	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	611a      	str	r2, [r3, #16]
}
 800572e:	e05d      	b.n	80057ec <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005738:	d133      	bne.n	80057a2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b21      	cmp	r3, #33	; 0x21
 8005744:	d109      	bne.n	800575a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005756:	611a      	str	r2, [r3, #16]
 8005758:	e008      	b.n	800576c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f043 0301 	orr.w	r3, r3, #1
 8005764:	b2da      	uxtb	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <I2C_Master_SB+0x92>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d108      	bne.n	8005790 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	2b00      	cmp	r3, #0
 8005784:	d032      	beq.n	80057ec <I2C_Master_SB+0x100>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578c:	2b00      	cmp	r3, #0
 800578e:	d02d      	beq.n	80057ec <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800579e:	605a      	str	r2, [r3, #4]
}
 80057a0:	e024      	b.n	80057ec <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10e      	bne.n	80057c8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	11db      	asrs	r3, r3, #7
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f003 0306 	and.w	r3, r3, #6
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	f063 030f 	orn	r3, r3, #15
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	611a      	str	r2, [r3, #16]
}
 80057c6:	e011      	b.n	80057ec <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10d      	bne.n	80057ec <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	11db      	asrs	r3, r3, #7
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 0306 	and.w	r3, r3, #6
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f063 030e 	orn	r3, r3, #14
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	611a      	str	r2, [r3, #16]
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr

080057f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	b2da      	uxtb	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <I2C_Master_ADD10+0x26>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	2b00      	cmp	r3, #0
 800581a:	d108      	bne.n	800582e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00c      	beq.n	800583e <I2C_Master_ADD10+0x48>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800583c:	605a      	str	r2, [r3, #4]
  }
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005848:	b480      	push	{r7}
 800584a:	b091      	sub	sp, #68	; 0x44
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005856:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b22      	cmp	r3, #34	; 0x22
 8005870:	f040 8174 	bne.w	8005b5c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10f      	bne.n	800589c <I2C_Master_ADDR+0x54>
 800587c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d10b      	bne.n	800589c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005884:	2300      	movs	r3, #0
 8005886:	633b      	str	r3, [r7, #48]	; 0x30
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	633b      	str	r3, [r7, #48]	; 0x30
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	633b      	str	r3, [r7, #48]	; 0x30
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	e16b      	b.n	8005b74 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d11d      	bne.n	80058e0 <I2C_Master_ADDR+0x98>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058ac:	d118      	bne.n	80058e0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ae:	2300      	movs	r3, #0
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	651a      	str	r2, [r3, #80]	; 0x50
 80058de:	e149      	b.n	8005b74 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d113      	bne.n	8005912 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ea:	2300      	movs	r3, #0
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e120      	b.n	8005b54 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b01      	cmp	r3, #1
 800591a:	f040 808a 	bne.w	8005a32 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005924:	d137      	bne.n	8005996 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005934:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005944:	d113      	bne.n	800596e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005954:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005956:	2300      	movs	r3, #0
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	e0f2      	b.n	8005b54 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596e:	2300      	movs	r3, #0
 8005970:	623b      	str	r3, [r7, #32]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	623b      	str	r3, [r7, #32]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	623b      	str	r3, [r7, #32]
 8005982:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e0de      	b.n	8005b54 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	2b08      	cmp	r3, #8
 800599a:	d02e      	beq.n	80059fa <I2C_Master_ADDR+0x1b2>
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d02b      	beq.n	80059fa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80059a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a4:	2b12      	cmp	r3, #18
 80059a6:	d102      	bne.n	80059ae <I2C_Master_ADDR+0x166>
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d125      	bne.n	80059fa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d00e      	beq.n	80059d2 <I2C_Master_ADDR+0x18a>
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d00b      	beq.n	80059d2 <I2C_Master_ADDR+0x18a>
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d008      	beq.n	80059d2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e007      	b.n	80059e2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	e0ac      	b.n	8005b54 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a08:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e090      	b.n	8005b54 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d158      	bne.n	8005aee <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d021      	beq.n	8005a86 <I2C_Master_ADDR+0x23e>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d01e      	beq.n	8005a86 <I2C_Master_ADDR+0x23e>
 8005a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4a:	2b10      	cmp	r3, #16
 8005a4c:	d01b      	beq.n	8005a86 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a5c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e012      	b.n	8005aac <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a94:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aba:	d14b      	bne.n	8005b54 <I2C_Master_ADDR+0x30c>
 8005abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ac2:	d00b      	beq.n	8005adc <I2C_Master_ADDR+0x294>
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d008      	beq.n	8005adc <I2C_Master_ADDR+0x294>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d005      	beq.n	8005adc <I2C_Master_ADDR+0x294>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d002      	beq.n	8005adc <I2C_Master_ADDR+0x294>
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d13b      	bne.n	8005b54 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005aea:	605a      	str	r2, [r3, #4]
 8005aec:	e032      	b.n	8005b54 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005afc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0c:	d117      	bne.n	8005b3e <I2C_Master_ADDR+0x2f6>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b14:	d00b      	beq.n	8005b2e <I2C_Master_ADDR+0x2e6>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d008      	beq.n	8005b2e <I2C_Master_ADDR+0x2e6>
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d005      	beq.n	8005b2e <I2C_Master_ADDR+0x2e6>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d002      	beq.n	8005b2e <I2C_Master_ADDR+0x2e6>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d107      	bne.n	8005b3e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b3c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005b5a:	e00b      	b.n	8005b74 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	60bb      	str	r3, [r7, #8]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	68bb      	ldr	r3, [r7, #8]
}
 8005b72:	e7ff      	b.n	8005b74 <I2C_Master_ADDR+0x32c>
 8005b74:	bf00      	nop
 8005b76:	3744      	adds	r7, #68	; 0x44
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr

08005b7e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d02b      	beq.n	8005bf0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d114      	bne.n	8005bf0 <I2C_SlaveTransmit_TXE+0x72>
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b29      	cmp	r3, #41	; 0x29
 8005bca:	d111      	bne.n	8005bf0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bda:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2221      	movs	r2, #33	; 0x21
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2228      	movs	r2, #40	; 0x28
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff f9fa 	bl	8004fe4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d011      	beq.n	8005c2e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	781a      	ldrb	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr

08005c38 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d02c      	beq.n	8005cac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d114      	bne.n	8005cac <I2C_SlaveReceive_RXNE+0x74>
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b2a      	cmp	r3, #42	; 0x2a
 8005c86:	d111      	bne.n	8005cac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2222      	movs	r2, #34	; 0x22
 8005c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2228      	movs	r2, #40	; 0x28
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff f9a5 	bl	8004ff6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d012      	beq.n	8005cec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr

08005cf6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b084      	sub	sp, #16
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d10:	2b28      	cmp	r3, #40	; 0x28
 8005d12:	d127      	bne.n	8005d64 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d22:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	089b      	lsrs	r3, r3, #2
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005d30:	2301      	movs	r3, #1
 8005d32:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	09db      	lsrs	r3, r3, #7
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	81bb      	strh	r3, [r7, #12]
 8005d46:	e002      	b.n	8005d4e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005d56:	89ba      	ldrh	r2, [r7, #12]
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff f953 	bl	8005008 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d62:	e00e      	b.n	8005d82 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d64:	2300      	movs	r3, #0
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	60bb      	str	r3, [r7, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005daa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005dac:	2300      	movs	r3, #0
 8005dae:	60bb      	str	r3, [r7, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de8:	d172      	bne.n	8005ed0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	2b22      	cmp	r3, #34	; 0x22
 8005dee:	d002      	beq.n	8005df6 <I2C_Slave_STOPF+0x6a>
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b2a      	cmp	r3, #42	; 0x2a
 8005df4:	d135      	bne.n	8005e62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe f914 	bl	800405c <HAL_DMA_GetState>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d049      	beq.n	8005ece <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	4a69      	ldr	r2, [pc, #420]	; (8005fe4 <I2C_Slave_STOPF+0x258>)
 8005e40:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd ff8c 	bl	8003d64 <HAL_DMA_Abort_IT>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d03d      	beq.n	8005ece <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e60:	e035      	b.n	8005ece <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f043 0204 	orr.w	r2, r3, #4
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe f8de 	bl	800405c <HAL_DMA_GetState>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d014      	beq.n	8005ed0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eaa:	4a4e      	ldr	r2, [pc, #312]	; (8005fe4 <I2C_Slave_STOPF+0x258>)
 8005eac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fd ff56 	bl	8003d64 <HAL_DMA_Abort_IT>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
 8005ecc:	e000      	b.n	8005ed0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ece:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d03e      	beq.n	8005f58 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d112      	bne.n	8005f0e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d112      	bne.n	8005f42 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	f043 0204 	orr.w	r2, r3, #4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f8b3 	bl	80060cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005f66:	e039      	b.n	8005fdc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f6c:	d109      	bne.n	8005f82 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2228      	movs	r2, #40	; 0x28
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff f83a 	bl	8004ff6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b28      	cmp	r3, #40	; 0x28
 8005f8c:	d111      	bne.n	8005fb2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <I2C_Slave_STOPF+0x25c>)
 8005f92:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff f839 	bl	8005022 <HAL_I2C_ListenCpltCallback>
}
 8005fb0:	e014      	b.n	8005fdc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	2b22      	cmp	r3, #34	; 0x22
 8005fb8:	d002      	beq.n	8005fc0 <I2C_Slave_STOPF+0x234>
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	2b22      	cmp	r3, #34	; 0x22
 8005fbe:	d10d      	bne.n	8005fdc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff f80d 	bl	8004ff6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	08006845 	.word	0x08006845
 8005fe8:	ffff0000 	.word	0xffff0000

08005fec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b08      	cmp	r3, #8
 8006006:	d002      	beq.n	800600e <I2C_Slave_AF+0x22>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b20      	cmp	r3, #32
 800600c:	d129      	bne.n	8006062 <I2C_Slave_AF+0x76>
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b28      	cmp	r3, #40	; 0x28
 8006012:	d126      	bne.n	8006062 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a2c      	ldr	r2, [pc, #176]	; (80060c8 <I2C_Slave_AF+0xdc>)
 8006018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006028:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006032:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006042:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fe ffe1 	bl	8005022 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006060:	e02e      	b.n	80060c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	2b21      	cmp	r3, #33	; 0x21
 8006066:	d126      	bne.n	80060b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <I2C_Slave_AF+0xdc>)
 800606c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2221      	movs	r2, #33	; 0x21
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006092:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800609c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fe ff98 	bl	8004fe4 <HAL_I2C_SlaveTxCpltCallback>
}
 80060b4:	e004      	b.n	80060c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060be:	615a      	str	r2, [r3, #20]
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	ffff0000 	.word	0xffff0000

080060cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d002      	beq.n	80060f0 <I2C_ITError+0x24>
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d10a      	bne.n	8006106 <I2C_ITError+0x3a>
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b22      	cmp	r3, #34	; 0x22
 80060f4:	d107      	bne.n	8006106 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006104:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800610c:	2b28      	cmp	r3, #40	; 0x28
 800610e:	d107      	bne.n	8006120 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2228      	movs	r2, #40	; 0x28
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800611e:	e015      	b.n	800614c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800612a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800612e:	d00a      	beq.n	8006146 <I2C_ITError+0x7a>
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b60      	cmp	r3, #96	; 0x60
 8006134:	d007      	beq.n	8006146 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800615a:	d161      	bne.n	8006220 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800616a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006170:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006174:	2b01      	cmp	r3, #1
 8006176:	d020      	beq.n	80061ba <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617c:	4a6a      	ldr	r2, [pc, #424]	; (8006328 <I2C_ITError+0x25c>)
 800617e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006184:	4618      	mov	r0, r3
 8006186:	f7fd fded 	bl	8003d64 <HAL_DMA_Abort_IT>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8089 	beq.w	80062a4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0201 	bic.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
 80061b8:	e074      	b.n	80062a4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	4a5a      	ldr	r2, [pc, #360]	; (8006328 <I2C_ITError+0x25c>)
 80061c0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fd fdcc 	bl	8003d64 <HAL_DMA_Abort_IT>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d068      	beq.n	80062a4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	d10b      	bne.n	80061f8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800621a:	4610      	mov	r0, r2
 800621c:	4798      	blx	r3
 800621e:	e041      	b.n	80062a4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b60      	cmp	r3, #96	; 0x60
 800622a:	d125      	bne.n	8006278 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	d10b      	bne.n	8006260 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7fe fef1 	bl	8005058 <HAL_I2C_AbortCpltCallback>
 8006276:	e015      	b.n	80062a4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d10b      	bne.n	800629e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	691a      	ldr	r2, [r3, #16]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fe fed1 	bl	8005046 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10e      	bne.n	80062d2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d007      	beq.n	80062e2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062e0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	d113      	bne.n	800631e <I2C_ITError+0x252>
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b28      	cmp	r3, #40	; 0x28
 80062fa:	d110      	bne.n	800631e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a0b      	ldr	r2, [pc, #44]	; (800632c <I2C_ITError+0x260>)
 8006300:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7fe fe82 	bl	8005022 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800631e:	bf00      	nop
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	08006845 	.word	0x08006845
 800632c:	ffff0000 	.word	0xffff0000

08006330 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	461a      	mov	r2, r3
 800633e:	4603      	mov	r3, r0
 8006340:	817b      	strh	r3, [r7, #10]
 8006342:	460b      	mov	r3, r1
 8006344:	813b      	strh	r3, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	2200      	movs	r2, #0
 8006362:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fb14 	bl	8006994 <I2C_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006380:	d103      	bne.n	800638a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006388:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e05f      	b.n	800644e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800638e:	897b      	ldrh	r3, [r7, #10]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800639c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	492d      	ldr	r1, [pc, #180]	; (8006458 <I2C_RequestMemoryWrite+0x128>)
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fb4c 	bl	8006a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e04c      	b.n	800644e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063cc:	6a39      	ldr	r1, [r7, #32]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fbb6 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00d      	beq.n	80063f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d107      	bne.n	80063f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e02b      	b.n	800644e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d105      	bne.n	8006408 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063fc:	893b      	ldrh	r3, [r7, #8]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	611a      	str	r2, [r3, #16]
 8006406:	e021      	b.n	800644c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006408:	893b      	ldrh	r3, [r7, #8]
 800640a:	0a1b      	lsrs	r3, r3, #8
 800640c:	b29b      	uxth	r3, r3
 800640e:	b2da      	uxtb	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006418:	6a39      	ldr	r1, [r7, #32]
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fb90 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	2b04      	cmp	r3, #4
 800642c:	d107      	bne.n	800643e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e005      	b.n	800644e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006442:	893b      	ldrh	r3, [r7, #8]
 8006444:	b2da      	uxtb	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	00010002 	.word	0x00010002

0800645c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	4608      	mov	r0, r1
 8006466:	4611      	mov	r1, r2
 8006468:	461a      	mov	r2, r3
 800646a:	4603      	mov	r3, r0
 800646c:	817b      	strh	r3, [r7, #10]
 800646e:	460b      	mov	r3, r1
 8006470:	813b      	strh	r3, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006484:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006494:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2200      	movs	r2, #0
 800649e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fa76 	bl	8006994 <I2C_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064bc:	d103      	bne.n	80064c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e0aa      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ca:	897b      	ldrh	r3, [r7, #10]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	6a3a      	ldr	r2, [r7, #32]
 80064de:	4952      	ldr	r1, [pc, #328]	; (8006628 <I2C_RequestMemoryRead+0x1cc>)
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 faae 	bl	8006a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e097      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006508:	6a39      	ldr	r1, [r7, #32]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fb18 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00d      	beq.n	8006532 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	2b04      	cmp	r3, #4
 800651c:	d107      	bne.n	800652e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800652c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e076      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d105      	bne.n	8006544 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006538:	893b      	ldrh	r3, [r7, #8]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	611a      	str	r2, [r3, #16]
 8006542:	e021      	b.n	8006588 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006544:	893b      	ldrh	r3, [r7, #8]
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	b29b      	uxth	r3, r3
 800654a:	b2da      	uxtb	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006554:	6a39      	ldr	r1, [r7, #32]
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 faf2 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00d      	beq.n	800657e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	2b04      	cmp	r3, #4
 8006568:	d107      	bne.n	800657a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006578:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e050      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800657e:	893b      	ldrh	r3, [r7, #8]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658a:	6a39      	ldr	r1, [r7, #32]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fad7 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00d      	beq.n	80065b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	2b04      	cmp	r3, #4
 800659e:	d107      	bne.n	80065b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e035      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f9df 	bl	8006994 <I2C_WaitOnFlagUntilTimeout>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00d      	beq.n	80065f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ea:	d103      	bne.n	80065f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e013      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065f8:	897b      	ldrh	r3, [r7, #10]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	b2da      	uxtb	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	6a3a      	ldr	r2, [r7, #32]
 800660c:	4906      	ldr	r1, [pc, #24]	; (8006628 <I2C_RequestMemoryRead+0x1cc>)
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fa17 	bl	8006a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	00010002 	.word	0x00010002

0800662c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006640:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006648:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800665e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666c:	2200      	movs	r2, #0
 800666e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667c:	2200      	movs	r2, #0
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006680:	7cfb      	ldrb	r3, [r7, #19]
 8006682:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006686:	2b21      	cmp	r3, #33	; 0x21
 8006688:	d007      	beq.n	800669a <I2C_DMAXferCplt+0x6e>
 800668a:	7cfb      	ldrb	r3, [r7, #19]
 800668c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006690:	2b22      	cmp	r3, #34	; 0x22
 8006692:	d131      	bne.n	80066f8 <I2C_DMAXferCplt+0xcc>
 8006694:	7cbb      	ldrb	r3, [r7, #18]
 8006696:	2b20      	cmp	r3, #32
 8006698:	d12e      	bne.n	80066f8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066a8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2200      	movs	r2, #0
 80066ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066b0:	7cfb      	ldrb	r3, [r7, #19]
 80066b2:	2b29      	cmp	r3, #41	; 0x29
 80066b4:	d10a      	bne.n	80066cc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2221      	movs	r2, #33	; 0x21
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2228      	movs	r2, #40	; 0x28
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066c4:	6978      	ldr	r0, [r7, #20]
 80066c6:	f7fe fc8d 	bl	8004fe4 <HAL_I2C_SlaveTxCpltCallback>
 80066ca:	e00c      	b.n	80066e6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066cc:	7cfb      	ldrb	r3, [r7, #19]
 80066ce:	2b2a      	cmp	r3, #42	; 0x2a
 80066d0:	d109      	bne.n	80066e6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2222      	movs	r2, #34	; 0x22
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2228      	movs	r2, #40	; 0x28
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	f7fe fc88 	bl	8004ff6 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80066f4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80066f6:	e06a      	b.n	80067ce <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d064      	beq.n	80067ce <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b01      	cmp	r3, #1
 800670c:	d107      	bne.n	800671e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800671c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800672c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006734:	d009      	beq.n	800674a <I2C_DMAXferCplt+0x11e>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b08      	cmp	r3, #8
 800673a:	d006      	beq.n	800674a <I2C_DMAXferCplt+0x11e>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006742:	d002      	beq.n	800674a <I2C_DMAXferCplt+0x11e>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b20      	cmp	r3, #32
 8006748:	d107      	bne.n	800675a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006758:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006768:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006778:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2200      	movs	r2, #0
 800677e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006788:	6978      	ldr	r0, [r7, #20]
 800678a:	f7fe fc5c 	bl	8005046 <HAL_I2C_ErrorCallback>
}
 800678e:	e01e      	b.n	80067ce <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b40      	cmp	r3, #64	; 0x40
 80067a2:	d10a      	bne.n	80067ba <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2200      	movs	r2, #0
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80067b2:	6978      	ldr	r0, [r7, #20]
 80067b4:	f7fb feaa 	bl	800250c <HAL_I2C_MemRxCpltCallback>
}
 80067b8:	e009      	b.n	80067ce <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2212      	movs	r2, #18
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80067c8:	6978      	ldr	r0, [r7, #20]
 80067ca:	f7fe fc02 	bl	8004fd2 <HAL_I2C_MasterRxCpltCallback>
}
 80067ce:	bf00      	nop
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f0:	2200      	movs	r2, #0
 80067f2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	2200      	movs	r2, #0
 8006802:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006812:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	f043 0210 	orr.w	r2, r3, #16
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7fe fc05 	bl	8005046 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800685e:	4b4b      	ldr	r3, [pc, #300]	; (800698c <I2C_DMAAbort+0x148>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	08db      	lsrs	r3, r3, #3
 8006864:	4a4a      	ldr	r2, [pc, #296]	; (8006990 <I2C_DMAAbort+0x14c>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	0a1a      	lsrs	r2, r3, #8
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	00da      	lsls	r2, r3, #3
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800688a:	e00a      	b.n	80068a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3b01      	subs	r3, #1
 8006890:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800689c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a0:	d0ea      	beq.n	8006878 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ae:	2200      	movs	r2, #0
 80068b0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	2200      	movs	r2, #0
 80068c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2200      	movs	r2, #0
 80068d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e4:	2200      	movs	r2, #0
 80068e6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	2200      	movs	r2, #0
 80068f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b60      	cmp	r3, #96	; 0x60
 8006912:	d10e      	bne.n	8006932 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2200      	movs	r2, #0
 8006928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800692a:	6978      	ldr	r0, [r7, #20]
 800692c:	f7fe fb94 	bl	8005058 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006930:	e027      	b.n	8006982 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006932:	7cfb      	ldrb	r3, [r7, #19]
 8006934:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006938:	2b28      	cmp	r3, #40	; 0x28
 800693a:	d117      	bne.n	800696c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f042 0201 	orr.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800695a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2228      	movs	r2, #40	; 0x28
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800696a:	e007      	b.n	800697c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800697c:	6978      	ldr	r0, [r7, #20]
 800697e:	f7fe fb62 	bl	8005046 <HAL_I2C_ErrorCallback>
}
 8006982:	bf00      	nop
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000028 	.word	0x20000028
 8006990:	14f8b589 	.word	0x14f8b589

08006994 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	4613      	mov	r3, r2
 80069a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069a4:	e025      	b.n	80069f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d021      	beq.n	80069f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ae:	f7fc fabb 	bl	8002f28 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d302      	bcc.n	80069c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d116      	bne.n	80069f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	f043 0220 	orr.w	r2, r3, #32
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e023      	b.n	8006a3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d10d      	bne.n	8006a18 <I2C_WaitOnFlagUntilTimeout+0x84>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	43da      	mvns	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4013      	ands	r3, r2
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bf0c      	ite	eq
 8006a0e:	2301      	moveq	r3, #1
 8006a10:	2300      	movne	r3, #0
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	461a      	mov	r2, r3
 8006a16:	e00c      	b.n	8006a32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	43da      	mvns	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4013      	ands	r3, r2
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf0c      	ite	eq
 8006a2a:	2301      	moveq	r3, #1
 8006a2c:	2300      	movne	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	79fb      	ldrb	r3, [r7, #7]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d0b6      	beq.n	80069a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]
 8006a4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a50:	e051      	b.n	8006af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a60:	d123      	bne.n	8006aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f043 0204 	orr.w	r2, r3, #4
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e046      	b.n	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab0:	d021      	beq.n	8006af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ab2:	f7fc fa39 	bl	8002f28 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d302      	bcc.n	8006ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d116      	bne.n	8006af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f043 0220 	orr.w	r2, r3, #32
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e020      	b.n	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10c      	bne.n	8006b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	43da      	mvns	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	e00b      	b.n	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	43da      	mvns	r2, r3
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	4013      	ands	r3, r2
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	bf14      	ite	ne
 8006b2c:	2301      	movne	r3, #1
 8006b2e:	2300      	moveq	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d18d      	bne.n	8006a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b4c:	e02d      	b.n	8006baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f8aa 	bl	8006ca8 <I2C_IsAcknowledgeFailed>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e02d      	b.n	8006bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b64:	d021      	beq.n	8006baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b66:	f7fc f9df 	bl	8002f28 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d302      	bcc.n	8006b7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d116      	bne.n	8006baa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e007      	b.n	8006bba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb4:	2b80      	cmp	r3, #128	; 0x80
 8006bb6:	d1ca      	bne.n	8006b4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bce:	e02d      	b.n	8006c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f869 	bl	8006ca8 <I2C_IsAcknowledgeFailed>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e02d      	b.n	8006c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d021      	beq.n	8006c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be8:	f7fc f99e 	bl	8002f28 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d302      	bcc.n	8006bfe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d116      	bne.n	8006c2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	f043 0220 	orr.w	r2, r3, #32
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e007      	b.n	8006c3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	f003 0304 	and.w	r3, r3, #4
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d1ca      	bne.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c50:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	08db      	lsrs	r3, r3, #3
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006c58:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5c:	0a1a      	lsrs	r2, r3, #8
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d107      	bne.n	8006c82 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f043 0220 	orr.w	r2, r3, #32
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e008      	b.n	8006c94 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c90:	d0e9      	beq.n	8006c66 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bc80      	pop	{r7}
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20000028 	.word	0x20000028
 8006ca4:	14f8b589 	.word	0x14f8b589

08006ca8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cbe:	d11b      	bne.n	8006cf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	f043 0204 	orr.w	r2, r3, #4
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr

08006d04 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006d14:	d103      	bne.n	8006d1e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d1c:	e007      	b.n	8006d2e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006d26:	d102      	bne.n	8006d2e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2208      	movs	r2, #8
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e272      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8087 	beq.w	8006e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d58:	4b92      	ldr	r3, [pc, #584]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f003 030c 	and.w	r3, r3, #12
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d00c      	beq.n	8006d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d64:	4b8f      	ldr	r3, [pc, #572]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 030c 	and.w	r3, r3, #12
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d112      	bne.n	8006d96 <HAL_RCC_OscConfig+0x5e>
 8006d70:	4b8c      	ldr	r3, [pc, #560]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d10b      	bne.n	8006d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d7e:	4b89      	ldr	r3, [pc, #548]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d06c      	beq.n	8006e64 <HAL_RCC_OscConfig+0x12c>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d168      	bne.n	8006e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e24c      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9e:	d106      	bne.n	8006dae <HAL_RCC_OscConfig+0x76>
 8006da0:	4b80      	ldr	r3, [pc, #512]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a7f      	ldr	r2, [pc, #508]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e02e      	b.n	8006e0c <HAL_RCC_OscConfig+0xd4>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x98>
 8006db6:	4b7b      	ldr	r3, [pc, #492]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a7a      	ldr	r2, [pc, #488]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	4b78      	ldr	r3, [pc, #480]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a77      	ldr	r2, [pc, #476]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e01d      	b.n	8006e0c <HAL_RCC_OscConfig+0xd4>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCC_OscConfig+0xbc>
 8006dda:	4b72      	ldr	r3, [pc, #456]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a71      	ldr	r2, [pc, #452]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	4b6f      	ldr	r3, [pc, #444]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a6e      	ldr	r2, [pc, #440]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e00b      	b.n	8006e0c <HAL_RCC_OscConfig+0xd4>
 8006df4:	4b6b      	ldr	r3, [pc, #428]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a6a      	ldr	r2, [pc, #424]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	4b68      	ldr	r3, [pc, #416]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a67      	ldr	r2, [pc, #412]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d013      	beq.n	8006e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e14:	f7fc f888 	bl	8002f28 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e1c:	f7fc f884 	bl	8002f28 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b64      	cmp	r3, #100	; 0x64
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e200      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e2e:	4b5d      	ldr	r3, [pc, #372]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f0      	beq.n	8006e1c <HAL_RCC_OscConfig+0xe4>
 8006e3a:	e014      	b.n	8006e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3c:	f7fc f874 	bl	8002f28 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e44:	f7fc f870 	bl	8002f28 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b64      	cmp	r3, #100	; 0x64
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e1ec      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e56:	4b53      	ldr	r3, [pc, #332]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x10c>
 8006e62:	e000      	b.n	8006e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d063      	beq.n	8006f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e72:	4b4c      	ldr	r3, [pc, #304]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f003 030c 	and.w	r3, r3, #12
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006e7e:	4b49      	ldr	r3, [pc, #292]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d11c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x18c>
 8006e8a:	4b46      	ldr	r3, [pc, #280]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d116      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e96:	4b43      	ldr	r3, [pc, #268]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_RCC_OscConfig+0x176>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d001      	beq.n	8006eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e1c0      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eae:	4b3d      	ldr	r3, [pc, #244]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4939      	ldr	r1, [pc, #228]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ec2:	e03a      	b.n	8006f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d020      	beq.n	8006f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ecc:	4b36      	ldr	r3, [pc, #216]	; (8006fa8 <HAL_RCC_OscConfig+0x270>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed2:	f7fc f829 	bl	8002f28 <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed8:	e008      	b.n	8006eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eda:	f7fc f825 	bl	8002f28 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e1a1      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eec:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0f0      	beq.n	8006eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef8:	4b2a      	ldr	r3, [pc, #168]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	4927      	ldr	r1, [pc, #156]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	600b      	str	r3, [r1, #0]
 8006f0c:	e015      	b.n	8006f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f0e:	4b26      	ldr	r3, [pc, #152]	; (8006fa8 <HAL_RCC_OscConfig+0x270>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f14:	f7fc f808 	bl	8002f28 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f1c:	f7fc f804 	bl	8002f28 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e180      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f2e:	4b1d      	ldr	r3, [pc, #116]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d03a      	beq.n	8006fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d019      	beq.n	8006f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f4e:	4b17      	ldr	r3, [pc, #92]	; (8006fac <HAL_RCC_OscConfig+0x274>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f54:	f7fb ffe8 	bl	8002f28 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f5c:	f7fb ffe4 	bl	8002f28 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e160      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <HAL_RCC_OscConfig+0x26c>)
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006f7a:	2001      	movs	r0, #1
 8006f7c:	f000 fad8 	bl	8007530 <RCC_Delay>
 8006f80:	e01c      	b.n	8006fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f82:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <HAL_RCC_OscConfig+0x274>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f88:	f7fb ffce 	bl	8002f28 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f8e:	e00f      	b.n	8006fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f90:	f7fb ffca 	bl	8002f28 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d908      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e146      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
 8006fa2:	bf00      	nop
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	42420000 	.word	0x42420000
 8006fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fb0:	4b92      	ldr	r3, [pc, #584]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e9      	bne.n	8006f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80a6 	beq.w	8007116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fce:	4b8b      	ldr	r3, [pc, #556]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fda:	4b88      	ldr	r3, [pc, #544]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	4a87      	ldr	r2, [pc, #540]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	61d3      	str	r3, [r2, #28]
 8006fe6:	4b85      	ldr	r3, [pc, #532]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff6:	4b82      	ldr	r3, [pc, #520]	; (8007200 <HAL_RCC_OscConfig+0x4c8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d118      	bne.n	8007034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007002:	4b7f      	ldr	r3, [pc, #508]	; (8007200 <HAL_RCC_OscConfig+0x4c8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a7e      	ldr	r2, [pc, #504]	; (8007200 <HAL_RCC_OscConfig+0x4c8>)
 8007008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800700c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800700e:	f7fb ff8b 	bl	8002f28 <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007014:	e008      	b.n	8007028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007016:	f7fb ff87 	bl	8002f28 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b64      	cmp	r3, #100	; 0x64
 8007022:	d901      	bls.n	8007028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e103      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007028:	4b75      	ldr	r3, [pc, #468]	; (8007200 <HAL_RCC_OscConfig+0x4c8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0f0      	beq.n	8007016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d106      	bne.n	800704a <HAL_RCC_OscConfig+0x312>
 800703c:	4b6f      	ldr	r3, [pc, #444]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	4a6e      	ldr	r2, [pc, #440]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	6213      	str	r3, [r2, #32]
 8007048:	e02d      	b.n	80070a6 <HAL_RCC_OscConfig+0x36e>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10c      	bne.n	800706c <HAL_RCC_OscConfig+0x334>
 8007052:	4b6a      	ldr	r3, [pc, #424]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	4a69      	ldr	r2, [pc, #420]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	6213      	str	r3, [r2, #32]
 800705e:	4b67      	ldr	r3, [pc, #412]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	4a66      	ldr	r2, [pc, #408]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007064:	f023 0304 	bic.w	r3, r3, #4
 8007068:	6213      	str	r3, [r2, #32]
 800706a:	e01c      	b.n	80070a6 <HAL_RCC_OscConfig+0x36e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	2b05      	cmp	r3, #5
 8007072:	d10c      	bne.n	800708e <HAL_RCC_OscConfig+0x356>
 8007074:	4b61      	ldr	r3, [pc, #388]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	4a60      	ldr	r2, [pc, #384]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800707a:	f043 0304 	orr.w	r3, r3, #4
 800707e:	6213      	str	r3, [r2, #32]
 8007080:	4b5e      	ldr	r3, [pc, #376]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	4a5d      	ldr	r2, [pc, #372]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	6213      	str	r3, [r2, #32]
 800708c:	e00b      	b.n	80070a6 <HAL_RCC_OscConfig+0x36e>
 800708e:	4b5b      	ldr	r3, [pc, #364]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	4a5a      	ldr	r2, [pc, #360]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	6213      	str	r3, [r2, #32]
 800709a:	4b58      	ldr	r3, [pc, #352]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	4a57      	ldr	r2, [pc, #348]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80070a0:	f023 0304 	bic.w	r3, r3, #4
 80070a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d015      	beq.n	80070da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070ae:	f7fb ff3b 	bl	8002f28 <HAL_GetTick>
 80070b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b4:	e00a      	b.n	80070cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070b6:	f7fb ff37 	bl	8002f28 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e0b1      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070cc:	4b4b      	ldr	r3, [pc, #300]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0ee      	beq.n	80070b6 <HAL_RCC_OscConfig+0x37e>
 80070d8:	e014      	b.n	8007104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070da:	f7fb ff25 	bl	8002f28 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e0:	e00a      	b.n	80070f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e2:	f7fb ff21 	bl	8002f28 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e09b      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070f8:	4b40      	ldr	r3, [pc, #256]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1ee      	bne.n	80070e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d105      	bne.n	8007116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800710a:	4b3c      	ldr	r3, [pc, #240]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	4a3b      	ldr	r2, [pc, #236]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 8087 	beq.w	800722e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007120:	4b36      	ldr	r3, [pc, #216]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f003 030c 	and.w	r3, r3, #12
 8007128:	2b08      	cmp	r3, #8
 800712a:	d061      	beq.n	80071f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d146      	bne.n	80071c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007134:	4b33      	ldr	r3, [pc, #204]	; (8007204 <HAL_RCC_OscConfig+0x4cc>)
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800713a:	f7fb fef5 	bl	8002f28 <HAL_GetTick>
 800713e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007142:	f7fb fef1 	bl	8002f28 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e06d      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007154:	4b29      	ldr	r3, [pc, #164]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007168:	d108      	bne.n	800717c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	4921      	ldr	r1, [pc, #132]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007178:	4313      	orrs	r3, r2
 800717a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800717c:	4b1f      	ldr	r3, [pc, #124]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a19      	ldr	r1, [r3, #32]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	430b      	orrs	r3, r1
 800718e:	491b      	ldr	r1, [pc, #108]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 8007190:	4313      	orrs	r3, r2
 8007192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007194:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <HAL_RCC_OscConfig+0x4cc>)
 8007196:	2201      	movs	r2, #1
 8007198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719a:	f7fb fec5 	bl	8002f28 <HAL_GetTick>
 800719e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071a0:	e008      	b.n	80071b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a2:	f7fb fec1 	bl	8002f28 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e03d      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071b4:	4b11      	ldr	r3, [pc, #68]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0f0      	beq.n	80071a2 <HAL_RCC_OscConfig+0x46a>
 80071c0:	e035      	b.n	800722e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c2:	4b10      	ldr	r3, [pc, #64]	; (8007204 <HAL_RCC_OscConfig+0x4cc>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c8:	f7fb feae 	bl	8002f28 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d0:	f7fb feaa 	bl	8002f28 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e026      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071e2:	4b06      	ldr	r3, [pc, #24]	; (80071fc <HAL_RCC_OscConfig+0x4c4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0x498>
 80071ee:	e01e      	b.n	800722e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d107      	bne.n	8007208 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e019      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
 80071fc:	40021000 	.word	0x40021000
 8007200:	40007000 	.word	0x40007000
 8007204:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007208:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <HAL_RCC_OscConfig+0x500>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	429a      	cmp	r2, r3
 800721a:	d106      	bne.n	800722a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007226:	429a      	cmp	r2, r3
 8007228:	d001      	beq.n	800722e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e000      	b.n	8007230 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40021000 	.word	0x40021000

0800723c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e0d0      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007250:	4b6a      	ldr	r3, [pc, #424]	; (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d910      	bls.n	8007280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800725e:	4b67      	ldr	r3, [pc, #412]	; (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f023 0207 	bic.w	r2, r3, #7
 8007266:	4965      	ldr	r1, [pc, #404]	; (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	4313      	orrs	r3, r2
 800726c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800726e:	4b63      	ldr	r3, [pc, #396]	; (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d001      	beq.n	8007280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0b8      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d020      	beq.n	80072ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007298:	4b59      	ldr	r3, [pc, #356]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	4a58      	ldr	r2, [pc, #352]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800729e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80072a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072b0:	4b53      	ldr	r3, [pc, #332]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4a52      	ldr	r2, [pc, #328]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80072ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072bc:	4b50      	ldr	r3, [pc, #320]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	494d      	ldr	r1, [pc, #308]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d040      	beq.n	800735c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d107      	bne.n	80072f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072e2:	4b47      	ldr	r3, [pc, #284]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d115      	bne.n	800731a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e07f      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d107      	bne.n	800730a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072fa:	4b41      	ldr	r3, [pc, #260]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e073      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800730a:	4b3d      	ldr	r3, [pc, #244]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e06b      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800731a:	4b39      	ldr	r3, [pc, #228]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f023 0203 	bic.w	r2, r3, #3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	4936      	ldr	r1, [pc, #216]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 8007328:	4313      	orrs	r3, r2
 800732a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800732c:	f7fb fdfc 	bl	8002f28 <HAL_GetTick>
 8007330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007332:	e00a      	b.n	800734a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007334:	f7fb fdf8 	bl	8002f28 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e053      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800734a:	4b2d      	ldr	r3, [pc, #180]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f003 020c 	and.w	r2, r3, #12
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	429a      	cmp	r2, r3
 800735a:	d1eb      	bne.n	8007334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800735c:	4b27      	ldr	r3, [pc, #156]	; (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d210      	bcs.n	800738c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736a:	4b24      	ldr	r3, [pc, #144]	; (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f023 0207 	bic.w	r2, r3, #7
 8007372:	4922      	ldr	r1, [pc, #136]	; (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	4313      	orrs	r3, r2
 8007378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800737a:	4b20      	ldr	r3, [pc, #128]	; (80073fc <HAL_RCC_ClockConfig+0x1c0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d001      	beq.n	800738c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e032      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	d008      	beq.n	80073aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007398:	4b19      	ldr	r3, [pc, #100]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	4916      	ldr	r1, [pc, #88]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073b6:	4b12      	ldr	r3, [pc, #72]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	490e      	ldr	r1, [pc, #56]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073ca:	f000 f821 	bl	8007410 <HAL_RCC_GetSysClockFreq>
 80073ce:	4602      	mov	r2, r0
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <HAL_RCC_ClockConfig+0x1c4>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	091b      	lsrs	r3, r3, #4
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	490a      	ldr	r1, [pc, #40]	; (8007404 <HAL_RCC_ClockConfig+0x1c8>)
 80073dc:	5ccb      	ldrb	r3, [r1, r3]
 80073de:	fa22 f303 	lsr.w	r3, r2, r3
 80073e2:	4a09      	ldr	r2, [pc, #36]	; (8007408 <HAL_RCC_ClockConfig+0x1cc>)
 80073e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80073e6:	4b09      	ldr	r3, [pc, #36]	; (800740c <HAL_RCC_ClockConfig+0x1d0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fb fd5a 	bl	8002ea4 <HAL_InitTick>

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40022000 	.word	0x40022000
 8007400:	40021000 	.word	0x40021000
 8007404:	0800c5ac 	.word	0x0800c5ac
 8007408:	20000028 	.word	0x20000028
 800740c:	2000002c 	.word	0x2000002c

08007410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007410:	b490      	push	{r4, r7}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007416:	4b29      	ldr	r3, [pc, #164]	; (80074bc <HAL_RCC_GetSysClockFreq+0xac>)
 8007418:	1d3c      	adds	r4, r7, #4
 800741a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800741c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007420:	f240 2301 	movw	r3, #513	; 0x201
 8007424:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	61fb      	str	r3, [r7, #28]
 800742a:	2300      	movs	r3, #0
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	2300      	movs	r3, #0
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800743a:	4b21      	ldr	r3, [pc, #132]	; (80074c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	f003 030c 	and.w	r3, r3, #12
 8007446:	2b04      	cmp	r3, #4
 8007448:	d002      	beq.n	8007450 <HAL_RCC_GetSysClockFreq+0x40>
 800744a:	2b08      	cmp	r3, #8
 800744c:	d003      	beq.n	8007456 <HAL_RCC_GetSysClockFreq+0x46>
 800744e:	e02b      	b.n	80074a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007450:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007452:	623b      	str	r3, [r7, #32]
      break;
 8007454:	e02b      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	0c9b      	lsrs	r3, r3, #18
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	3328      	adds	r3, #40	; 0x28
 8007460:	443b      	add	r3, r7
 8007462:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007466:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d012      	beq.n	8007498 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007472:	4b13      	ldr	r3, [pc, #76]	; (80074c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	0c5b      	lsrs	r3, r3, #17
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	3328      	adds	r3, #40	; 0x28
 800747e:	443b      	add	r3, r7
 8007480:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007484:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	4a0e      	ldr	r2, [pc, #56]	; (80074c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800748a:	fb03 f202 	mul.w	r2, r3, r2
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	fbb2 f3f3 	udiv	r3, r2, r3
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
 8007496:	e004      	b.n	80074a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	4a0b      	ldr	r2, [pc, #44]	; (80074c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	623b      	str	r3, [r7, #32]
      break;
 80074a6:	e002      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80074aa:	623b      	str	r3, [r7, #32]
      break;
 80074ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074ae:	6a3b      	ldr	r3, [r7, #32]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3728      	adds	r7, #40	; 0x28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc90      	pop	{r4, r7}
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	0800c58c 	.word	0x0800c58c
 80074c0:	40021000 	.word	0x40021000
 80074c4:	007a1200 	.word	0x007a1200
 80074c8:	003d0900 	.word	0x003d0900

080074cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074d0:	4b02      	ldr	r3, [pc, #8]	; (80074dc <HAL_RCC_GetHCLKFreq+0x10>)
 80074d2:	681b      	ldr	r3, [r3, #0]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bc80      	pop	{r7}
 80074da:	4770      	bx	lr
 80074dc:	20000028 	.word	0x20000028

080074e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074e4:	f7ff fff2 	bl	80074cc <HAL_RCC_GetHCLKFreq>
 80074e8:	4602      	mov	r2, r0
 80074ea:	4b05      	ldr	r3, [pc, #20]	; (8007500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	4903      	ldr	r1, [pc, #12]	; (8007504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074f6:	5ccb      	ldrb	r3, [r1, r3]
 80074f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	40021000 	.word	0x40021000
 8007504:	0800c5bc 	.word	0x0800c5bc

08007508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800750c:	f7ff ffde 	bl	80074cc <HAL_RCC_GetHCLKFreq>
 8007510:	4602      	mov	r2, r0
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	0adb      	lsrs	r3, r3, #11
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	4903      	ldr	r1, [pc, #12]	; (800752c <HAL_RCC_GetPCLK2Freq+0x24>)
 800751e:	5ccb      	ldrb	r3, [r1, r3]
 8007520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007524:	4618      	mov	r0, r3
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40021000 	.word	0x40021000
 800752c:	0800c5bc 	.word	0x0800c5bc

08007530 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <RCC_Delay+0x34>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <RCC_Delay+0x38>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	0a5b      	lsrs	r3, r3, #9
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	fb02 f303 	mul.w	r3, r2, r3
 800754a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800754c:	bf00      	nop
  }
  while (Delay --);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1e5a      	subs	r2, r3, #1
 8007552:	60fa      	str	r2, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f9      	bne.n	800754c <RCC_Delay+0x1c>
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr
 8007564:	20000028 	.word	0x20000028
 8007568:	10624dd3 	.word	0x10624dd3

0800756c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d07d      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007588:	2300      	movs	r3, #0
 800758a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800758c:	4b4f      	ldr	r3, [pc, #316]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10d      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007598:	4b4c      	ldr	r3, [pc, #304]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	4a4b      	ldr	r2, [pc, #300]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800759e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a2:	61d3      	str	r3, [r2, #28]
 80075a4:	4b49      	ldr	r3, [pc, #292]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ac:	60bb      	str	r3, [r7, #8]
 80075ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075b0:	2301      	movs	r3, #1
 80075b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b4:	4b46      	ldr	r3, [pc, #280]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d118      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075c0:	4b43      	ldr	r3, [pc, #268]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a42      	ldr	r2, [pc, #264]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075cc:	f7fb fcac 	bl	8002f28 <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075d2:	e008      	b.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d4:	f7fb fca8 	bl	8002f28 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b64      	cmp	r3, #100	; 0x64
 80075e0:	d901      	bls.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e06d      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075e6:	4b3a      	ldr	r3, [pc, #232]	; (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0f0      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075f2:	4b36      	ldr	r3, [pc, #216]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d02e      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	429a      	cmp	r2, r3
 800760e:	d027      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007610:	4b2e      	ldr	r3, [pc, #184]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007618:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800761a:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800761c:	2201      	movs	r2, #1
 800761e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007620:	4b2c      	ldr	r3, [pc, #176]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007626:	4a29      	ldr	r2, [pc, #164]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d014      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007636:	f7fb fc77 	bl	8002f28 <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800763c:	e00a      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800763e:	f7fb fc73 	bl	8002f28 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	f241 3288 	movw	r2, #5000	; 0x1388
 800764c:	4293      	cmp	r3, r2
 800764e:	d901      	bls.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e036      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007654:	4b1d      	ldr	r3, [pc, #116]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007656:	6a1b      	ldr	r3, [r3, #32]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0ee      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007660:	4b1a      	ldr	r3, [pc, #104]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	4917      	ldr	r1, [pc, #92]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800766e:	4313      	orrs	r3, r2
 8007670:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d105      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007678:	4b14      	ldr	r3, [pc, #80]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	4a13      	ldr	r2, [pc, #76]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007682:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d008      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007690:	4b0e      	ldr	r3, [pc, #56]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	490b      	ldr	r1, [pc, #44]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0310 	and.w	r3, r3, #16
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076ae:	4b07      	ldr	r3, [pc, #28]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	4904      	ldr	r1, [pc, #16]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40021000 	.word	0x40021000
 80076d0:	40007000 	.word	0x40007000
 80076d4:	42420440 	.word	0x42420440

080076d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80076d8:	b590      	push	{r4, r7, lr}
 80076da:	b08d      	sub	sp, #52	; 0x34
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80076e0:	4b58      	ldr	r3, [pc, #352]	; (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80076e2:	f107 040c 	add.w	r4, r7, #12
 80076e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80076ec:	f240 2301 	movw	r3, #513	; 0x201
 80076f0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
 80076f6:	2300      	movs	r3, #0
 80076f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076fa:	2300      	movs	r3, #0
 80076fc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	2300      	movs	r3, #0
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2b10      	cmp	r3, #16
 800770a:	d00a      	beq.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b10      	cmp	r3, #16
 8007710:	f200 808e 	bhi.w	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d049      	beq.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d079      	beq.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007720:	e086      	b.n	8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8007722:	4b49      	ldr	r3, [pc, #292]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007728:	4b47      	ldr	r3, [pc, #284]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d07f      	beq.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	0c9b      	lsrs	r3, r3, #18
 8007738:	f003 030f 	and.w	r3, r3, #15
 800773c:	3330      	adds	r3, #48	; 0x30
 800773e:	443b      	add	r3, r7
 8007740:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007744:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d017      	beq.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007750:	4b3d      	ldr	r3, [pc, #244]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	0c5b      	lsrs	r3, r3, #17
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	3330      	adds	r3, #48	; 0x30
 800775c:	443b      	add	r3, r7
 800775e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00d      	beq.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800776e:	4a37      	ldr	r2, [pc, #220]	; (800784c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	fbb2 f2f3 	udiv	r2, r2, r3
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	fb02 f303 	mul.w	r3, r2, r3
 800777c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800777e:	e004      	b.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	4a33      	ldr	r2, [pc, #204]	; (8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007784:	fb02 f303 	mul.w	r3, r2, r3
 8007788:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800778a:	4b2f      	ldr	r3, [pc, #188]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007796:	d102      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800779c:	e04a      	b.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	4a2c      	ldr	r2, [pc, #176]	; (8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80077a4:	fba2 2303 	umull	r2, r3, r2, r3
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80077ac:	e042      	b.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80077ae:	4b26      	ldr	r3, [pc, #152]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077be:	d108      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80077ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d0:	e01f      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077dc:	d109      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80077de:	4b1a      	ldr	r3, [pc, #104]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80077ea:	f649 4340 	movw	r3, #40000	; 0x9c40
 80077ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80077f0:	e00f      	b.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077fc:	d11c      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d016      	beq.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800780a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800780e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007810:	e012      	b.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007812:	e011      	b.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007814:	f7ff fe78 	bl	8007508 <HAL_RCC_GetPCLK2Freq>
 8007818:	4602      	mov	r2, r0
 800781a:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	0b9b      	lsrs	r3, r3, #14
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	3301      	adds	r3, #1
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	fbb2 f3f3 	udiv	r3, r2, r3
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800782e:	e004      	b.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007830:	bf00      	nop
 8007832:	e002      	b.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007834:	bf00      	nop
 8007836:	e000      	b.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007838:	bf00      	nop
    }
  }
  return (frequency);
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800783c:	4618      	mov	r0, r3
 800783e:	3734      	adds	r7, #52	; 0x34
 8007840:	46bd      	mov	sp, r7
 8007842:	bd90      	pop	{r4, r7, pc}
 8007844:	0800c59c 	.word	0x0800c59c
 8007848:	40021000 	.word	0x40021000
 800784c:	007a1200 	.word	0x007a1200
 8007850:	003d0900 	.word	0x003d0900
 8007854:	aaaaaaab 	.word	0xaaaaaaab

08007858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e041      	b.n	80078ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d106      	bne.n	8007884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fb f890 	bl	80029a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f000 fefe 	bl	8008698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	d001      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e03a      	b.n	8007986 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a18      	ldr	r2, [pc, #96]	; (8007990 <HAL_TIM_Base_Start_IT+0x98>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00e      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x58>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793a:	d009      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x58>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a14      	ldr	r2, [pc, #80]	; (8007994 <HAL_TIM_Base_Start_IT+0x9c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d004      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x58>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a13      	ldr	r2, [pc, #76]	; (8007998 <HAL_TIM_Base_Start_IT+0xa0>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d111      	bne.n	8007974 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d010      	beq.n	8007984 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0201 	orr.w	r2, r2, #1
 8007970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007972:	e007      	b.n	8007984 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	bc80      	pop	{r7}
 800798e:	4770      	bx	lr
 8007990:	40012c00 	.word	0x40012c00
 8007994:	40000400 	.word	0x40000400
 8007998:	40000800 	.word	0x40000800

0800799c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e041      	b.n	8007a32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fa ffb8 	bl	8002938 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4619      	mov	r1, r3
 80079da:	4610      	mov	r0, r2
 80079dc:	f000 fe5c 	bl	8008698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d109      	bne.n	8007a60 <HAL_TIM_PWM_Start+0x24>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	bf14      	ite	ne
 8007a58:	2301      	movne	r3, #1
 8007a5a:	2300      	moveq	r3, #0
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	e022      	b.n	8007aa6 <HAL_TIM_PWM_Start+0x6a>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d109      	bne.n	8007a7a <HAL_TIM_PWM_Start+0x3e>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	e015      	b.n	8007aa6 <HAL_TIM_PWM_Start+0x6a>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d109      	bne.n	8007a94 <HAL_TIM_PWM_Start+0x58>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	bf14      	ite	ne
 8007a8c:	2301      	movne	r3, #1
 8007a8e:	2300      	moveq	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	e008      	b.n	8007aa6 <HAL_TIM_PWM_Start+0x6a>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	bf14      	ite	ne
 8007aa0:	2301      	movne	r3, #1
 8007aa2:	2300      	moveq	r3, #0
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e05e      	b.n	8007b6c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d104      	bne.n	8007abe <HAL_TIM_PWM_Start+0x82>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007abc:	e013      	b.n	8007ae6 <HAL_TIM_PWM_Start+0xaa>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_PWM_Start+0x92>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007acc:	e00b      	b.n	8007ae6 <HAL_TIM_PWM_Start+0xaa>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_PWM_Start+0xa2>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007adc:	e003      	b.n	8007ae6 <HAL_TIM_PWM_Start+0xaa>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2201      	movs	r2, #1
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 f9d3 	bl	8008e9a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a1e      	ldr	r2, [pc, #120]	; (8007b74 <HAL_TIM_PWM_Start+0x138>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d107      	bne.n	8007b0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a18      	ldr	r2, [pc, #96]	; (8007b74 <HAL_TIM_PWM_Start+0x138>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d00e      	beq.n	8007b36 <HAL_TIM_PWM_Start+0xfa>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b20:	d009      	beq.n	8007b36 <HAL_TIM_PWM_Start+0xfa>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <HAL_TIM_PWM_Start+0x13c>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d004      	beq.n	8007b36 <HAL_TIM_PWM_Start+0xfa>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a12      	ldr	r2, [pc, #72]	; (8007b7c <HAL_TIM_PWM_Start+0x140>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d111      	bne.n	8007b5a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b06      	cmp	r3, #6
 8007b46:	d010      	beq.n	8007b6a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0201 	orr.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b58:	e007      	b.n	8007b6a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 0201 	orr.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	40012c00 	.word	0x40012c00
 8007b78:	40000400 	.word	0x40000400
 8007b7c:	40000800 	.word	0x40000800

08007b80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e041      	b.n	8007c16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f839 	bl	8007c1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 fd6a 	bl	8008698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bc80      	pop	{r7}
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d104      	bne.n	8007c4e <HAL_TIM_IC_Start_DMA+0x1e>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	e013      	b.n	8007c76 <HAL_TIM_IC_Start_DMA+0x46>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b04      	cmp	r3, #4
 8007c52:	d104      	bne.n	8007c5e <HAL_TIM_IC_Start_DMA+0x2e>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	e00b      	b.n	8007c76 <HAL_TIM_IC_Start_DMA+0x46>
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d104      	bne.n	8007c6e <HAL_TIM_IC_Start_DMA+0x3e>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	e003      	b.n	8007c76 <HAL_TIM_IC_Start_DMA+0x46>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <HAL_TIM_IC_Start_DMA+0x58>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	e013      	b.n	8007cb0 <HAL_TIM_IC_Start_DMA+0x80>
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d104      	bne.n	8007c98 <HAL_TIM_IC_Start_DMA+0x68>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	e00b      	b.n	8007cb0 <HAL_TIM_IC_Start_DMA+0x80>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d104      	bne.n	8007ca8 <HAL_TIM_IC_Start_DMA+0x78>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	e003      	b.n	8007cb0 <HAL_TIM_IC_Start_DMA+0x80>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d002      	beq.n	8007cbe <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007cb8:	7dbb      	ldrb	r3, [r7, #22]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d101      	bne.n	8007cc2 <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	e130      	b.n	8007f24 <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d143      	bne.n	8007d50 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007cc8:	7dbb      	ldrb	r3, [r7, #22]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d140      	bne.n	8007d50 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <HAL_TIM_IC_Start_DMA+0xae>
 8007cd4:	887b      	ldrh	r3, [r7, #2]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e122      	b.n	8007f24 <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_IC_Start_DMA+0xbe>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cec:	e013      	b.n	8007d16 <HAL_TIM_IC_Start_DMA+0xe6>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d104      	bne.n	8007cfe <HAL_TIM_IC_Start_DMA+0xce>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cfc:	e00b      	b.n	8007d16 <HAL_TIM_IC_Start_DMA+0xe6>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d104      	bne.n	8007d0e <HAL_TIM_IC_Start_DMA+0xde>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d0c:	e003      	b.n	8007d16 <HAL_TIM_IC_Start_DMA+0xe6>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_IC_Start_DMA+0xf6>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8007d24:	e016      	b.n	8007d54 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_IC_Start_DMA+0x106>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8007d34:	e00e      	b.n	8007d54 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_IC_Start_DMA+0x116>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8007d44:	e006      	b.n	8007d54 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8007d4e:	e001      	b.n	8007d54 <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e0e7      	b.n	8007f24 <HAL_TIM_IC_Start_DMA+0x2f4>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f001 f89c 	bl	8008e9a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a71      	ldr	r2, [pc, #452]	; (8007f2c <HAL_TIM_IC_Start_DMA+0x2fc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00e      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x15a>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d74:	d009      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x15a>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a6d      	ldr	r2, [pc, #436]	; (8007f30 <HAL_TIM_IC_Start_DMA+0x300>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <HAL_TIM_IC_Start_DMA+0x15a>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a6b      	ldr	r2, [pc, #428]	; (8007f34 <HAL_TIM_IC_Start_DMA+0x304>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d111      	bne.n	8007dae <HAL_TIM_IC_Start_DMA+0x17e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b06      	cmp	r3, #6
 8007d9a:	d010      	beq.n	8007dbe <HAL_TIM_IC_Start_DMA+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0201 	orr.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dac:	e007      	b.n	8007dbe <HAL_TIM_IC_Start_DMA+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0201 	orr.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
  }

  switch (Channel)
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b0c      	cmp	r3, #12
 8007dc2:	f200 80ad 	bhi.w	8007f20 <HAL_TIM_IC_Start_DMA+0x2f0>
 8007dc6:	a201      	add	r2, pc, #4	; (adr r2, 8007dcc <HAL_TIM_IC_Start_DMA+0x19c>)
 8007dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dcc:	08007e01 	.word	0x08007e01
 8007dd0:	08007f21 	.word	0x08007f21
 8007dd4:	08007f21 	.word	0x08007f21
 8007dd8:	08007f21 	.word	0x08007f21
 8007ddc:	08007e49 	.word	0x08007e49
 8007de0:	08007f21 	.word	0x08007f21
 8007de4:	08007f21 	.word	0x08007f21
 8007de8:	08007f21 	.word	0x08007f21
 8007dec:	08007e91 	.word	0x08007e91
 8007df0:	08007f21 	.word	0x08007f21
 8007df4:	08007f21 	.word	0x08007f21
 8007df8:	08007f21 	.word	0x08007f21
 8007dfc:	08007ed9 	.word	0x08007ed9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	4a4c      	ldr	r2, [pc, #304]	; (8007f38 <HAL_TIM_IC_Start_DMA+0x308>)
 8007e06:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	4a4b      	ldr	r2, [pc, #300]	; (8007f3c <HAL_TIM_IC_Start_DMA+0x30c>)
 8007e0e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	4a4a      	ldr	r2, [pc, #296]	; (8007f40 <HAL_TIM_IC_Start_DMA+0x310>)
 8007e16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3334      	adds	r3, #52	; 0x34
 8007e22:	4619      	mov	r1, r3
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	887b      	ldrh	r3, [r7, #2]
 8007e28:	f7fb ff3c 	bl	8003ca4 <HAL_DMA_Start_IT>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <HAL_TIM_IC_Start_DMA+0x206>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e076      	b.n	8007f24 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68da      	ldr	r2, [r3, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e44:	60da      	str	r2, [r3, #12]
      break;
 8007e46:	e06c      	b.n	8007f22 <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4c:	4a3a      	ldr	r2, [pc, #232]	; (8007f38 <HAL_TIM_IC_Start_DMA+0x308>)
 8007e4e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	4a39      	ldr	r2, [pc, #228]	; (8007f3c <HAL_TIM_IC_Start_DMA+0x30c>)
 8007e56:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5c:	4a38      	ldr	r2, [pc, #224]	; (8007f40 <HAL_TIM_IC_Start_DMA+0x310>)
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	3338      	adds	r3, #56	; 0x38
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	887b      	ldrh	r3, [r7, #2]
 8007e70:	f7fb ff18 	bl	8003ca4 <HAL_DMA_Start_IT>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <HAL_TIM_IC_Start_DMA+0x24e>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e052      	b.n	8007f24 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e8c:	60da      	str	r2, [r3, #12]
      break;
 8007e8e:	e048      	b.n	8007f22 <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	4a28      	ldr	r2, [pc, #160]	; (8007f38 <HAL_TIM_IC_Start_DMA+0x308>)
 8007e96:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9c:	4a27      	ldr	r2, [pc, #156]	; (8007f3c <HAL_TIM_IC_Start_DMA+0x30c>)
 8007e9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea4:	4a26      	ldr	r2, [pc, #152]	; (8007f40 <HAL_TIM_IC_Start_DMA+0x310>)
 8007ea6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	333c      	adds	r3, #60	; 0x3c
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	887b      	ldrh	r3, [r7, #2]
 8007eb8:	f7fb fef4 	bl	8003ca4 <HAL_DMA_Start_IT>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <HAL_TIM_IC_Start_DMA+0x296>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e02e      	b.n	8007f24 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ed4:	60da      	str	r2, [r3, #12]
      break;
 8007ed6:	e024      	b.n	8007f22 <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007edc:	4a16      	ldr	r2, [pc, #88]	; (8007f38 <HAL_TIM_IC_Start_DMA+0x308>)
 8007ede:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee4:	4a15      	ldr	r2, [pc, #84]	; (8007f3c <HAL_TIM_IC_Start_DMA+0x30c>)
 8007ee6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eec:	4a14      	ldr	r2, [pc, #80]	; (8007f40 <HAL_TIM_IC_Start_DMA+0x310>)
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3340      	adds	r3, #64	; 0x40
 8007efa:	4619      	mov	r1, r3
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	887b      	ldrh	r3, [r7, #2]
 8007f00:	f7fb fed0 	bl	8003ca4 <HAL_DMA_Start_IT>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <HAL_TIM_IC_Start_DMA+0x2de>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e00a      	b.n	8007f24 <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f1c:	60da      	str	r2, [r3, #12]
      break;
 8007f1e:	e000      	b.n	8007f22 <HAL_TIM_IC_Start_DMA+0x2f2>
    }

    default:
      break;
 8007f20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	40012c00 	.word	0x40012c00
 8007f30:	40000400 	.word	0x40000400
 8007f34:	40000800 	.word	0x40000800
 8007f38:	08008569 	.word	0x08008569
 8007f3c:	08008631 	.word	0x08008631
 8007f40:	080084d7 	.word	0x080084d7

08007f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d122      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d11b      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0202 	mvn.w	r2, #2
 8007f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f003 0303 	and.w	r3, r3, #3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7fa fa4c 	bl	8002424 <HAL_TIM_IC_CaptureCallback>
 8007f8c:	e005      	b.n	8007f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fa74 	bl	800847c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fa83 	bl	80084a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f003 0304 	and.w	r3, r3, #4
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d122      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d11b      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f06f 0204 	mvn.w	r2, #4
 8007fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fa fa22 	bl	8002424 <HAL_TIM_IC_CaptureCallback>
 8007fe0:	e005      	b.n	8007fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa4a 	bl	800847c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fa59 	bl	80084a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b08      	cmp	r3, #8
 8008000:	d122      	bne.n	8008048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b08      	cmp	r3, #8
 800800e:	d11b      	bne.n	8008048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0208 	mvn.w	r2, #8
 8008018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2204      	movs	r2, #4
 800801e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fa f9f8 	bl	8002424 <HAL_TIM_IC_CaptureCallback>
 8008034:	e005      	b.n	8008042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa20 	bl	800847c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fa2f 	bl	80084a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0310 	and.w	r3, r3, #16
 8008052:	2b10      	cmp	r3, #16
 8008054:	d122      	bne.n	800809c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0310 	and.w	r3, r3, #16
 8008060:	2b10      	cmp	r3, #16
 8008062:	d11b      	bne.n	800809c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0210 	mvn.w	r2, #16
 800806c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2208      	movs	r2, #8
 8008072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fa f9ce 	bl	8002424 <HAL_TIM_IC_CaptureCallback>
 8008088:	e005      	b.n	8008096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f9f6 	bl	800847c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fa05 	bl	80084a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d10e      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d107      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0201 	mvn.w	r2, #1
 80080c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fa faa6 	bl	8002614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d2:	2b80      	cmp	r3, #128	; 0x80
 80080d4:	d10e      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e0:	2b80      	cmp	r3, #128	; 0x80
 80080e2:	d107      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 ffb0 	bl	8009054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	d10e      	bne.n	8008120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810c:	2b40      	cmp	r3, #64	; 0x40
 800810e:	d107      	bne.n	8008120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9c9 	bl	80084b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b20      	cmp	r3, #32
 800812c:	d10e      	bne.n	800814c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0320 	and.w	r3, r3, #32
 8008138:	2b20      	cmp	r3, #32
 800813a:	d107      	bne.n	800814c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0220 	mvn.w	r2, #32
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 ff7b 	bl	8009042 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_TIM_IC_ConfigChannel+0x1a>
 800816a:	2302      	movs	r3, #2
 800816c:	e082      	b.n	8008274 <HAL_TIM_IC_ConfigChannel+0x120>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d11b      	bne.n	80081b4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	6819      	ldr	r1, [r3, #0]
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f000 fcfc 	bl	8008b88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699a      	ldr	r2, [r3, #24]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 020c 	bic.w	r2, r2, #12
 800819e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6999      	ldr	r1, [r3, #24]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	430a      	orrs	r2, r1
 80081b0:	619a      	str	r2, [r3, #24]
 80081b2:	e05a      	b.n	800826a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d11c      	bne.n	80081f4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6819      	ldr	r1, [r3, #0]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f000 fd65 	bl	8008c98 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699a      	ldr	r2, [r3, #24]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80081dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6999      	ldr	r1, [r3, #24]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	021a      	lsls	r2, r3, #8
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	619a      	str	r2, [r3, #24]
 80081f2:	e03a      	b.n	800826a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d11b      	bne.n	8008232 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	6819      	ldr	r1, [r3, #0]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f000 fdb0 	bl	8008d6e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 020c 	bic.w	r2, r2, #12
 800821c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69d9      	ldr	r1, [r3, #28]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	61da      	str	r2, [r3, #28]
 8008230:	e01b      	b.n	800826a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6818      	ldr	r0, [r3, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6819      	ldr	r1, [r3, #0]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f000 fdcf 	bl	8008de4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69da      	ldr	r2, [r3, #28]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008254:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69d9      	ldr	r1, [r3, #28]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	021a      	lsls	r2, r3, #8
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008292:	2302      	movs	r3, #2
 8008294:	e0ac      	b.n	80083f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b0c      	cmp	r3, #12
 80082a2:	f200 809f 	bhi.w	80083e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082e1 	.word	0x080082e1
 80082b0:	080083e5 	.word	0x080083e5
 80082b4:	080083e5 	.word	0x080083e5
 80082b8:	080083e5 	.word	0x080083e5
 80082bc:	08008321 	.word	0x08008321
 80082c0:	080083e5 	.word	0x080083e5
 80082c4:	080083e5 	.word	0x080083e5
 80082c8:	080083e5 	.word	0x080083e5
 80082cc:	08008363 	.word	0x08008363
 80082d0:	080083e5 	.word	0x080083e5
 80082d4:	080083e5 	.word	0x080083e5
 80082d8:	080083e5 	.word	0x080083e5
 80082dc:	080083a3 	.word	0x080083a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fa38 	bl	800875c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	699a      	ldr	r2, [r3, #24]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0208 	orr.w	r2, r2, #8
 80082fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0204 	bic.w	r2, r2, #4
 800830a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6999      	ldr	r1, [r3, #24]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	619a      	str	r2, [r3, #24]
      break;
 800831e:	e062      	b.n	80083e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fa7e 	bl	8008828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800833a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800834a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6999      	ldr	r1, [r3, #24]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	021a      	lsls	r2, r3, #8
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	619a      	str	r2, [r3, #24]
      break;
 8008360:	e041      	b.n	80083e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68b9      	ldr	r1, [r7, #8]
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fac7 	bl	80088fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69da      	ldr	r2, [r3, #28]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f042 0208 	orr.w	r2, r2, #8
 800837c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69da      	ldr	r2, [r3, #28]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0204 	bic.w	r2, r2, #4
 800838c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	69d9      	ldr	r1, [r3, #28]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	691a      	ldr	r2, [r3, #16]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	61da      	str	r2, [r3, #28]
      break;
 80083a0:	e021      	b.n	80083e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fb11 	bl	80089d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	69da      	ldr	r2, [r3, #28]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69da      	ldr	r2, [r3, #28]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69d9      	ldr	r1, [r3, #28]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	021a      	lsls	r2, r3, #8
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	61da      	str	r2, [r3, #28]
      break;
 80083e2:	e000      	b.n	80083e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80083e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_TIM_SlaveConfigSynchro+0x18>
 800840c:	2302      	movs	r3, #2
 800840e:	e031      	b.n	8008474 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fb22 	bl	8008a6c <TIM_SlaveTimer_SetConfig>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e018      	b.n	8008474 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008450:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008460:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr

0800848e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bc80      	pop	{r7}
 80084b0:	4770      	bx	lr

080084b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bc80      	pop	{r7}
 80084d4:	4770      	bx	lr

080084d6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d107      	bne.n	80084fe <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084fc:	e02a      	b.n	8008554 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d107      	bne.n	8008518 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2202      	movs	r2, #2
 800850c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008516:	e01d      	b.n	8008554 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	429a      	cmp	r2, r3
 8008520:	d107      	bne.n	8008532 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2204      	movs	r2, #4
 8008526:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008530:	e010      	b.n	8008554 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	429a      	cmp	r2, r3
 800853a:	d107      	bne.n	800854c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2208      	movs	r2, #8
 8008540:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800854a:	e003      	b.n	8008554 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f7ff ffb5 	bl	80084c4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
}
 8008560:	bf00      	nop
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008574:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	429a      	cmp	r2, r3
 800857e:	d10f      	bne.n	80085a0 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2201      	movs	r2, #1
 8008584:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d146      	bne.n	800861c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800859e:	e03d      	b.n	800861c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d10f      	bne.n	80085ca <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2202      	movs	r2, #2
 80085ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d131      	bne.n	800861c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085c8:	e028      	b.n	800861c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d10f      	bne.n	80085f4 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2204      	movs	r2, #4
 80085d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d11c      	bne.n	800861c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085f2:	e013      	b.n	800861c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d10e      	bne.n	800861c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2208      	movs	r2, #8
 8008602:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d107      	bne.n	800861c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7f9 ff01 	bl	8002424 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	771a      	strb	r2, [r3, #28]
}
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	429a      	cmp	r2, r3
 8008646:	d103      	bne.n	8008650 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	771a      	strb	r2, [r3, #28]
 800864e:	e019      	b.n	8008684 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	429a      	cmp	r2, r3
 8008658:	d103      	bne.n	8008662 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2202      	movs	r2, #2
 800865e:	771a      	strb	r2, [r3, #28]
 8008660:	e010      	b.n	8008684 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	429a      	cmp	r2, r3
 800866a:	d103      	bne.n	8008674 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2204      	movs	r2, #4
 8008670:	771a      	strb	r2, [r3, #28]
 8008672:	e007      	b.n	8008684 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d102      	bne.n	8008684 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2208      	movs	r2, #8
 8008682:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7ff ff02 	bl	800848e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	771a      	strb	r2, [r3, #28]
}
 8008690:	bf00      	nop
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a29      	ldr	r2, [pc, #164]	; (8008750 <TIM_Base_SetConfig+0xb8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d00b      	beq.n	80086c8 <TIM_Base_SetConfig+0x30>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b6:	d007      	beq.n	80086c8 <TIM_Base_SetConfig+0x30>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a26      	ldr	r2, [pc, #152]	; (8008754 <TIM_Base_SetConfig+0xbc>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d003      	beq.n	80086c8 <TIM_Base_SetConfig+0x30>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a25      	ldr	r2, [pc, #148]	; (8008758 <TIM_Base_SetConfig+0xc0>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d108      	bne.n	80086da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a1c      	ldr	r2, [pc, #112]	; (8008750 <TIM_Base_SetConfig+0xb8>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00b      	beq.n	80086fa <TIM_Base_SetConfig+0x62>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e8:	d007      	beq.n	80086fa <TIM_Base_SetConfig+0x62>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a19      	ldr	r2, [pc, #100]	; (8008754 <TIM_Base_SetConfig+0xbc>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d003      	beq.n	80086fa <TIM_Base_SetConfig+0x62>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a18      	ldr	r2, [pc, #96]	; (8008758 <TIM_Base_SetConfig+0xc0>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d108      	bne.n	800870c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a07      	ldr	r2, [pc, #28]	; (8008750 <TIM_Base_SetConfig+0xb8>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d103      	bne.n	8008740 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	691a      	ldr	r2, [r3, #16]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	615a      	str	r2, [r3, #20]
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr
 8008750:	40012c00 	.word	0x40012c00
 8008754:	40000400 	.word	0x40000400
 8008758:	40000800 	.word	0x40000800

0800875c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	f023 0201 	bic.w	r2, r3, #1
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f023 0302 	bic.w	r3, r3, #2
 80087a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a1c      	ldr	r2, [pc, #112]	; (8008824 <TIM_OC1_SetConfig+0xc8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d10c      	bne.n	80087d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f023 0308 	bic.w	r3, r3, #8
 80087be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f023 0304 	bic.w	r3, r3, #4
 80087d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a13      	ldr	r2, [pc, #76]	; (8008824 <TIM_OC1_SetConfig+0xc8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d111      	bne.n	80087fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	621a      	str	r2, [r3, #32]
}
 8008818:	bf00      	nop
 800881a:	371c      	adds	r7, #28
 800881c:	46bd      	mov	sp, r7
 800881e:	bc80      	pop	{r7}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	40012c00 	.word	0x40012c00

08008828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	f023 0210 	bic.w	r2, r3, #16
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800885e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4313      	orrs	r3, r2
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 0320 	bic.w	r3, r3, #32
 8008872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a1d      	ldr	r2, [pc, #116]	; (80088f8 <TIM_OC2_SetConfig+0xd0>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d10d      	bne.n	80088a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800888e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	4313      	orrs	r3, r2
 800889a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a14      	ldr	r2, [pc, #80]	; (80088f8 <TIM_OC2_SetConfig+0xd0>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d113      	bne.n	80088d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	621a      	str	r2, [r3, #32]
}
 80088ee:	bf00      	nop
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr
 80088f8:	40012c00 	.word	0x40012c00

080088fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0303 	bic.w	r3, r3, #3
 8008932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	021b      	lsls	r3, r3, #8
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a1d      	ldr	r2, [pc, #116]	; (80089cc <TIM_OC3_SetConfig+0xd0>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d10d      	bne.n	8008976 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a14      	ldr	r2, [pc, #80]	; (80089cc <TIM_OC3_SetConfig+0xd0>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d113      	bne.n	80089a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800898c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4313      	orrs	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	011b      	lsls	r3, r3, #4
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	621a      	str	r2, [r3, #32]
}
 80089c0:	bf00      	nop
 80089c2:	371c      	adds	r7, #28
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bc80      	pop	{r7}
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40012c00 	.word	0x40012c00

080089d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	031b      	lsls	r3, r3, #12
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a0f      	ldr	r2, [pc, #60]	; (8008a68 <TIM_OC4_SetConfig+0x98>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d109      	bne.n	8008a44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	019b      	lsls	r3, r3, #6
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr
 8008a68:	40012c00 	.word	0x40012c00

08008a6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f023 0307 	bic.w	r3, r3, #7
 8008a96:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	2b70      	cmp	r3, #112	; 0x70
 8008ab0:	d01a      	beq.n	8008ae8 <TIM_SlaveTimer_SetConfig+0x7c>
 8008ab2:	2b70      	cmp	r3, #112	; 0x70
 8008ab4:	d860      	bhi.n	8008b78 <TIM_SlaveTimer_SetConfig+0x10c>
 8008ab6:	2b60      	cmp	r3, #96	; 0x60
 8008ab8:	d054      	beq.n	8008b64 <TIM_SlaveTimer_SetConfig+0xf8>
 8008aba:	2b60      	cmp	r3, #96	; 0x60
 8008abc:	d85c      	bhi.n	8008b78 <TIM_SlaveTimer_SetConfig+0x10c>
 8008abe:	2b50      	cmp	r3, #80	; 0x50
 8008ac0:	d046      	beq.n	8008b50 <TIM_SlaveTimer_SetConfig+0xe4>
 8008ac2:	2b50      	cmp	r3, #80	; 0x50
 8008ac4:	d858      	bhi.n	8008b78 <TIM_SlaveTimer_SetConfig+0x10c>
 8008ac6:	2b40      	cmp	r3, #64	; 0x40
 8008ac8:	d019      	beq.n	8008afe <TIM_SlaveTimer_SetConfig+0x92>
 8008aca:	2b40      	cmp	r3, #64	; 0x40
 8008acc:	d854      	bhi.n	8008b78 <TIM_SlaveTimer_SetConfig+0x10c>
 8008ace:	2b30      	cmp	r3, #48	; 0x30
 8008ad0:	d054      	beq.n	8008b7c <TIM_SlaveTimer_SetConfig+0x110>
 8008ad2:	2b30      	cmp	r3, #48	; 0x30
 8008ad4:	d850      	bhi.n	8008b78 <TIM_SlaveTimer_SetConfig+0x10c>
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	d050      	beq.n	8008b7c <TIM_SlaveTimer_SetConfig+0x110>
 8008ada:	2b20      	cmp	r3, #32
 8008adc:	d84c      	bhi.n	8008b78 <TIM_SlaveTimer_SetConfig+0x10c>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d04c      	beq.n	8008b7c <TIM_SlaveTimer_SetConfig+0x110>
 8008ae2:	2b10      	cmp	r3, #16
 8008ae4:	d04a      	beq.n	8008b7c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8008ae6:	e047      	b.n	8008b78 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6818      	ldr	r0, [r3, #0]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	68d9      	ldr	r1, [r3, #12]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	f000 f9b0 	bl	8008e5c <TIM_ETR_SetConfig>
      break;
 8008afc:	e03f      	b.n	8008b7e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b05      	cmp	r3, #5
 8008b04:	d101      	bne.n	8008b0a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e03a      	b.n	8008b80 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6a1a      	ldr	r2, [r3, #32]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 0201 	bic.w	r2, r2, #1
 8008b20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b30:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	621a      	str	r2, [r3, #32]
      break;
 8008b4e:	e016      	b.n	8008b7e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6818      	ldr	r0, [r3, #0]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	6899      	ldr	r1, [r3, #8]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	f000 f86d 	bl	8008c3c <TIM_TI1_ConfigInputStage>
      break;
 8008b62:	e00c      	b.n	8008b7e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6818      	ldr	r0, [r3, #0]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	6899      	ldr	r1, [r3, #8]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	461a      	mov	r2, r3
 8008b72:	f000 f8cd 	bl	8008d10 <TIM_TI2_ConfigInputStage>
      break;
 8008b76:	e002      	b.n	8008b7e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8008b78:	bf00      	nop
 8008b7a:	e000      	b.n	8008b7e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8008b7c:	bf00      	nop
  }
  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f023 0201 	bic.w	r2, r3, #1
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a1f      	ldr	r2, [pc, #124]	; (8008c30 <TIM_TI1_SetConfig+0xa8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d00b      	beq.n	8008bce <TIM_TI1_SetConfig+0x46>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bbc:	d007      	beq.n	8008bce <TIM_TI1_SetConfig+0x46>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a1c      	ldr	r2, [pc, #112]	; (8008c34 <TIM_TI1_SetConfig+0xac>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d003      	beq.n	8008bce <TIM_TI1_SetConfig+0x46>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a1b      	ldr	r2, [pc, #108]	; (8008c38 <TIM_TI1_SetConfig+0xb0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d101      	bne.n	8008bd2 <TIM_TI1_SetConfig+0x4a>
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <TIM_TI1_SetConfig+0x4c>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d008      	beq.n	8008bea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f023 0303 	bic.w	r3, r3, #3
 8008bde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008be0:	697a      	ldr	r2, [r7, #20]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]
 8008be8:	e003      	b.n	8008bf2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f043 0301 	orr.w	r3, r3, #1
 8008bf0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f023 030a 	bic.w	r3, r3, #10
 8008c0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f003 030a 	and.w	r3, r3, #10
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	621a      	str	r2, [r3, #32]
}
 8008c26:	bf00      	nop
 8008c28:	371c      	adds	r7, #28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bc80      	pop	{r7}
 8008c2e:	4770      	bx	lr
 8008c30:	40012c00 	.word	0x40012c00
 8008c34:	40000400 	.word	0x40000400
 8008c38:	40000800 	.word	0x40000800

08008c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	f023 0201 	bic.w	r2, r3, #1
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f023 030a 	bic.w	r3, r3, #10
 8008c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	621a      	str	r2, [r3, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bc80      	pop	{r7}
 8008c96:	4770      	bx	lr

08008c98 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	f023 0210 	bic.w	r2, r3, #16
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	021b      	lsls	r3, r3, #8
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	031b      	lsls	r3, r3, #12
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	011b      	lsls	r3, r3, #4
 8008cf0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	621a      	str	r2, [r3, #32]
}
 8008d06:	bf00      	nop
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr

08008d10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	f023 0210 	bic.w	r2, r3, #16
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	031b      	lsls	r3, r3, #12
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	621a      	str	r2, [r3, #32]
}
 8008d64:	bf00      	nop
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr

08008d6e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b087      	sub	sp, #28
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	607a      	str	r2, [r7, #4]
 8008d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008daa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	021b      	lsls	r3, r3, #8
 8008dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	621a      	str	r2, [r3, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bc80      	pop	{r7}
 8008de2:	4770      	bx	lr

08008de4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
 8008df0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	031b      	lsls	r3, r3, #12
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	031b      	lsls	r3, r3, #12
 8008e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	621a      	str	r2, [r3, #32]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr

08008e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	021a      	lsls	r2, r3, #8
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	609a      	str	r2, [r3, #8]
}
 8008e90:	bf00      	nop
 8008e92:	371c      	adds	r7, #28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bc80      	pop	{r7}
 8008e98:	4770      	bx	lr

08008e9a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b087      	sub	sp, #28
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	60b9      	str	r1, [r7, #8]
 8008ea4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	f003 031f 	and.w	r3, r3, #31
 8008eac:	2201      	movs	r2, #1
 8008eae:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a1a      	ldr	r2, [r3, #32]
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	43db      	mvns	r3, r3
 8008ebc:	401a      	ands	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6a1a      	ldr	r2, [r3, #32]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	f003 031f 	and.w	r3, r3, #31
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	621a      	str	r2, [r3, #32]
}
 8008ed8:	bf00      	nop
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bc80      	pop	{r7}
 8008ee0:	4770      	bx	lr
	...

08008ee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e046      	b.n	8008f8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a16      	ldr	r2, [pc, #88]	; (8008f94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00e      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f48:	d009      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a12      	ldr	r2, [pc, #72]	; (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d004      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a10      	ldr	r2, [pc, #64]	; (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d10c      	bne.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bc80      	pop	{r7}
 8008f92:	4770      	bx	lr
 8008f94:	40012c00 	.word	0x40012c00
 8008f98:	40000400 	.word	0x40000400
 8008f9c:	40000800 	.word	0x40000800

08008fa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e03d      	b.n	8009038 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	4313      	orrs	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	4313      	orrs	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr

08009042 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800904a:	bf00      	nop
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	bc80      	pop	{r7}
 8009052:	4770      	bx	lr

08009054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr

08009066 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b082      	sub	sp, #8
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e03f      	b.n	80090f8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d106      	bne.n	8009092 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7f9 fd3b 	bl	8002b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2224      	movs	r2, #36	; 0x24
 8009096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f904 	bl	80092b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691a      	ldr	r2, [r3, #16]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	695a      	ldr	r2, [r3, #20]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68da      	ldr	r2, [r3, #12]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	4613      	mov	r3, r2
 800910e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b20      	cmp	r3, #32
 800911e:	d17c      	bne.n	800921a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <HAL_UART_Transmit+0x2c>
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e075      	b.n	800921c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009136:	2b01      	cmp	r3, #1
 8009138:	d101      	bne.n	800913e <HAL_UART_Transmit+0x3e>
 800913a:	2302      	movs	r3, #2
 800913c:	e06e      	b.n	800921c <HAL_UART_Transmit+0x11c>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2221      	movs	r2, #33	; 0x21
 8009150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009154:	f7f9 fee8 	bl	8002f28 <HAL_GetTick>
 8009158:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	88fa      	ldrh	r2, [r7, #6]
 800915e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	88fa      	ldrh	r2, [r7, #6]
 8009164:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800916e:	d108      	bne.n	8009182 <HAL_UART_Transmit+0x82>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009178:	2300      	movs	r3, #0
 800917a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	61bb      	str	r3, [r7, #24]
 8009180:	e003      	b.n	800918a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009192:	e02a      	b.n	80091ea <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	2200      	movs	r2, #0
 800919c:	2180      	movs	r1, #128	; 0x80
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 f840 	bl	8009224 <UART_WaitOnFlagUntilTimeout>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e036      	b.n	800921c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10b      	bne.n	80091cc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091c2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	3302      	adds	r3, #2
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	e007      	b.n	80091dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	781a      	ldrb	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	3301      	adds	r3, #1
 80091da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	3b01      	subs	r3, #1
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1cf      	bne.n	8009194 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	2200      	movs	r2, #0
 80091fc:	2140      	movs	r1, #64	; 0x40
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 f810 	bl	8009224 <UART_WaitOnFlagUntilTimeout>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e006      	b.n	800921c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2220      	movs	r2, #32
 8009212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	e000      	b.n	800921c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800921a:	2302      	movs	r3, #2
  }
}
 800921c:	4618      	mov	r0, r3
 800921e:	3720      	adds	r7, #32
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	4613      	mov	r3, r2
 8009232:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009234:	e02c      	b.n	8009290 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923c:	d028      	beq.n	8009290 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <UART_WaitOnFlagUntilTimeout+0x30>
 8009244:	f7f9 fe70 	bl	8002f28 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	429a      	cmp	r2, r3
 8009252:	d21d      	bcs.n	8009290 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68da      	ldr	r2, [r3, #12]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009262:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	695a      	ldr	r2, [r3, #20]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f022 0201 	bic.w	r2, r2, #1
 8009272:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e00f      	b.n	80092b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	4013      	ands	r3, r2
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	429a      	cmp	r2, r3
 800929e:	bf0c      	ite	eq
 80092a0:	2301      	moveq	r3, #1
 80092a2:	2300      	movne	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	461a      	mov	r2, r3
 80092a8:	79fb      	ldrb	r3, [r7, #7]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d0c3      	beq.n	8009236 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80092f2:	f023 030c 	bic.w	r3, r3, #12
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	68b9      	ldr	r1, [r7, #8]
 80092fc:	430b      	orrs	r3, r1
 80092fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a2c      	ldr	r2, [pc, #176]	; (80093cc <UART_SetConfig+0x114>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d103      	bne.n	8009328 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009320:	f7fe f8f2 	bl	8007508 <HAL_RCC_GetPCLK2Freq>
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	e002      	b.n	800932e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009328:	f7fe f8da 	bl	80074e0 <HAL_RCC_GetPCLK1Freq>
 800932c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	4613      	mov	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	009a      	lsls	r2, r3, #2
 8009338:	441a      	add	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	fbb2 f3f3 	udiv	r3, r2, r3
 8009344:	4a22      	ldr	r2, [pc, #136]	; (80093d0 <UART_SetConfig+0x118>)
 8009346:	fba2 2303 	umull	r2, r3, r2, r3
 800934a:	095b      	lsrs	r3, r3, #5
 800934c:	0119      	lsls	r1, r3, #4
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	009a      	lsls	r2, r3, #2
 8009358:	441a      	add	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	fbb2 f2f3 	udiv	r2, r2, r3
 8009364:	4b1a      	ldr	r3, [pc, #104]	; (80093d0 <UART_SetConfig+0x118>)
 8009366:	fba3 0302 	umull	r0, r3, r3, r2
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	2064      	movs	r0, #100	; 0x64
 800936e:	fb00 f303 	mul.w	r3, r0, r3
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	3332      	adds	r3, #50	; 0x32
 8009378:	4a15      	ldr	r2, [pc, #84]	; (80093d0 <UART_SetConfig+0x118>)
 800937a:	fba2 2303 	umull	r2, r3, r2, r3
 800937e:	095b      	lsrs	r3, r3, #5
 8009380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009384:	4419      	add	r1, r3
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	4613      	mov	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	009a      	lsls	r2, r3, #2
 8009390:	441a      	add	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	fbb2 f2f3 	udiv	r2, r2, r3
 800939c:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <UART_SetConfig+0x118>)
 800939e:	fba3 0302 	umull	r0, r3, r3, r2
 80093a2:	095b      	lsrs	r3, r3, #5
 80093a4:	2064      	movs	r0, #100	; 0x64
 80093a6:	fb00 f303 	mul.w	r3, r0, r3
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	3332      	adds	r3, #50	; 0x32
 80093b0:	4a07      	ldr	r2, [pc, #28]	; (80093d0 <UART_SetConfig+0x118>)
 80093b2:	fba2 2303 	umull	r2, r3, r2, r3
 80093b6:	095b      	lsrs	r3, r3, #5
 80093b8:	f003 020f 	and.w	r2, r3, #15
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	440a      	add	r2, r1
 80093c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80093c4:	bf00      	nop
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	40013800 	.word	0x40013800
 80093d0:	51eb851f 	.word	0x51eb851f

080093d4 <__errno>:
 80093d4:	4b01      	ldr	r3, [pc, #4]	; (80093dc <__errno+0x8>)
 80093d6:	6818      	ldr	r0, [r3, #0]
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	20000034 	.word	0x20000034

080093e0 <__libc_init_array>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	2600      	movs	r6, #0
 80093e4:	4d0c      	ldr	r5, [pc, #48]	; (8009418 <__libc_init_array+0x38>)
 80093e6:	4c0d      	ldr	r4, [pc, #52]	; (800941c <__libc_init_array+0x3c>)
 80093e8:	1b64      	subs	r4, r4, r5
 80093ea:	10a4      	asrs	r4, r4, #2
 80093ec:	42a6      	cmp	r6, r4
 80093ee:	d109      	bne.n	8009404 <__libc_init_array+0x24>
 80093f0:	f003 f8b6 	bl	800c560 <_init>
 80093f4:	2600      	movs	r6, #0
 80093f6:	4d0a      	ldr	r5, [pc, #40]	; (8009420 <__libc_init_array+0x40>)
 80093f8:	4c0a      	ldr	r4, [pc, #40]	; (8009424 <__libc_init_array+0x44>)
 80093fa:	1b64      	subs	r4, r4, r5
 80093fc:	10a4      	asrs	r4, r4, #2
 80093fe:	42a6      	cmp	r6, r4
 8009400:	d105      	bne.n	800940e <__libc_init_array+0x2e>
 8009402:	bd70      	pop	{r4, r5, r6, pc}
 8009404:	f855 3b04 	ldr.w	r3, [r5], #4
 8009408:	4798      	blx	r3
 800940a:	3601      	adds	r6, #1
 800940c:	e7ee      	b.n	80093ec <__libc_init_array+0xc>
 800940e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009412:	4798      	blx	r3
 8009414:	3601      	adds	r6, #1
 8009416:	e7f2      	b.n	80093fe <__libc_init_array+0x1e>
 8009418:	0800c99c 	.word	0x0800c99c
 800941c:	0800c99c 	.word	0x0800c99c
 8009420:	0800c99c 	.word	0x0800c99c
 8009424:	0800c9a0 	.word	0x0800c9a0

08009428 <memset>:
 8009428:	4603      	mov	r3, r0
 800942a:	4402      	add	r2, r0
 800942c:	4293      	cmp	r3, r2
 800942e:	d100      	bne.n	8009432 <memset+0xa>
 8009430:	4770      	bx	lr
 8009432:	f803 1b01 	strb.w	r1, [r3], #1
 8009436:	e7f9      	b.n	800942c <memset+0x4>

08009438 <__cvt>:
 8009438:	2b00      	cmp	r3, #0
 800943a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800943e:	461f      	mov	r7, r3
 8009440:	bfbb      	ittet	lt
 8009442:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009446:	461f      	movlt	r7, r3
 8009448:	2300      	movge	r3, #0
 800944a:	232d      	movlt	r3, #45	; 0x2d
 800944c:	b088      	sub	sp, #32
 800944e:	4614      	mov	r4, r2
 8009450:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009452:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009454:	7013      	strb	r3, [r2, #0]
 8009456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009458:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800945c:	f023 0820 	bic.w	r8, r3, #32
 8009460:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009464:	d005      	beq.n	8009472 <__cvt+0x3a>
 8009466:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800946a:	d100      	bne.n	800946e <__cvt+0x36>
 800946c:	3501      	adds	r5, #1
 800946e:	2302      	movs	r3, #2
 8009470:	e000      	b.n	8009474 <__cvt+0x3c>
 8009472:	2303      	movs	r3, #3
 8009474:	aa07      	add	r2, sp, #28
 8009476:	9204      	str	r2, [sp, #16]
 8009478:	aa06      	add	r2, sp, #24
 800947a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800947e:	e9cd 3500 	strd	r3, r5, [sp]
 8009482:	4622      	mov	r2, r4
 8009484:	463b      	mov	r3, r7
 8009486:	f000 fce3 	bl	8009e50 <_dtoa_r>
 800948a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800948e:	4606      	mov	r6, r0
 8009490:	d102      	bne.n	8009498 <__cvt+0x60>
 8009492:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009494:	07db      	lsls	r3, r3, #31
 8009496:	d522      	bpl.n	80094de <__cvt+0xa6>
 8009498:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800949c:	eb06 0905 	add.w	r9, r6, r5
 80094a0:	d110      	bne.n	80094c4 <__cvt+0x8c>
 80094a2:	7833      	ldrb	r3, [r6, #0]
 80094a4:	2b30      	cmp	r3, #48	; 0x30
 80094a6:	d10a      	bne.n	80094be <__cvt+0x86>
 80094a8:	2200      	movs	r2, #0
 80094aa:	2300      	movs	r3, #0
 80094ac:	4620      	mov	r0, r4
 80094ae:	4639      	mov	r1, r7
 80094b0:	f7f7 fa7a 	bl	80009a8 <__aeabi_dcmpeq>
 80094b4:	b918      	cbnz	r0, 80094be <__cvt+0x86>
 80094b6:	f1c5 0501 	rsb	r5, r5, #1
 80094ba:	f8ca 5000 	str.w	r5, [sl]
 80094be:	f8da 3000 	ldr.w	r3, [sl]
 80094c2:	4499      	add	r9, r3
 80094c4:	2200      	movs	r2, #0
 80094c6:	2300      	movs	r3, #0
 80094c8:	4620      	mov	r0, r4
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f7 fa6c 	bl	80009a8 <__aeabi_dcmpeq>
 80094d0:	b108      	cbz	r0, 80094d6 <__cvt+0x9e>
 80094d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80094d6:	2230      	movs	r2, #48	; 0x30
 80094d8:	9b07      	ldr	r3, [sp, #28]
 80094da:	454b      	cmp	r3, r9
 80094dc:	d307      	bcc.n	80094ee <__cvt+0xb6>
 80094de:	4630      	mov	r0, r6
 80094e0:	9b07      	ldr	r3, [sp, #28]
 80094e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80094e4:	1b9b      	subs	r3, r3, r6
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	b008      	add	sp, #32
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	1c59      	adds	r1, r3, #1
 80094f0:	9107      	str	r1, [sp, #28]
 80094f2:	701a      	strb	r2, [r3, #0]
 80094f4:	e7f0      	b.n	80094d8 <__cvt+0xa0>

080094f6 <__exponent>:
 80094f6:	4603      	mov	r3, r0
 80094f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094fa:	2900      	cmp	r1, #0
 80094fc:	f803 2b02 	strb.w	r2, [r3], #2
 8009500:	bfb6      	itet	lt
 8009502:	222d      	movlt	r2, #45	; 0x2d
 8009504:	222b      	movge	r2, #43	; 0x2b
 8009506:	4249      	neglt	r1, r1
 8009508:	2909      	cmp	r1, #9
 800950a:	7042      	strb	r2, [r0, #1]
 800950c:	dd2b      	ble.n	8009566 <__exponent+0x70>
 800950e:	f10d 0407 	add.w	r4, sp, #7
 8009512:	46a4      	mov	ip, r4
 8009514:	270a      	movs	r7, #10
 8009516:	fb91 f6f7 	sdiv	r6, r1, r7
 800951a:	460a      	mov	r2, r1
 800951c:	46a6      	mov	lr, r4
 800951e:	fb07 1516 	mls	r5, r7, r6, r1
 8009522:	2a63      	cmp	r2, #99	; 0x63
 8009524:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009528:	4631      	mov	r1, r6
 800952a:	f104 34ff 	add.w	r4, r4, #4294967295
 800952e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009532:	dcf0      	bgt.n	8009516 <__exponent+0x20>
 8009534:	3130      	adds	r1, #48	; 0x30
 8009536:	f1ae 0502 	sub.w	r5, lr, #2
 800953a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800953e:	4629      	mov	r1, r5
 8009540:	1c44      	adds	r4, r0, #1
 8009542:	4561      	cmp	r1, ip
 8009544:	d30a      	bcc.n	800955c <__exponent+0x66>
 8009546:	f10d 0209 	add.w	r2, sp, #9
 800954a:	eba2 020e 	sub.w	r2, r2, lr
 800954e:	4565      	cmp	r5, ip
 8009550:	bf88      	it	hi
 8009552:	2200      	movhi	r2, #0
 8009554:	4413      	add	r3, r2
 8009556:	1a18      	subs	r0, r3, r0
 8009558:	b003      	add	sp, #12
 800955a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009560:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009564:	e7ed      	b.n	8009542 <__exponent+0x4c>
 8009566:	2330      	movs	r3, #48	; 0x30
 8009568:	3130      	adds	r1, #48	; 0x30
 800956a:	7083      	strb	r3, [r0, #2]
 800956c:	70c1      	strb	r1, [r0, #3]
 800956e:	1d03      	adds	r3, r0, #4
 8009570:	e7f1      	b.n	8009556 <__exponent+0x60>
	...

08009574 <_printf_float>:
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	b091      	sub	sp, #68	; 0x44
 800957a:	460c      	mov	r4, r1
 800957c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009580:	4616      	mov	r6, r2
 8009582:	461f      	mov	r7, r3
 8009584:	4605      	mov	r5, r0
 8009586:	f001 fa51 	bl	800aa2c <_localeconv_r>
 800958a:	6803      	ldr	r3, [r0, #0]
 800958c:	4618      	mov	r0, r3
 800958e:	9309      	str	r3, [sp, #36]	; 0x24
 8009590:	f7f6 fdde 	bl	8000150 <strlen>
 8009594:	2300      	movs	r3, #0
 8009596:	930e      	str	r3, [sp, #56]	; 0x38
 8009598:	f8d8 3000 	ldr.w	r3, [r8]
 800959c:	900a      	str	r0, [sp, #40]	; 0x28
 800959e:	3307      	adds	r3, #7
 80095a0:	f023 0307 	bic.w	r3, r3, #7
 80095a4:	f103 0208 	add.w	r2, r3, #8
 80095a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80095ac:	f8d4 b000 	ldr.w	fp, [r4]
 80095b0:	f8c8 2000 	str.w	r2, [r8]
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80095bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80095c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80095c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80095c6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ca:	4640      	mov	r0, r8
 80095cc:	4b9c      	ldr	r3, [pc, #624]	; (8009840 <_printf_float+0x2cc>)
 80095ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095d0:	f7f7 fa1c 	bl	8000a0c <__aeabi_dcmpun>
 80095d4:	bb70      	cbnz	r0, 8009634 <_printf_float+0xc0>
 80095d6:	f04f 32ff 	mov.w	r2, #4294967295
 80095da:	4640      	mov	r0, r8
 80095dc:	4b98      	ldr	r3, [pc, #608]	; (8009840 <_printf_float+0x2cc>)
 80095de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095e0:	f7f7 f9f6 	bl	80009d0 <__aeabi_dcmple>
 80095e4:	bb30      	cbnz	r0, 8009634 <_printf_float+0xc0>
 80095e6:	2200      	movs	r2, #0
 80095e8:	2300      	movs	r3, #0
 80095ea:	4640      	mov	r0, r8
 80095ec:	4651      	mov	r1, sl
 80095ee:	f7f7 f9e5 	bl	80009bc <__aeabi_dcmplt>
 80095f2:	b110      	cbz	r0, 80095fa <_printf_float+0x86>
 80095f4:	232d      	movs	r3, #45	; 0x2d
 80095f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095fa:	4b92      	ldr	r3, [pc, #584]	; (8009844 <_printf_float+0x2d0>)
 80095fc:	4892      	ldr	r0, [pc, #584]	; (8009848 <_printf_float+0x2d4>)
 80095fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009602:	bf94      	ite	ls
 8009604:	4698      	movls	r8, r3
 8009606:	4680      	movhi	r8, r0
 8009608:	2303      	movs	r3, #3
 800960a:	f04f 0a00 	mov.w	sl, #0
 800960e:	6123      	str	r3, [r4, #16]
 8009610:	f02b 0304 	bic.w	r3, fp, #4
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	4633      	mov	r3, r6
 8009618:	4621      	mov	r1, r4
 800961a:	4628      	mov	r0, r5
 800961c:	9700      	str	r7, [sp, #0]
 800961e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009620:	f000 f9d4 	bl	80099cc <_printf_common>
 8009624:	3001      	adds	r0, #1
 8009626:	f040 8090 	bne.w	800974a <_printf_float+0x1d6>
 800962a:	f04f 30ff 	mov.w	r0, #4294967295
 800962e:	b011      	add	sp, #68	; 0x44
 8009630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009634:	4642      	mov	r2, r8
 8009636:	4653      	mov	r3, sl
 8009638:	4640      	mov	r0, r8
 800963a:	4651      	mov	r1, sl
 800963c:	f7f7 f9e6 	bl	8000a0c <__aeabi_dcmpun>
 8009640:	b148      	cbz	r0, 8009656 <_printf_float+0xe2>
 8009642:	f1ba 0f00 	cmp.w	sl, #0
 8009646:	bfb8      	it	lt
 8009648:	232d      	movlt	r3, #45	; 0x2d
 800964a:	4880      	ldr	r0, [pc, #512]	; (800984c <_printf_float+0x2d8>)
 800964c:	bfb8      	it	lt
 800964e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009652:	4b7f      	ldr	r3, [pc, #508]	; (8009850 <_printf_float+0x2dc>)
 8009654:	e7d3      	b.n	80095fe <_printf_float+0x8a>
 8009656:	6863      	ldr	r3, [r4, #4]
 8009658:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	d142      	bne.n	80096e6 <_printf_float+0x172>
 8009660:	2306      	movs	r3, #6
 8009662:	6063      	str	r3, [r4, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	9206      	str	r2, [sp, #24]
 8009668:	aa0e      	add	r2, sp, #56	; 0x38
 800966a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800966e:	aa0d      	add	r2, sp, #52	; 0x34
 8009670:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009674:	9203      	str	r2, [sp, #12]
 8009676:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800967a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	6863      	ldr	r3, [r4, #4]
 8009682:	4642      	mov	r2, r8
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	4628      	mov	r0, r5
 8009688:	4653      	mov	r3, sl
 800968a:	910b      	str	r1, [sp, #44]	; 0x2c
 800968c:	f7ff fed4 	bl	8009438 <__cvt>
 8009690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009692:	4680      	mov	r8, r0
 8009694:	2947      	cmp	r1, #71	; 0x47
 8009696:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009698:	d108      	bne.n	80096ac <_printf_float+0x138>
 800969a:	1cc8      	adds	r0, r1, #3
 800969c:	db02      	blt.n	80096a4 <_printf_float+0x130>
 800969e:	6863      	ldr	r3, [r4, #4]
 80096a0:	4299      	cmp	r1, r3
 80096a2:	dd40      	ble.n	8009726 <_printf_float+0x1b2>
 80096a4:	f1a9 0902 	sub.w	r9, r9, #2
 80096a8:	fa5f f989 	uxtb.w	r9, r9
 80096ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80096b0:	d81f      	bhi.n	80096f2 <_printf_float+0x17e>
 80096b2:	464a      	mov	r2, r9
 80096b4:	3901      	subs	r1, #1
 80096b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096ba:	910d      	str	r1, [sp, #52]	; 0x34
 80096bc:	f7ff ff1b 	bl	80094f6 <__exponent>
 80096c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096c2:	4682      	mov	sl, r0
 80096c4:	1813      	adds	r3, r2, r0
 80096c6:	2a01      	cmp	r2, #1
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	dc02      	bgt.n	80096d2 <_printf_float+0x15e>
 80096cc:	6822      	ldr	r2, [r4, #0]
 80096ce:	07d2      	lsls	r2, r2, #31
 80096d0:	d501      	bpl.n	80096d6 <_printf_float+0x162>
 80096d2:	3301      	adds	r3, #1
 80096d4:	6123      	str	r3, [r4, #16]
 80096d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d09b      	beq.n	8009616 <_printf_float+0xa2>
 80096de:	232d      	movs	r3, #45	; 0x2d
 80096e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e4:	e797      	b.n	8009616 <_printf_float+0xa2>
 80096e6:	2947      	cmp	r1, #71	; 0x47
 80096e8:	d1bc      	bne.n	8009664 <_printf_float+0xf0>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1ba      	bne.n	8009664 <_printf_float+0xf0>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e7b7      	b.n	8009662 <_printf_float+0xee>
 80096f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80096f6:	d118      	bne.n	800972a <_printf_float+0x1b6>
 80096f8:	2900      	cmp	r1, #0
 80096fa:	6863      	ldr	r3, [r4, #4]
 80096fc:	dd0b      	ble.n	8009716 <_printf_float+0x1a2>
 80096fe:	6121      	str	r1, [r4, #16]
 8009700:	b913      	cbnz	r3, 8009708 <_printf_float+0x194>
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	07d0      	lsls	r0, r2, #31
 8009706:	d502      	bpl.n	800970e <_printf_float+0x19a>
 8009708:	3301      	adds	r3, #1
 800970a:	440b      	add	r3, r1
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	f04f 0a00 	mov.w	sl, #0
 8009712:	65a1      	str	r1, [r4, #88]	; 0x58
 8009714:	e7df      	b.n	80096d6 <_printf_float+0x162>
 8009716:	b913      	cbnz	r3, 800971e <_printf_float+0x1aa>
 8009718:	6822      	ldr	r2, [r4, #0]
 800971a:	07d2      	lsls	r2, r2, #31
 800971c:	d501      	bpl.n	8009722 <_printf_float+0x1ae>
 800971e:	3302      	adds	r3, #2
 8009720:	e7f4      	b.n	800970c <_printf_float+0x198>
 8009722:	2301      	movs	r3, #1
 8009724:	e7f2      	b.n	800970c <_printf_float+0x198>
 8009726:	f04f 0967 	mov.w	r9, #103	; 0x67
 800972a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800972c:	4299      	cmp	r1, r3
 800972e:	db05      	blt.n	800973c <_printf_float+0x1c8>
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	6121      	str	r1, [r4, #16]
 8009734:	07d8      	lsls	r0, r3, #31
 8009736:	d5ea      	bpl.n	800970e <_printf_float+0x19a>
 8009738:	1c4b      	adds	r3, r1, #1
 800973a:	e7e7      	b.n	800970c <_printf_float+0x198>
 800973c:	2900      	cmp	r1, #0
 800973e:	bfcc      	ite	gt
 8009740:	2201      	movgt	r2, #1
 8009742:	f1c1 0202 	rsble	r2, r1, #2
 8009746:	4413      	add	r3, r2
 8009748:	e7e0      	b.n	800970c <_printf_float+0x198>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	055a      	lsls	r2, r3, #21
 800974e:	d407      	bmi.n	8009760 <_printf_float+0x1ec>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	4642      	mov	r2, r8
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	d12b      	bne.n	80097b6 <_printf_float+0x242>
 800975e:	e764      	b.n	800962a <_printf_float+0xb6>
 8009760:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009764:	f240 80dd 	bls.w	8009922 <_printf_float+0x3ae>
 8009768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800976c:	2200      	movs	r2, #0
 800976e:	2300      	movs	r3, #0
 8009770:	f7f7 f91a 	bl	80009a8 <__aeabi_dcmpeq>
 8009774:	2800      	cmp	r0, #0
 8009776:	d033      	beq.n	80097e0 <_printf_float+0x26c>
 8009778:	2301      	movs	r3, #1
 800977a:	4631      	mov	r1, r6
 800977c:	4628      	mov	r0, r5
 800977e:	4a35      	ldr	r2, [pc, #212]	; (8009854 <_printf_float+0x2e0>)
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f af51 	beq.w	800962a <_printf_float+0xb6>
 8009788:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800978c:	429a      	cmp	r2, r3
 800978e:	db02      	blt.n	8009796 <_printf_float+0x222>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	07d8      	lsls	r0, r3, #31
 8009794:	d50f      	bpl.n	80097b6 <_printf_float+0x242>
 8009796:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800979a:	4631      	mov	r1, r6
 800979c:	4628      	mov	r0, r5
 800979e:	47b8      	blx	r7
 80097a0:	3001      	adds	r0, #1
 80097a2:	f43f af42 	beq.w	800962a <_printf_float+0xb6>
 80097a6:	f04f 0800 	mov.w	r8, #0
 80097aa:	f104 091a 	add.w	r9, r4, #26
 80097ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097b0:	3b01      	subs	r3, #1
 80097b2:	4543      	cmp	r3, r8
 80097b4:	dc09      	bgt.n	80097ca <_printf_float+0x256>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	079b      	lsls	r3, r3, #30
 80097ba:	f100 8102 	bmi.w	80099c2 <_printf_float+0x44e>
 80097be:	68e0      	ldr	r0, [r4, #12]
 80097c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097c2:	4298      	cmp	r0, r3
 80097c4:	bfb8      	it	lt
 80097c6:	4618      	movlt	r0, r3
 80097c8:	e731      	b.n	800962e <_printf_float+0xba>
 80097ca:	2301      	movs	r3, #1
 80097cc:	464a      	mov	r2, r9
 80097ce:	4631      	mov	r1, r6
 80097d0:	4628      	mov	r0, r5
 80097d2:	47b8      	blx	r7
 80097d4:	3001      	adds	r0, #1
 80097d6:	f43f af28 	beq.w	800962a <_printf_float+0xb6>
 80097da:	f108 0801 	add.w	r8, r8, #1
 80097de:	e7e6      	b.n	80097ae <_printf_float+0x23a>
 80097e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	dc38      	bgt.n	8009858 <_printf_float+0x2e4>
 80097e6:	2301      	movs	r3, #1
 80097e8:	4631      	mov	r1, r6
 80097ea:	4628      	mov	r0, r5
 80097ec:	4a19      	ldr	r2, [pc, #100]	; (8009854 <_printf_float+0x2e0>)
 80097ee:	47b8      	blx	r7
 80097f0:	3001      	adds	r0, #1
 80097f2:	f43f af1a 	beq.w	800962a <_printf_float+0xb6>
 80097f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80097fa:	4313      	orrs	r3, r2
 80097fc:	d102      	bne.n	8009804 <_printf_float+0x290>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	07d9      	lsls	r1, r3, #31
 8009802:	d5d8      	bpl.n	80097b6 <_printf_float+0x242>
 8009804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009808:	4631      	mov	r1, r6
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	f43f af0b 	beq.w	800962a <_printf_float+0xb6>
 8009814:	f04f 0900 	mov.w	r9, #0
 8009818:	f104 0a1a 	add.w	sl, r4, #26
 800981c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800981e:	425b      	negs	r3, r3
 8009820:	454b      	cmp	r3, r9
 8009822:	dc01      	bgt.n	8009828 <_printf_float+0x2b4>
 8009824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009826:	e794      	b.n	8009752 <_printf_float+0x1de>
 8009828:	2301      	movs	r3, #1
 800982a:	4652      	mov	r2, sl
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	47b8      	blx	r7
 8009832:	3001      	adds	r0, #1
 8009834:	f43f aef9 	beq.w	800962a <_printf_float+0xb6>
 8009838:	f109 0901 	add.w	r9, r9, #1
 800983c:	e7ee      	b.n	800981c <_printf_float+0x2a8>
 800983e:	bf00      	nop
 8009840:	7fefffff 	.word	0x7fefffff
 8009844:	0800c5c8 	.word	0x0800c5c8
 8009848:	0800c5cc 	.word	0x0800c5cc
 800984c:	0800c5d4 	.word	0x0800c5d4
 8009850:	0800c5d0 	.word	0x0800c5d0
 8009854:	0800c5d8 	.word	0x0800c5d8
 8009858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800985a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800985c:	429a      	cmp	r2, r3
 800985e:	bfa8      	it	ge
 8009860:	461a      	movge	r2, r3
 8009862:	2a00      	cmp	r2, #0
 8009864:	4691      	mov	r9, r2
 8009866:	dc37      	bgt.n	80098d8 <_printf_float+0x364>
 8009868:	f04f 0b00 	mov.w	fp, #0
 800986c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009870:	f104 021a 	add.w	r2, r4, #26
 8009874:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009878:	ebaa 0309 	sub.w	r3, sl, r9
 800987c:	455b      	cmp	r3, fp
 800987e:	dc33      	bgt.n	80098e8 <_printf_float+0x374>
 8009880:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009884:	429a      	cmp	r2, r3
 8009886:	db3b      	blt.n	8009900 <_printf_float+0x38c>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	07da      	lsls	r2, r3, #31
 800988c:	d438      	bmi.n	8009900 <_printf_float+0x38c>
 800988e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009890:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009892:	eba3 020a 	sub.w	r2, r3, sl
 8009896:	eba3 0901 	sub.w	r9, r3, r1
 800989a:	4591      	cmp	r9, r2
 800989c:	bfa8      	it	ge
 800989e:	4691      	movge	r9, r2
 80098a0:	f1b9 0f00 	cmp.w	r9, #0
 80098a4:	dc34      	bgt.n	8009910 <_printf_float+0x39c>
 80098a6:	f04f 0800 	mov.w	r8, #0
 80098aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098ae:	f104 0a1a 	add.w	sl, r4, #26
 80098b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80098b6:	1a9b      	subs	r3, r3, r2
 80098b8:	eba3 0309 	sub.w	r3, r3, r9
 80098bc:	4543      	cmp	r3, r8
 80098be:	f77f af7a 	ble.w	80097b6 <_printf_float+0x242>
 80098c2:	2301      	movs	r3, #1
 80098c4:	4652      	mov	r2, sl
 80098c6:	4631      	mov	r1, r6
 80098c8:	4628      	mov	r0, r5
 80098ca:	47b8      	blx	r7
 80098cc:	3001      	adds	r0, #1
 80098ce:	f43f aeac 	beq.w	800962a <_printf_float+0xb6>
 80098d2:	f108 0801 	add.w	r8, r8, #1
 80098d6:	e7ec      	b.n	80098b2 <_printf_float+0x33e>
 80098d8:	4613      	mov	r3, r2
 80098da:	4631      	mov	r1, r6
 80098dc:	4642      	mov	r2, r8
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	d1c0      	bne.n	8009868 <_printf_float+0x2f4>
 80098e6:	e6a0      	b.n	800962a <_printf_float+0xb6>
 80098e8:	2301      	movs	r3, #1
 80098ea:	4631      	mov	r1, r6
 80098ec:	4628      	mov	r0, r5
 80098ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80098f0:	47b8      	blx	r7
 80098f2:	3001      	adds	r0, #1
 80098f4:	f43f ae99 	beq.w	800962a <_printf_float+0xb6>
 80098f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098fa:	f10b 0b01 	add.w	fp, fp, #1
 80098fe:	e7b9      	b.n	8009874 <_printf_float+0x300>
 8009900:	4631      	mov	r1, r6
 8009902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009906:	4628      	mov	r0, r5
 8009908:	47b8      	blx	r7
 800990a:	3001      	adds	r0, #1
 800990c:	d1bf      	bne.n	800988e <_printf_float+0x31a>
 800990e:	e68c      	b.n	800962a <_printf_float+0xb6>
 8009910:	464b      	mov	r3, r9
 8009912:	4631      	mov	r1, r6
 8009914:	4628      	mov	r0, r5
 8009916:	eb08 020a 	add.w	r2, r8, sl
 800991a:	47b8      	blx	r7
 800991c:	3001      	adds	r0, #1
 800991e:	d1c2      	bne.n	80098a6 <_printf_float+0x332>
 8009920:	e683      	b.n	800962a <_printf_float+0xb6>
 8009922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009924:	2a01      	cmp	r2, #1
 8009926:	dc01      	bgt.n	800992c <_printf_float+0x3b8>
 8009928:	07db      	lsls	r3, r3, #31
 800992a:	d537      	bpl.n	800999c <_printf_float+0x428>
 800992c:	2301      	movs	r3, #1
 800992e:	4642      	mov	r2, r8
 8009930:	4631      	mov	r1, r6
 8009932:	4628      	mov	r0, r5
 8009934:	47b8      	blx	r7
 8009936:	3001      	adds	r0, #1
 8009938:	f43f ae77 	beq.w	800962a <_printf_float+0xb6>
 800993c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009940:	4631      	mov	r1, r6
 8009942:	4628      	mov	r0, r5
 8009944:	47b8      	blx	r7
 8009946:	3001      	adds	r0, #1
 8009948:	f43f ae6f 	beq.w	800962a <_printf_float+0xb6>
 800994c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009950:	2200      	movs	r2, #0
 8009952:	2300      	movs	r3, #0
 8009954:	f7f7 f828 	bl	80009a8 <__aeabi_dcmpeq>
 8009958:	b9d8      	cbnz	r0, 8009992 <_printf_float+0x41e>
 800995a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800995c:	f108 0201 	add.w	r2, r8, #1
 8009960:	3b01      	subs	r3, #1
 8009962:	4631      	mov	r1, r6
 8009964:	4628      	mov	r0, r5
 8009966:	47b8      	blx	r7
 8009968:	3001      	adds	r0, #1
 800996a:	d10e      	bne.n	800998a <_printf_float+0x416>
 800996c:	e65d      	b.n	800962a <_printf_float+0xb6>
 800996e:	2301      	movs	r3, #1
 8009970:	464a      	mov	r2, r9
 8009972:	4631      	mov	r1, r6
 8009974:	4628      	mov	r0, r5
 8009976:	47b8      	blx	r7
 8009978:	3001      	adds	r0, #1
 800997a:	f43f ae56 	beq.w	800962a <_printf_float+0xb6>
 800997e:	f108 0801 	add.w	r8, r8, #1
 8009982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009984:	3b01      	subs	r3, #1
 8009986:	4543      	cmp	r3, r8
 8009988:	dcf1      	bgt.n	800996e <_printf_float+0x3fa>
 800998a:	4653      	mov	r3, sl
 800998c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009990:	e6e0      	b.n	8009754 <_printf_float+0x1e0>
 8009992:	f04f 0800 	mov.w	r8, #0
 8009996:	f104 091a 	add.w	r9, r4, #26
 800999a:	e7f2      	b.n	8009982 <_printf_float+0x40e>
 800999c:	2301      	movs	r3, #1
 800999e:	4642      	mov	r2, r8
 80099a0:	e7df      	b.n	8009962 <_printf_float+0x3ee>
 80099a2:	2301      	movs	r3, #1
 80099a4:	464a      	mov	r2, r9
 80099a6:	4631      	mov	r1, r6
 80099a8:	4628      	mov	r0, r5
 80099aa:	47b8      	blx	r7
 80099ac:	3001      	adds	r0, #1
 80099ae:	f43f ae3c 	beq.w	800962a <_printf_float+0xb6>
 80099b2:	f108 0801 	add.w	r8, r8, #1
 80099b6:	68e3      	ldr	r3, [r4, #12]
 80099b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80099ba:	1a5b      	subs	r3, r3, r1
 80099bc:	4543      	cmp	r3, r8
 80099be:	dcf0      	bgt.n	80099a2 <_printf_float+0x42e>
 80099c0:	e6fd      	b.n	80097be <_printf_float+0x24a>
 80099c2:	f04f 0800 	mov.w	r8, #0
 80099c6:	f104 0919 	add.w	r9, r4, #25
 80099ca:	e7f4      	b.n	80099b6 <_printf_float+0x442>

080099cc <_printf_common>:
 80099cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d0:	4616      	mov	r6, r2
 80099d2:	4699      	mov	r9, r3
 80099d4:	688a      	ldr	r2, [r1, #8]
 80099d6:	690b      	ldr	r3, [r1, #16]
 80099d8:	4607      	mov	r7, r0
 80099da:	4293      	cmp	r3, r2
 80099dc:	bfb8      	it	lt
 80099de:	4613      	movlt	r3, r2
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099e6:	460c      	mov	r4, r1
 80099e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099ec:	b10a      	cbz	r2, 80099f2 <_printf_common+0x26>
 80099ee:	3301      	adds	r3, #1
 80099f0:	6033      	str	r3, [r6, #0]
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	0699      	lsls	r1, r3, #26
 80099f6:	bf42      	ittt	mi
 80099f8:	6833      	ldrmi	r3, [r6, #0]
 80099fa:	3302      	addmi	r3, #2
 80099fc:	6033      	strmi	r3, [r6, #0]
 80099fe:	6825      	ldr	r5, [r4, #0]
 8009a00:	f015 0506 	ands.w	r5, r5, #6
 8009a04:	d106      	bne.n	8009a14 <_printf_common+0x48>
 8009a06:	f104 0a19 	add.w	sl, r4, #25
 8009a0a:	68e3      	ldr	r3, [r4, #12]
 8009a0c:	6832      	ldr	r2, [r6, #0]
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	42ab      	cmp	r3, r5
 8009a12:	dc28      	bgt.n	8009a66 <_printf_common+0x9a>
 8009a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a18:	1e13      	subs	r3, r2, #0
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	bf18      	it	ne
 8009a1e:	2301      	movne	r3, #1
 8009a20:	0692      	lsls	r2, r2, #26
 8009a22:	d42d      	bmi.n	8009a80 <_printf_common+0xb4>
 8009a24:	4649      	mov	r1, r9
 8009a26:	4638      	mov	r0, r7
 8009a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a2c:	47c0      	blx	r8
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d020      	beq.n	8009a74 <_printf_common+0xa8>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	68e5      	ldr	r5, [r4, #12]
 8009a36:	f003 0306 	and.w	r3, r3, #6
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	bf18      	it	ne
 8009a3e:	2500      	movne	r5, #0
 8009a40:	6832      	ldr	r2, [r6, #0]
 8009a42:	f04f 0600 	mov.w	r6, #0
 8009a46:	68a3      	ldr	r3, [r4, #8]
 8009a48:	bf08      	it	eq
 8009a4a:	1aad      	subeq	r5, r5, r2
 8009a4c:	6922      	ldr	r2, [r4, #16]
 8009a4e:	bf08      	it	eq
 8009a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a54:	4293      	cmp	r3, r2
 8009a56:	bfc4      	itt	gt
 8009a58:	1a9b      	subgt	r3, r3, r2
 8009a5a:	18ed      	addgt	r5, r5, r3
 8009a5c:	341a      	adds	r4, #26
 8009a5e:	42b5      	cmp	r5, r6
 8009a60:	d11a      	bne.n	8009a98 <_printf_common+0xcc>
 8009a62:	2000      	movs	r0, #0
 8009a64:	e008      	b.n	8009a78 <_printf_common+0xac>
 8009a66:	2301      	movs	r3, #1
 8009a68:	4652      	mov	r2, sl
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	47c0      	blx	r8
 8009a70:	3001      	adds	r0, #1
 8009a72:	d103      	bne.n	8009a7c <_printf_common+0xb0>
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7c:	3501      	adds	r5, #1
 8009a7e:	e7c4      	b.n	8009a0a <_printf_common+0x3e>
 8009a80:	2030      	movs	r0, #48	; 0x30
 8009a82:	18e1      	adds	r1, r4, r3
 8009a84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a8e:	4422      	add	r2, r4
 8009a90:	3302      	adds	r3, #2
 8009a92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a96:	e7c5      	b.n	8009a24 <_printf_common+0x58>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4649      	mov	r1, r9
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	47c0      	blx	r8
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d0e6      	beq.n	8009a74 <_printf_common+0xa8>
 8009aa6:	3601      	adds	r6, #1
 8009aa8:	e7d9      	b.n	8009a5e <_printf_common+0x92>
	...

08009aac <_printf_i>:
 8009aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	7e0f      	ldrb	r7, [r1, #24]
 8009ab2:	4691      	mov	r9, r2
 8009ab4:	2f78      	cmp	r7, #120	; 0x78
 8009ab6:	4680      	mov	r8, r0
 8009ab8:	460c      	mov	r4, r1
 8009aba:	469a      	mov	sl, r3
 8009abc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ac2:	d807      	bhi.n	8009ad4 <_printf_i+0x28>
 8009ac4:	2f62      	cmp	r7, #98	; 0x62
 8009ac6:	d80a      	bhi.n	8009ade <_printf_i+0x32>
 8009ac8:	2f00      	cmp	r7, #0
 8009aca:	f000 80d9 	beq.w	8009c80 <_printf_i+0x1d4>
 8009ace:	2f58      	cmp	r7, #88	; 0x58
 8009ad0:	f000 80a4 	beq.w	8009c1c <_printf_i+0x170>
 8009ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009adc:	e03a      	b.n	8009b54 <_printf_i+0xa8>
 8009ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ae2:	2b15      	cmp	r3, #21
 8009ae4:	d8f6      	bhi.n	8009ad4 <_printf_i+0x28>
 8009ae6:	a101      	add	r1, pc, #4	; (adr r1, 8009aec <_printf_i+0x40>)
 8009ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009aec:	08009b45 	.word	0x08009b45
 8009af0:	08009b59 	.word	0x08009b59
 8009af4:	08009ad5 	.word	0x08009ad5
 8009af8:	08009ad5 	.word	0x08009ad5
 8009afc:	08009ad5 	.word	0x08009ad5
 8009b00:	08009ad5 	.word	0x08009ad5
 8009b04:	08009b59 	.word	0x08009b59
 8009b08:	08009ad5 	.word	0x08009ad5
 8009b0c:	08009ad5 	.word	0x08009ad5
 8009b10:	08009ad5 	.word	0x08009ad5
 8009b14:	08009ad5 	.word	0x08009ad5
 8009b18:	08009c67 	.word	0x08009c67
 8009b1c:	08009b89 	.word	0x08009b89
 8009b20:	08009c49 	.word	0x08009c49
 8009b24:	08009ad5 	.word	0x08009ad5
 8009b28:	08009ad5 	.word	0x08009ad5
 8009b2c:	08009c89 	.word	0x08009c89
 8009b30:	08009ad5 	.word	0x08009ad5
 8009b34:	08009b89 	.word	0x08009b89
 8009b38:	08009ad5 	.word	0x08009ad5
 8009b3c:	08009ad5 	.word	0x08009ad5
 8009b40:	08009c51 	.word	0x08009c51
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	1d1a      	adds	r2, r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	602a      	str	r2, [r5, #0]
 8009b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b54:	2301      	movs	r3, #1
 8009b56:	e0a4      	b.n	8009ca2 <_printf_i+0x1f6>
 8009b58:	6820      	ldr	r0, [r4, #0]
 8009b5a:	6829      	ldr	r1, [r5, #0]
 8009b5c:	0606      	lsls	r6, r0, #24
 8009b5e:	f101 0304 	add.w	r3, r1, #4
 8009b62:	d50a      	bpl.n	8009b7a <_printf_i+0xce>
 8009b64:	680e      	ldr	r6, [r1, #0]
 8009b66:	602b      	str	r3, [r5, #0]
 8009b68:	2e00      	cmp	r6, #0
 8009b6a:	da03      	bge.n	8009b74 <_printf_i+0xc8>
 8009b6c:	232d      	movs	r3, #45	; 0x2d
 8009b6e:	4276      	negs	r6, r6
 8009b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b74:	230a      	movs	r3, #10
 8009b76:	485e      	ldr	r0, [pc, #376]	; (8009cf0 <_printf_i+0x244>)
 8009b78:	e019      	b.n	8009bae <_printf_i+0x102>
 8009b7a:	680e      	ldr	r6, [r1, #0]
 8009b7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b80:	602b      	str	r3, [r5, #0]
 8009b82:	bf18      	it	ne
 8009b84:	b236      	sxthne	r6, r6
 8009b86:	e7ef      	b.n	8009b68 <_printf_i+0xbc>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	6820      	ldr	r0, [r4, #0]
 8009b8c:	1d19      	adds	r1, r3, #4
 8009b8e:	6029      	str	r1, [r5, #0]
 8009b90:	0601      	lsls	r1, r0, #24
 8009b92:	d501      	bpl.n	8009b98 <_printf_i+0xec>
 8009b94:	681e      	ldr	r6, [r3, #0]
 8009b96:	e002      	b.n	8009b9e <_printf_i+0xf2>
 8009b98:	0646      	lsls	r6, r0, #25
 8009b9a:	d5fb      	bpl.n	8009b94 <_printf_i+0xe8>
 8009b9c:	881e      	ldrh	r6, [r3, #0]
 8009b9e:	2f6f      	cmp	r7, #111	; 0x6f
 8009ba0:	bf0c      	ite	eq
 8009ba2:	2308      	moveq	r3, #8
 8009ba4:	230a      	movne	r3, #10
 8009ba6:	4852      	ldr	r0, [pc, #328]	; (8009cf0 <_printf_i+0x244>)
 8009ba8:	2100      	movs	r1, #0
 8009baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bae:	6865      	ldr	r5, [r4, #4]
 8009bb0:	2d00      	cmp	r5, #0
 8009bb2:	bfa8      	it	ge
 8009bb4:	6821      	ldrge	r1, [r4, #0]
 8009bb6:	60a5      	str	r5, [r4, #8]
 8009bb8:	bfa4      	itt	ge
 8009bba:	f021 0104 	bicge.w	r1, r1, #4
 8009bbe:	6021      	strge	r1, [r4, #0]
 8009bc0:	b90e      	cbnz	r6, 8009bc6 <_printf_i+0x11a>
 8009bc2:	2d00      	cmp	r5, #0
 8009bc4:	d04d      	beq.n	8009c62 <_printf_i+0x1b6>
 8009bc6:	4615      	mov	r5, r2
 8009bc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bcc:	fb03 6711 	mls	r7, r3, r1, r6
 8009bd0:	5dc7      	ldrb	r7, [r0, r7]
 8009bd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bd6:	4637      	mov	r7, r6
 8009bd8:	42bb      	cmp	r3, r7
 8009bda:	460e      	mov	r6, r1
 8009bdc:	d9f4      	bls.n	8009bc8 <_printf_i+0x11c>
 8009bde:	2b08      	cmp	r3, #8
 8009be0:	d10b      	bne.n	8009bfa <_printf_i+0x14e>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	07de      	lsls	r6, r3, #31
 8009be6:	d508      	bpl.n	8009bfa <_printf_i+0x14e>
 8009be8:	6923      	ldr	r3, [r4, #16]
 8009bea:	6861      	ldr	r1, [r4, #4]
 8009bec:	4299      	cmp	r1, r3
 8009bee:	bfde      	ittt	le
 8009bf0:	2330      	movle	r3, #48	; 0x30
 8009bf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bf6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bfa:	1b52      	subs	r2, r2, r5
 8009bfc:	6122      	str	r2, [r4, #16]
 8009bfe:	464b      	mov	r3, r9
 8009c00:	4621      	mov	r1, r4
 8009c02:	4640      	mov	r0, r8
 8009c04:	f8cd a000 	str.w	sl, [sp]
 8009c08:	aa03      	add	r2, sp, #12
 8009c0a:	f7ff fedf 	bl	80099cc <_printf_common>
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d14c      	bne.n	8009cac <_printf_i+0x200>
 8009c12:	f04f 30ff 	mov.w	r0, #4294967295
 8009c16:	b004      	add	sp, #16
 8009c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1c:	4834      	ldr	r0, [pc, #208]	; (8009cf0 <_printf_i+0x244>)
 8009c1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c22:	6829      	ldr	r1, [r5, #0]
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c2a:	6029      	str	r1, [r5, #0]
 8009c2c:	061d      	lsls	r5, r3, #24
 8009c2e:	d514      	bpl.n	8009c5a <_printf_i+0x1ae>
 8009c30:	07df      	lsls	r7, r3, #31
 8009c32:	bf44      	itt	mi
 8009c34:	f043 0320 	orrmi.w	r3, r3, #32
 8009c38:	6023      	strmi	r3, [r4, #0]
 8009c3a:	b91e      	cbnz	r6, 8009c44 <_printf_i+0x198>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	f023 0320 	bic.w	r3, r3, #32
 8009c42:	6023      	str	r3, [r4, #0]
 8009c44:	2310      	movs	r3, #16
 8009c46:	e7af      	b.n	8009ba8 <_printf_i+0xfc>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	f043 0320 	orr.w	r3, r3, #32
 8009c4e:	6023      	str	r3, [r4, #0]
 8009c50:	2378      	movs	r3, #120	; 0x78
 8009c52:	4828      	ldr	r0, [pc, #160]	; (8009cf4 <_printf_i+0x248>)
 8009c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c58:	e7e3      	b.n	8009c22 <_printf_i+0x176>
 8009c5a:	0659      	lsls	r1, r3, #25
 8009c5c:	bf48      	it	mi
 8009c5e:	b2b6      	uxthmi	r6, r6
 8009c60:	e7e6      	b.n	8009c30 <_printf_i+0x184>
 8009c62:	4615      	mov	r5, r2
 8009c64:	e7bb      	b.n	8009bde <_printf_i+0x132>
 8009c66:	682b      	ldr	r3, [r5, #0]
 8009c68:	6826      	ldr	r6, [r4, #0]
 8009c6a:	1d18      	adds	r0, r3, #4
 8009c6c:	6961      	ldr	r1, [r4, #20]
 8009c6e:	6028      	str	r0, [r5, #0]
 8009c70:	0635      	lsls	r5, r6, #24
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	d501      	bpl.n	8009c7a <_printf_i+0x1ce>
 8009c76:	6019      	str	r1, [r3, #0]
 8009c78:	e002      	b.n	8009c80 <_printf_i+0x1d4>
 8009c7a:	0670      	lsls	r0, r6, #25
 8009c7c:	d5fb      	bpl.n	8009c76 <_printf_i+0x1ca>
 8009c7e:	8019      	strh	r1, [r3, #0]
 8009c80:	2300      	movs	r3, #0
 8009c82:	4615      	mov	r5, r2
 8009c84:	6123      	str	r3, [r4, #16]
 8009c86:	e7ba      	b.n	8009bfe <_printf_i+0x152>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	1d1a      	adds	r2, r3, #4
 8009c8e:	602a      	str	r2, [r5, #0]
 8009c90:	681d      	ldr	r5, [r3, #0]
 8009c92:	6862      	ldr	r2, [r4, #4]
 8009c94:	4628      	mov	r0, r5
 8009c96:	f000 fed5 	bl	800aa44 <memchr>
 8009c9a:	b108      	cbz	r0, 8009ca0 <_printf_i+0x1f4>
 8009c9c:	1b40      	subs	r0, r0, r5
 8009c9e:	6060      	str	r0, [r4, #4]
 8009ca0:	6863      	ldr	r3, [r4, #4]
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009caa:	e7a8      	b.n	8009bfe <_printf_i+0x152>
 8009cac:	462a      	mov	r2, r5
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	6923      	ldr	r3, [r4, #16]
 8009cb4:	47d0      	blx	sl
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	d0ab      	beq.n	8009c12 <_printf_i+0x166>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	079b      	lsls	r3, r3, #30
 8009cbe:	d413      	bmi.n	8009ce8 <_printf_i+0x23c>
 8009cc0:	68e0      	ldr	r0, [r4, #12]
 8009cc2:	9b03      	ldr	r3, [sp, #12]
 8009cc4:	4298      	cmp	r0, r3
 8009cc6:	bfb8      	it	lt
 8009cc8:	4618      	movlt	r0, r3
 8009cca:	e7a4      	b.n	8009c16 <_printf_i+0x16a>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	4632      	mov	r2, r6
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	47d0      	blx	sl
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	d09b      	beq.n	8009c12 <_printf_i+0x166>
 8009cda:	3501      	adds	r5, #1
 8009cdc:	68e3      	ldr	r3, [r4, #12]
 8009cde:	9903      	ldr	r1, [sp, #12]
 8009ce0:	1a5b      	subs	r3, r3, r1
 8009ce2:	42ab      	cmp	r3, r5
 8009ce4:	dcf2      	bgt.n	8009ccc <_printf_i+0x220>
 8009ce6:	e7eb      	b.n	8009cc0 <_printf_i+0x214>
 8009ce8:	2500      	movs	r5, #0
 8009cea:	f104 0619 	add.w	r6, r4, #25
 8009cee:	e7f5      	b.n	8009cdc <_printf_i+0x230>
 8009cf0:	0800c5da 	.word	0x0800c5da
 8009cf4:	0800c5eb 	.word	0x0800c5eb

08009cf8 <siprintf>:
 8009cf8:	b40e      	push	{r1, r2, r3}
 8009cfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009cfe:	b500      	push	{lr}
 8009d00:	b09c      	sub	sp, #112	; 0x70
 8009d02:	ab1d      	add	r3, sp, #116	; 0x74
 8009d04:	9002      	str	r0, [sp, #8]
 8009d06:	9006      	str	r0, [sp, #24]
 8009d08:	9107      	str	r1, [sp, #28]
 8009d0a:	9104      	str	r1, [sp, #16]
 8009d0c:	4808      	ldr	r0, [pc, #32]	; (8009d30 <siprintf+0x38>)
 8009d0e:	4909      	ldr	r1, [pc, #36]	; (8009d34 <siprintf+0x3c>)
 8009d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d14:	9105      	str	r1, [sp, #20]
 8009d16:	6800      	ldr	r0, [r0, #0]
 8009d18:	a902      	add	r1, sp, #8
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	f001 fb7c 	bl	800b418 <_svfiprintf_r>
 8009d20:	2200      	movs	r2, #0
 8009d22:	9b02      	ldr	r3, [sp, #8]
 8009d24:	701a      	strb	r2, [r3, #0]
 8009d26:	b01c      	add	sp, #112	; 0x70
 8009d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d2c:	b003      	add	sp, #12
 8009d2e:	4770      	bx	lr
 8009d30:	20000034 	.word	0x20000034
 8009d34:	ffff0208 	.word	0xffff0208

08009d38 <quorem>:
 8009d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	6903      	ldr	r3, [r0, #16]
 8009d3e:	690c      	ldr	r4, [r1, #16]
 8009d40:	4607      	mov	r7, r0
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	f2c0 8082 	blt.w	8009e4c <quorem+0x114>
 8009d48:	3c01      	subs	r4, #1
 8009d4a:	f100 0514 	add.w	r5, r0, #20
 8009d4e:	f101 0814 	add.w	r8, r1, #20
 8009d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d56:	9301      	str	r3, [sp, #4]
 8009d58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d60:	3301      	adds	r3, #1
 8009d62:	429a      	cmp	r2, r3
 8009d64:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d70:	d331      	bcc.n	8009dd6 <quorem+0x9e>
 8009d72:	f04f 0e00 	mov.w	lr, #0
 8009d76:	4640      	mov	r0, r8
 8009d78:	46ac      	mov	ip, r5
 8009d7a:	46f2      	mov	sl, lr
 8009d7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d80:	b293      	uxth	r3, r2
 8009d82:	fb06 e303 	mla	r3, r6, r3, lr
 8009d86:	0c12      	lsrs	r2, r2, #16
 8009d88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	fb06 e202 	mla	r2, r6, r2, lr
 8009d92:	ebaa 0303 	sub.w	r3, sl, r3
 8009d96:	f8dc a000 	ldr.w	sl, [ip]
 8009d9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d9e:	fa1f fa8a 	uxth.w	sl, sl
 8009da2:	4453      	add	r3, sl
 8009da4:	f8dc a000 	ldr.w	sl, [ip]
 8009da8:	b292      	uxth	r2, r2
 8009daa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009dae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009db8:	4581      	cmp	r9, r0
 8009dba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dbe:	f84c 3b04 	str.w	r3, [ip], #4
 8009dc2:	d2db      	bcs.n	8009d7c <quorem+0x44>
 8009dc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009dc8:	b92b      	cbnz	r3, 8009dd6 <quorem+0x9e>
 8009dca:	9b01      	ldr	r3, [sp, #4]
 8009dcc:	3b04      	subs	r3, #4
 8009dce:	429d      	cmp	r5, r3
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	d32f      	bcc.n	8009e34 <quorem+0xfc>
 8009dd4:	613c      	str	r4, [r7, #16]
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f001 f8ce 	bl	800af78 <__mcmp>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	db25      	blt.n	8009e2c <quorem+0xf4>
 8009de0:	4628      	mov	r0, r5
 8009de2:	f04f 0c00 	mov.w	ip, #0
 8009de6:	3601      	adds	r6, #1
 8009de8:	f858 1b04 	ldr.w	r1, [r8], #4
 8009dec:	f8d0 e000 	ldr.w	lr, [r0]
 8009df0:	b28b      	uxth	r3, r1
 8009df2:	ebac 0303 	sub.w	r3, ip, r3
 8009df6:	fa1f f28e 	uxth.w	r2, lr
 8009dfa:	4413      	add	r3, r2
 8009dfc:	0c0a      	lsrs	r2, r1, #16
 8009dfe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e0c:	45c1      	cmp	r9, r8
 8009e0e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e12:	f840 3b04 	str.w	r3, [r0], #4
 8009e16:	d2e7      	bcs.n	8009de8 <quorem+0xb0>
 8009e18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e20:	b922      	cbnz	r2, 8009e2c <quorem+0xf4>
 8009e22:	3b04      	subs	r3, #4
 8009e24:	429d      	cmp	r5, r3
 8009e26:	461a      	mov	r2, r3
 8009e28:	d30a      	bcc.n	8009e40 <quorem+0x108>
 8009e2a:	613c      	str	r4, [r7, #16]
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	b003      	add	sp, #12
 8009e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	6812      	ldr	r2, [r2, #0]
 8009e36:	3b04      	subs	r3, #4
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	d1cb      	bne.n	8009dd4 <quorem+0x9c>
 8009e3c:	3c01      	subs	r4, #1
 8009e3e:	e7c6      	b.n	8009dce <quorem+0x96>
 8009e40:	6812      	ldr	r2, [r2, #0]
 8009e42:	3b04      	subs	r3, #4
 8009e44:	2a00      	cmp	r2, #0
 8009e46:	d1f0      	bne.n	8009e2a <quorem+0xf2>
 8009e48:	3c01      	subs	r4, #1
 8009e4a:	e7eb      	b.n	8009e24 <quorem+0xec>
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	e7ee      	b.n	8009e2e <quorem+0xf6>

08009e50 <_dtoa_r>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	4616      	mov	r6, r2
 8009e56:	461f      	mov	r7, r3
 8009e58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009e5a:	b099      	sub	sp, #100	; 0x64
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009e62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009e66:	b974      	cbnz	r4, 8009e86 <_dtoa_r+0x36>
 8009e68:	2010      	movs	r0, #16
 8009e6a:	f000 fde3 	bl	800aa34 <malloc>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	6268      	str	r0, [r5, #36]	; 0x24
 8009e72:	b920      	cbnz	r0, 8009e7e <_dtoa_r+0x2e>
 8009e74:	21ea      	movs	r1, #234	; 0xea
 8009e76:	4ba8      	ldr	r3, [pc, #672]	; (800a118 <_dtoa_r+0x2c8>)
 8009e78:	48a8      	ldr	r0, [pc, #672]	; (800a11c <_dtoa_r+0x2cc>)
 8009e7a:	f001 fbdd 	bl	800b638 <__assert_func>
 8009e7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e82:	6004      	str	r4, [r0, #0]
 8009e84:	60c4      	str	r4, [r0, #12]
 8009e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e88:	6819      	ldr	r1, [r3, #0]
 8009e8a:	b151      	cbz	r1, 8009ea2 <_dtoa_r+0x52>
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	2301      	movs	r3, #1
 8009e90:	4093      	lsls	r3, r2
 8009e92:	604a      	str	r2, [r1, #4]
 8009e94:	608b      	str	r3, [r1, #8]
 8009e96:	4628      	mov	r0, r5
 8009e98:	f000 fe30 	bl	800aafc <_Bfree>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ea0:	601a      	str	r2, [r3, #0]
 8009ea2:	1e3b      	subs	r3, r7, #0
 8009ea4:	bfaf      	iteee	ge
 8009ea6:	2300      	movge	r3, #0
 8009ea8:	2201      	movlt	r2, #1
 8009eaa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009eae:	9305      	strlt	r3, [sp, #20]
 8009eb0:	bfa8      	it	ge
 8009eb2:	f8c8 3000 	strge.w	r3, [r8]
 8009eb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009eba:	4b99      	ldr	r3, [pc, #612]	; (800a120 <_dtoa_r+0x2d0>)
 8009ebc:	bfb8      	it	lt
 8009ebe:	f8c8 2000 	strlt.w	r2, [r8]
 8009ec2:	ea33 0309 	bics.w	r3, r3, r9
 8009ec6:	d119      	bne.n	8009efc <_dtoa_r+0xac>
 8009ec8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ecc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ed4:	4333      	orrs	r3, r6
 8009ed6:	f000 857f 	beq.w	800a9d8 <_dtoa_r+0xb88>
 8009eda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009edc:	b953      	cbnz	r3, 8009ef4 <_dtoa_r+0xa4>
 8009ede:	4b91      	ldr	r3, [pc, #580]	; (800a124 <_dtoa_r+0x2d4>)
 8009ee0:	e022      	b.n	8009f28 <_dtoa_r+0xd8>
 8009ee2:	4b91      	ldr	r3, [pc, #580]	; (800a128 <_dtoa_r+0x2d8>)
 8009ee4:	9303      	str	r3, [sp, #12]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	9803      	ldr	r0, [sp, #12]
 8009eee:	b019      	add	sp, #100	; 0x64
 8009ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef4:	4b8b      	ldr	r3, [pc, #556]	; (800a124 <_dtoa_r+0x2d4>)
 8009ef6:	9303      	str	r3, [sp, #12]
 8009ef8:	3303      	adds	r3, #3
 8009efa:	e7f5      	b.n	8009ee8 <_dtoa_r+0x98>
 8009efc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009f00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009f04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f7f6 fd4c 	bl	80009a8 <__aeabi_dcmpeq>
 8009f10:	4680      	mov	r8, r0
 8009f12:	b158      	cbz	r0, 8009f2c <_dtoa_r+0xdc>
 8009f14:	2301      	movs	r3, #1
 8009f16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 8558 	beq.w	800a9d2 <_dtoa_r+0xb82>
 8009f22:	4882      	ldr	r0, [pc, #520]	; (800a12c <_dtoa_r+0x2dc>)
 8009f24:	6018      	str	r0, [r3, #0]
 8009f26:	1e43      	subs	r3, r0, #1
 8009f28:	9303      	str	r3, [sp, #12]
 8009f2a:	e7df      	b.n	8009eec <_dtoa_r+0x9c>
 8009f2c:	ab16      	add	r3, sp, #88	; 0x58
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	ab17      	add	r3, sp, #92	; 0x5c
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	4628      	mov	r0, r5
 8009f36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009f3a:	f001 f8c5 	bl	800b0c8 <__d2b>
 8009f3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009f42:	4683      	mov	fp, r0
 8009f44:	2c00      	cmp	r4, #0
 8009f46:	d07f      	beq.n	800a048 <_dtoa_r+0x1f8>
 8009f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009f52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009f5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009f5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009f62:	2200      	movs	r2, #0
 8009f64:	4b72      	ldr	r3, [pc, #456]	; (800a130 <_dtoa_r+0x2e0>)
 8009f66:	f7f6 f8ff 	bl	8000168 <__aeabi_dsub>
 8009f6a:	a365      	add	r3, pc, #404	; (adr r3, 800a100 <_dtoa_r+0x2b0>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7f6 fab2 	bl	80004d8 <__aeabi_dmul>
 8009f74:	a364      	add	r3, pc, #400	; (adr r3, 800a108 <_dtoa_r+0x2b8>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f8f7 	bl	800016c <__adddf3>
 8009f7e:	4606      	mov	r6, r0
 8009f80:	4620      	mov	r0, r4
 8009f82:	460f      	mov	r7, r1
 8009f84:	f7f6 fa3e 	bl	8000404 <__aeabi_i2d>
 8009f88:	a361      	add	r3, pc, #388	; (adr r3, 800a110 <_dtoa_r+0x2c0>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 faa3 	bl	80004d8 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 f8e7 	bl	800016c <__adddf3>
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460f      	mov	r7, r1
 8009fa2:	f7f6 fd49 	bl	8000a38 <__aeabi_d2iz>
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	4682      	mov	sl, r0
 8009faa:	2300      	movs	r3, #0
 8009fac:	4630      	mov	r0, r6
 8009fae:	4639      	mov	r1, r7
 8009fb0:	f7f6 fd04 	bl	80009bc <__aeabi_dcmplt>
 8009fb4:	b148      	cbz	r0, 8009fca <_dtoa_r+0x17a>
 8009fb6:	4650      	mov	r0, sl
 8009fb8:	f7f6 fa24 	bl	8000404 <__aeabi_i2d>
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	463b      	mov	r3, r7
 8009fc0:	f7f6 fcf2 	bl	80009a8 <__aeabi_dcmpeq>
 8009fc4:	b908      	cbnz	r0, 8009fca <_dtoa_r+0x17a>
 8009fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fca:	f1ba 0f16 	cmp.w	sl, #22
 8009fce:	d858      	bhi.n	800a082 <_dtoa_r+0x232>
 8009fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fd4:	4b57      	ldr	r3, [pc, #348]	; (800a134 <_dtoa_r+0x2e4>)
 8009fd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 fced 	bl	80009bc <__aeabi_dcmplt>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d04f      	beq.n	800a086 <_dtoa_r+0x236>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ff0:	1b1c      	subs	r4, r3, r4
 8009ff2:	1e63      	subs	r3, r4, #1
 8009ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff6:	bf49      	itett	mi
 8009ff8:	f1c4 0301 	rsbmi	r3, r4, #1
 8009ffc:	2300      	movpl	r3, #0
 8009ffe:	9306      	strmi	r3, [sp, #24]
 800a000:	2300      	movmi	r3, #0
 800a002:	bf54      	ite	pl
 800a004:	9306      	strpl	r3, [sp, #24]
 800a006:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a008:	f1ba 0f00 	cmp.w	sl, #0
 800a00c:	db3d      	blt.n	800a08a <_dtoa_r+0x23a>
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a014:	4453      	add	r3, sl
 800a016:	9309      	str	r3, [sp, #36]	; 0x24
 800a018:	2300      	movs	r3, #0
 800a01a:	930a      	str	r3, [sp, #40]	; 0x28
 800a01c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a01e:	2b09      	cmp	r3, #9
 800a020:	f200 808c 	bhi.w	800a13c <_dtoa_r+0x2ec>
 800a024:	2b05      	cmp	r3, #5
 800a026:	bfc4      	itt	gt
 800a028:	3b04      	subgt	r3, #4
 800a02a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a02c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a02e:	bfc8      	it	gt
 800a030:	2400      	movgt	r4, #0
 800a032:	f1a3 0302 	sub.w	r3, r3, #2
 800a036:	bfd8      	it	le
 800a038:	2401      	movle	r4, #1
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	f200 808a 	bhi.w	800a154 <_dtoa_r+0x304>
 800a040:	e8df f003 	tbb	[pc, r3]
 800a044:	5b4d4f2d 	.word	0x5b4d4f2d
 800a048:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a04c:	441c      	add	r4, r3
 800a04e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a052:	2b20      	cmp	r3, #32
 800a054:	bfc3      	ittte	gt
 800a056:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a05a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a05e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a062:	f1c3 0320 	rsble	r3, r3, #32
 800a066:	bfc6      	itte	gt
 800a068:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a06c:	4318      	orrgt	r0, r3
 800a06e:	fa06 f003 	lslle.w	r0, r6, r3
 800a072:	f7f6 f9b7 	bl	80003e4 <__aeabi_ui2d>
 800a076:	2301      	movs	r3, #1
 800a078:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a07c:	3c01      	subs	r4, #1
 800a07e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a080:	e76f      	b.n	8009f62 <_dtoa_r+0x112>
 800a082:	2301      	movs	r3, #1
 800a084:	e7b2      	b.n	8009fec <_dtoa_r+0x19c>
 800a086:	900f      	str	r0, [sp, #60]	; 0x3c
 800a088:	e7b1      	b.n	8009fee <_dtoa_r+0x19e>
 800a08a:	9b06      	ldr	r3, [sp, #24]
 800a08c:	eba3 030a 	sub.w	r3, r3, sl
 800a090:	9306      	str	r3, [sp, #24]
 800a092:	f1ca 0300 	rsb	r3, sl, #0
 800a096:	930a      	str	r3, [sp, #40]	; 0x28
 800a098:	2300      	movs	r3, #0
 800a09a:	930e      	str	r3, [sp, #56]	; 0x38
 800a09c:	e7be      	b.n	800a01c <_dtoa_r+0x1cc>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	dc58      	bgt.n	800a15a <_dtoa_r+0x30a>
 800a0a8:	f04f 0901 	mov.w	r9, #1
 800a0ac:	464b      	mov	r3, r9
 800a0ae:	f8cd 9020 	str.w	r9, [sp, #32]
 800a0b2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a0ba:	6042      	str	r2, [r0, #4]
 800a0bc:	2204      	movs	r2, #4
 800a0be:	f102 0614 	add.w	r6, r2, #20
 800a0c2:	429e      	cmp	r6, r3
 800a0c4:	6841      	ldr	r1, [r0, #4]
 800a0c6:	d94e      	bls.n	800a166 <_dtoa_r+0x316>
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	f000 fcd7 	bl	800aa7c <_Balloc>
 800a0ce:	9003      	str	r0, [sp, #12]
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d14c      	bne.n	800a16e <_dtoa_r+0x31e>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a0da:	4b17      	ldr	r3, [pc, #92]	; (800a138 <_dtoa_r+0x2e8>)
 800a0dc:	e6cc      	b.n	8009e78 <_dtoa_r+0x28>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e7de      	b.n	800a0a0 <_dtoa_r+0x250>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0e8:	eb0a 0903 	add.w	r9, sl, r3
 800a0ec:	f109 0301 	add.w	r3, r9, #1
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	9308      	str	r3, [sp, #32]
 800a0f4:	bfb8      	it	lt
 800a0f6:	2301      	movlt	r3, #1
 800a0f8:	e7dd      	b.n	800a0b6 <_dtoa_r+0x266>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e7f2      	b.n	800a0e4 <_dtoa_r+0x294>
 800a0fe:	bf00      	nop
 800a100:	636f4361 	.word	0x636f4361
 800a104:	3fd287a7 	.word	0x3fd287a7
 800a108:	8b60c8b3 	.word	0x8b60c8b3
 800a10c:	3fc68a28 	.word	0x3fc68a28
 800a110:	509f79fb 	.word	0x509f79fb
 800a114:	3fd34413 	.word	0x3fd34413
 800a118:	0800c609 	.word	0x0800c609
 800a11c:	0800c620 	.word	0x0800c620
 800a120:	7ff00000 	.word	0x7ff00000
 800a124:	0800c605 	.word	0x0800c605
 800a128:	0800c5fc 	.word	0x0800c5fc
 800a12c:	0800c5d9 	.word	0x0800c5d9
 800a130:	3ff80000 	.word	0x3ff80000
 800a134:	0800c710 	.word	0x0800c710
 800a138:	0800c67b 	.word	0x0800c67b
 800a13c:	2401      	movs	r4, #1
 800a13e:	2300      	movs	r3, #0
 800a140:	940b      	str	r4, [sp, #44]	; 0x2c
 800a142:	9322      	str	r3, [sp, #136]	; 0x88
 800a144:	f04f 39ff 	mov.w	r9, #4294967295
 800a148:	2200      	movs	r2, #0
 800a14a:	2312      	movs	r3, #18
 800a14c:	f8cd 9020 	str.w	r9, [sp, #32]
 800a150:	9223      	str	r2, [sp, #140]	; 0x8c
 800a152:	e7b0      	b.n	800a0b6 <_dtoa_r+0x266>
 800a154:	2301      	movs	r3, #1
 800a156:	930b      	str	r3, [sp, #44]	; 0x2c
 800a158:	e7f4      	b.n	800a144 <_dtoa_r+0x2f4>
 800a15a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a15e:	464b      	mov	r3, r9
 800a160:	f8cd 9020 	str.w	r9, [sp, #32]
 800a164:	e7a7      	b.n	800a0b6 <_dtoa_r+0x266>
 800a166:	3101      	adds	r1, #1
 800a168:	6041      	str	r1, [r0, #4]
 800a16a:	0052      	lsls	r2, r2, #1
 800a16c:	e7a7      	b.n	800a0be <_dtoa_r+0x26e>
 800a16e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a170:	9a03      	ldr	r2, [sp, #12]
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	9b08      	ldr	r3, [sp, #32]
 800a176:	2b0e      	cmp	r3, #14
 800a178:	f200 80a8 	bhi.w	800a2cc <_dtoa_r+0x47c>
 800a17c:	2c00      	cmp	r4, #0
 800a17e:	f000 80a5 	beq.w	800a2cc <_dtoa_r+0x47c>
 800a182:	f1ba 0f00 	cmp.w	sl, #0
 800a186:	dd34      	ble.n	800a1f2 <_dtoa_r+0x3a2>
 800a188:	4a9a      	ldr	r2, [pc, #616]	; (800a3f4 <_dtoa_r+0x5a4>)
 800a18a:	f00a 030f 	and.w	r3, sl, #15
 800a18e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a192:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a196:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a19a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a19e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a1a2:	d016      	beq.n	800a1d2 <_dtoa_r+0x382>
 800a1a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1a8:	4b93      	ldr	r3, [pc, #588]	; (800a3f8 <_dtoa_r+0x5a8>)
 800a1aa:	2703      	movs	r7, #3
 800a1ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1b0:	f7f6 fabc 	bl	800072c <__aeabi_ddiv>
 800a1b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1b8:	f004 040f 	and.w	r4, r4, #15
 800a1bc:	4e8e      	ldr	r6, [pc, #568]	; (800a3f8 <_dtoa_r+0x5a8>)
 800a1be:	b954      	cbnz	r4, 800a1d6 <_dtoa_r+0x386>
 800a1c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1c8:	f7f6 fab0 	bl	800072c <__aeabi_ddiv>
 800a1cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1d0:	e029      	b.n	800a226 <_dtoa_r+0x3d6>
 800a1d2:	2702      	movs	r7, #2
 800a1d4:	e7f2      	b.n	800a1bc <_dtoa_r+0x36c>
 800a1d6:	07e1      	lsls	r1, r4, #31
 800a1d8:	d508      	bpl.n	800a1ec <_dtoa_r+0x39c>
 800a1da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1ea:	3701      	adds	r7, #1
 800a1ec:	1064      	asrs	r4, r4, #1
 800a1ee:	3608      	adds	r6, #8
 800a1f0:	e7e5      	b.n	800a1be <_dtoa_r+0x36e>
 800a1f2:	f000 80a5 	beq.w	800a340 <_dtoa_r+0x4f0>
 800a1f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1fa:	f1ca 0400 	rsb	r4, sl, #0
 800a1fe:	4b7d      	ldr	r3, [pc, #500]	; (800a3f4 <_dtoa_r+0x5a4>)
 800a200:	f004 020f 	and.w	r2, r4, #15
 800a204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20c:	f7f6 f964 	bl	80004d8 <__aeabi_dmul>
 800a210:	2702      	movs	r7, #2
 800a212:	2300      	movs	r3, #0
 800a214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a218:	4e77      	ldr	r6, [pc, #476]	; (800a3f8 <_dtoa_r+0x5a8>)
 800a21a:	1124      	asrs	r4, r4, #4
 800a21c:	2c00      	cmp	r4, #0
 800a21e:	f040 8084 	bne.w	800a32a <_dtoa_r+0x4da>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1d2      	bne.n	800a1cc <_dtoa_r+0x37c>
 800a226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 808b 	beq.w	800a344 <_dtoa_r+0x4f4>
 800a22e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a232:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a236:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a23a:	2200      	movs	r2, #0
 800a23c:	4b6f      	ldr	r3, [pc, #444]	; (800a3fc <_dtoa_r+0x5ac>)
 800a23e:	f7f6 fbbd 	bl	80009bc <__aeabi_dcmplt>
 800a242:	2800      	cmp	r0, #0
 800a244:	d07e      	beq.n	800a344 <_dtoa_r+0x4f4>
 800a246:	9b08      	ldr	r3, [sp, #32]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d07b      	beq.n	800a344 <_dtoa_r+0x4f4>
 800a24c:	f1b9 0f00 	cmp.w	r9, #0
 800a250:	dd38      	ble.n	800a2c4 <_dtoa_r+0x474>
 800a252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a256:	2200      	movs	r2, #0
 800a258:	4b69      	ldr	r3, [pc, #420]	; (800a400 <_dtoa_r+0x5b0>)
 800a25a:	f7f6 f93d 	bl	80004d8 <__aeabi_dmul>
 800a25e:	464c      	mov	r4, r9
 800a260:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a264:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a268:	3701      	adds	r7, #1
 800a26a:	4638      	mov	r0, r7
 800a26c:	f7f6 f8ca 	bl	8000404 <__aeabi_i2d>
 800a270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a274:	f7f6 f930 	bl	80004d8 <__aeabi_dmul>
 800a278:	2200      	movs	r2, #0
 800a27a:	4b62      	ldr	r3, [pc, #392]	; (800a404 <_dtoa_r+0x5b4>)
 800a27c:	f7f5 ff76 	bl	800016c <__adddf3>
 800a280:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a284:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a288:	9611      	str	r6, [sp, #68]	; 0x44
 800a28a:	2c00      	cmp	r4, #0
 800a28c:	d15d      	bne.n	800a34a <_dtoa_r+0x4fa>
 800a28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a292:	2200      	movs	r2, #0
 800a294:	4b5c      	ldr	r3, [pc, #368]	; (800a408 <_dtoa_r+0x5b8>)
 800a296:	f7f5 ff67 	bl	8000168 <__aeabi_dsub>
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2a2:	4633      	mov	r3, r6
 800a2a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2a6:	f7f6 fba7 	bl	80009f8 <__aeabi_dcmpgt>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	f040 829c 	bne.w	800a7e8 <_dtoa_r+0x998>
 800a2b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2b6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a2ba:	f7f6 fb7f 	bl	80009bc <__aeabi_dcmplt>
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f040 8290 	bne.w	800a7e4 <_dtoa_r+0x994>
 800a2c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a2c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a2cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f2c0 8152 	blt.w	800a578 <_dtoa_r+0x728>
 800a2d4:	f1ba 0f0e 	cmp.w	sl, #14
 800a2d8:	f300 814e 	bgt.w	800a578 <_dtoa_r+0x728>
 800a2dc:	4b45      	ldr	r3, [pc, #276]	; (800a3f4 <_dtoa_r+0x5a4>)
 800a2de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a2e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2e6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a2ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f280 80db 	bge.w	800a4a8 <_dtoa_r+0x658>
 800a2f2:	9b08      	ldr	r3, [sp, #32]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f300 80d7 	bgt.w	800a4a8 <_dtoa_r+0x658>
 800a2fa:	f040 8272 	bne.w	800a7e2 <_dtoa_r+0x992>
 800a2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a302:	2200      	movs	r2, #0
 800a304:	4b40      	ldr	r3, [pc, #256]	; (800a408 <_dtoa_r+0x5b8>)
 800a306:	f7f6 f8e7 	bl	80004d8 <__aeabi_dmul>
 800a30a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a30e:	f7f6 fb69 	bl	80009e4 <__aeabi_dcmpge>
 800a312:	9c08      	ldr	r4, [sp, #32]
 800a314:	4626      	mov	r6, r4
 800a316:	2800      	cmp	r0, #0
 800a318:	f040 8248 	bne.w	800a7ac <_dtoa_r+0x95c>
 800a31c:	2331      	movs	r3, #49	; 0x31
 800a31e:	9f03      	ldr	r7, [sp, #12]
 800a320:	f10a 0a01 	add.w	sl, sl, #1
 800a324:	f807 3b01 	strb.w	r3, [r7], #1
 800a328:	e244      	b.n	800a7b4 <_dtoa_r+0x964>
 800a32a:	07e2      	lsls	r2, r4, #31
 800a32c:	d505      	bpl.n	800a33a <_dtoa_r+0x4ea>
 800a32e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a332:	f7f6 f8d1 	bl	80004d8 <__aeabi_dmul>
 800a336:	2301      	movs	r3, #1
 800a338:	3701      	adds	r7, #1
 800a33a:	1064      	asrs	r4, r4, #1
 800a33c:	3608      	adds	r6, #8
 800a33e:	e76d      	b.n	800a21c <_dtoa_r+0x3cc>
 800a340:	2702      	movs	r7, #2
 800a342:	e770      	b.n	800a226 <_dtoa_r+0x3d6>
 800a344:	46d0      	mov	r8, sl
 800a346:	9c08      	ldr	r4, [sp, #32]
 800a348:	e78f      	b.n	800a26a <_dtoa_r+0x41a>
 800a34a:	9903      	ldr	r1, [sp, #12]
 800a34c:	4b29      	ldr	r3, [pc, #164]	; (800a3f4 <_dtoa_r+0x5a4>)
 800a34e:	4421      	add	r1, r4
 800a350:	9112      	str	r1, [sp, #72]	; 0x48
 800a352:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a354:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a358:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a35c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a360:	2900      	cmp	r1, #0
 800a362:	d055      	beq.n	800a410 <_dtoa_r+0x5c0>
 800a364:	2000      	movs	r0, #0
 800a366:	4929      	ldr	r1, [pc, #164]	; (800a40c <_dtoa_r+0x5bc>)
 800a368:	f7f6 f9e0 	bl	800072c <__aeabi_ddiv>
 800a36c:	463b      	mov	r3, r7
 800a36e:	4632      	mov	r2, r6
 800a370:	f7f5 fefa 	bl	8000168 <__aeabi_dsub>
 800a374:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a378:	9f03      	ldr	r7, [sp, #12]
 800a37a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a37e:	f7f6 fb5b 	bl	8000a38 <__aeabi_d2iz>
 800a382:	4604      	mov	r4, r0
 800a384:	f7f6 f83e 	bl	8000404 <__aeabi_i2d>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a390:	f7f5 feea 	bl	8000168 <__aeabi_dsub>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	3430      	adds	r4, #48	; 0x30
 800a39a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a39e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a3a2:	f807 4b01 	strb.w	r4, [r7], #1
 800a3a6:	f7f6 fb09 	bl	80009bc <__aeabi_dcmplt>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d174      	bne.n	800a498 <_dtoa_r+0x648>
 800a3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	4911      	ldr	r1, [pc, #68]	; (800a3fc <_dtoa_r+0x5ac>)
 800a3b6:	f7f5 fed7 	bl	8000168 <__aeabi_dsub>
 800a3ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a3be:	f7f6 fafd 	bl	80009bc <__aeabi_dcmplt>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	f040 80b7 	bne.w	800a536 <_dtoa_r+0x6e6>
 800a3c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3ca:	429f      	cmp	r7, r3
 800a3cc:	f43f af7a 	beq.w	800a2c4 <_dtoa_r+0x474>
 800a3d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <_dtoa_r+0x5b0>)
 800a3d8:	f7f6 f87e 	bl	80004d8 <__aeabi_dmul>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3e6:	4b06      	ldr	r3, [pc, #24]	; (800a400 <_dtoa_r+0x5b0>)
 800a3e8:	f7f6 f876 	bl	80004d8 <__aeabi_dmul>
 800a3ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3f0:	e7c3      	b.n	800a37a <_dtoa_r+0x52a>
 800a3f2:	bf00      	nop
 800a3f4:	0800c710 	.word	0x0800c710
 800a3f8:	0800c6e8 	.word	0x0800c6e8
 800a3fc:	3ff00000 	.word	0x3ff00000
 800a400:	40240000 	.word	0x40240000
 800a404:	401c0000 	.word	0x401c0000
 800a408:	40140000 	.word	0x40140000
 800a40c:	3fe00000 	.word	0x3fe00000
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	f7f6 f860 	bl	80004d8 <__aeabi_dmul>
 800a418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a41a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a41e:	9c03      	ldr	r4, [sp, #12]
 800a420:	9314      	str	r3, [sp, #80]	; 0x50
 800a422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a426:	f7f6 fb07 	bl	8000a38 <__aeabi_d2iz>
 800a42a:	9015      	str	r0, [sp, #84]	; 0x54
 800a42c:	f7f5 ffea 	bl	8000404 <__aeabi_i2d>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a438:	f7f5 fe96 	bl	8000168 <__aeabi_dsub>
 800a43c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a43e:	4606      	mov	r6, r0
 800a440:	3330      	adds	r3, #48	; 0x30
 800a442:	f804 3b01 	strb.w	r3, [r4], #1
 800a446:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a448:	460f      	mov	r7, r1
 800a44a:	429c      	cmp	r4, r3
 800a44c:	f04f 0200 	mov.w	r2, #0
 800a450:	d124      	bne.n	800a49c <_dtoa_r+0x64c>
 800a452:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a456:	4bb0      	ldr	r3, [pc, #704]	; (800a718 <_dtoa_r+0x8c8>)
 800a458:	f7f5 fe88 	bl	800016c <__adddf3>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fac8 	bl	80009f8 <__aeabi_dcmpgt>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d163      	bne.n	800a534 <_dtoa_r+0x6e4>
 800a46c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a470:	2000      	movs	r0, #0
 800a472:	49a9      	ldr	r1, [pc, #676]	; (800a718 <_dtoa_r+0x8c8>)
 800a474:	f7f5 fe78 	bl	8000168 <__aeabi_dsub>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4630      	mov	r0, r6
 800a47e:	4639      	mov	r1, r7
 800a480:	f7f6 fa9c 	bl	80009bc <__aeabi_dcmplt>
 800a484:	2800      	cmp	r0, #0
 800a486:	f43f af1d 	beq.w	800a2c4 <_dtoa_r+0x474>
 800a48a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a48c:	1e7b      	subs	r3, r7, #1
 800a48e:	9314      	str	r3, [sp, #80]	; 0x50
 800a490:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a494:	2b30      	cmp	r3, #48	; 0x30
 800a496:	d0f8      	beq.n	800a48a <_dtoa_r+0x63a>
 800a498:	46c2      	mov	sl, r8
 800a49a:	e03b      	b.n	800a514 <_dtoa_r+0x6c4>
 800a49c:	4b9f      	ldr	r3, [pc, #636]	; (800a71c <_dtoa_r+0x8cc>)
 800a49e:	f7f6 f81b 	bl	80004d8 <__aeabi_dmul>
 800a4a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4a6:	e7bc      	b.n	800a422 <_dtoa_r+0x5d2>
 800a4a8:	9f03      	ldr	r7, [sp, #12]
 800a4aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a4ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	4649      	mov	r1, r9
 800a4b6:	f7f6 f939 	bl	800072c <__aeabi_ddiv>
 800a4ba:	f7f6 fabd 	bl	8000a38 <__aeabi_d2iz>
 800a4be:	4604      	mov	r4, r0
 800a4c0:	f7f5 ffa0 	bl	8000404 <__aeabi_i2d>
 800a4c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4c8:	f7f6 f806 	bl	80004d8 <__aeabi_dmul>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4640      	mov	r0, r8
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	f7f5 fe48 	bl	8000168 <__aeabi_dsub>
 800a4d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a4dc:	f807 6b01 	strb.w	r6, [r7], #1
 800a4e0:	9e03      	ldr	r6, [sp, #12]
 800a4e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a4e6:	1bbe      	subs	r6, r7, r6
 800a4e8:	45b4      	cmp	ip, r6
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	d136      	bne.n	800a55e <_dtoa_r+0x70e>
 800a4f0:	f7f5 fe3c 	bl	800016c <__adddf3>
 800a4f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4f8:	4680      	mov	r8, r0
 800a4fa:	4689      	mov	r9, r1
 800a4fc:	f7f6 fa7c 	bl	80009f8 <__aeabi_dcmpgt>
 800a500:	bb58      	cbnz	r0, 800a55a <_dtoa_r+0x70a>
 800a502:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f7f6 fa4d 	bl	80009a8 <__aeabi_dcmpeq>
 800a50e:	b108      	cbz	r0, 800a514 <_dtoa_r+0x6c4>
 800a510:	07e1      	lsls	r1, r4, #31
 800a512:	d422      	bmi.n	800a55a <_dtoa_r+0x70a>
 800a514:	4628      	mov	r0, r5
 800a516:	4659      	mov	r1, fp
 800a518:	f000 faf0 	bl	800aafc <_Bfree>
 800a51c:	2300      	movs	r3, #0
 800a51e:	703b      	strb	r3, [r7, #0]
 800a520:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a522:	f10a 0001 	add.w	r0, sl, #1
 800a526:	6018      	str	r0, [r3, #0]
 800a528:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f43f acde 	beq.w	8009eec <_dtoa_r+0x9c>
 800a530:	601f      	str	r7, [r3, #0]
 800a532:	e4db      	b.n	8009eec <_dtoa_r+0x9c>
 800a534:	4627      	mov	r7, r4
 800a536:	463b      	mov	r3, r7
 800a538:	461f      	mov	r7, r3
 800a53a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a53e:	2a39      	cmp	r2, #57	; 0x39
 800a540:	d107      	bne.n	800a552 <_dtoa_r+0x702>
 800a542:	9a03      	ldr	r2, [sp, #12]
 800a544:	429a      	cmp	r2, r3
 800a546:	d1f7      	bne.n	800a538 <_dtoa_r+0x6e8>
 800a548:	2230      	movs	r2, #48	; 0x30
 800a54a:	9903      	ldr	r1, [sp, #12]
 800a54c:	f108 0801 	add.w	r8, r8, #1
 800a550:	700a      	strb	r2, [r1, #0]
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	3201      	adds	r2, #1
 800a556:	701a      	strb	r2, [r3, #0]
 800a558:	e79e      	b.n	800a498 <_dtoa_r+0x648>
 800a55a:	46d0      	mov	r8, sl
 800a55c:	e7eb      	b.n	800a536 <_dtoa_r+0x6e6>
 800a55e:	2200      	movs	r2, #0
 800a560:	4b6e      	ldr	r3, [pc, #440]	; (800a71c <_dtoa_r+0x8cc>)
 800a562:	f7f5 ffb9 	bl	80004d8 <__aeabi_dmul>
 800a566:	2200      	movs	r2, #0
 800a568:	2300      	movs	r3, #0
 800a56a:	4680      	mov	r8, r0
 800a56c:	4689      	mov	r9, r1
 800a56e:	f7f6 fa1b 	bl	80009a8 <__aeabi_dcmpeq>
 800a572:	2800      	cmp	r0, #0
 800a574:	d09b      	beq.n	800a4ae <_dtoa_r+0x65e>
 800a576:	e7cd      	b.n	800a514 <_dtoa_r+0x6c4>
 800a578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	f000 80d0 	beq.w	800a720 <_dtoa_r+0x8d0>
 800a580:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a582:	2a01      	cmp	r2, #1
 800a584:	f300 80ae 	bgt.w	800a6e4 <_dtoa_r+0x894>
 800a588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a58a:	2a00      	cmp	r2, #0
 800a58c:	f000 80a6 	beq.w	800a6dc <_dtoa_r+0x88c>
 800a590:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a594:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a596:	9f06      	ldr	r7, [sp, #24]
 800a598:	9a06      	ldr	r2, [sp, #24]
 800a59a:	2101      	movs	r1, #1
 800a59c:	441a      	add	r2, r3
 800a59e:	9206      	str	r2, [sp, #24]
 800a5a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	441a      	add	r2, r3
 800a5a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a8:	f000 fb5e 	bl	800ac68 <__i2b>
 800a5ac:	4606      	mov	r6, r0
 800a5ae:	2f00      	cmp	r7, #0
 800a5b0:	dd0c      	ble.n	800a5cc <_dtoa_r+0x77c>
 800a5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dd09      	ble.n	800a5cc <_dtoa_r+0x77c>
 800a5b8:	42bb      	cmp	r3, r7
 800a5ba:	bfa8      	it	ge
 800a5bc:	463b      	movge	r3, r7
 800a5be:	9a06      	ldr	r2, [sp, #24]
 800a5c0:	1aff      	subs	r7, r7, r3
 800a5c2:	1ad2      	subs	r2, r2, r3
 800a5c4:	9206      	str	r2, [sp, #24]
 800a5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ce:	b1f3      	cbz	r3, 800a60e <_dtoa_r+0x7be>
 800a5d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f000 80a8 	beq.w	800a728 <_dtoa_r+0x8d8>
 800a5d8:	2c00      	cmp	r4, #0
 800a5da:	dd10      	ble.n	800a5fe <_dtoa_r+0x7ae>
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4622      	mov	r2, r4
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f000 fbff 	bl	800ade4 <__pow5mult>
 800a5e6:	465a      	mov	r2, fp
 800a5e8:	4601      	mov	r1, r0
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	f000 fb51 	bl	800ac94 <__multiply>
 800a5f2:	4680      	mov	r8, r0
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 fa80 	bl	800aafc <_Bfree>
 800a5fc:	46c3      	mov	fp, r8
 800a5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a600:	1b1a      	subs	r2, r3, r4
 800a602:	d004      	beq.n	800a60e <_dtoa_r+0x7be>
 800a604:	4659      	mov	r1, fp
 800a606:	4628      	mov	r0, r5
 800a608:	f000 fbec 	bl	800ade4 <__pow5mult>
 800a60c:	4683      	mov	fp, r0
 800a60e:	2101      	movs	r1, #1
 800a610:	4628      	mov	r0, r5
 800a612:	f000 fb29 	bl	800ac68 <__i2b>
 800a616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a618:	4604      	mov	r4, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f340 8086 	ble.w	800a72c <_dtoa_r+0x8dc>
 800a620:	461a      	mov	r2, r3
 800a622:	4601      	mov	r1, r0
 800a624:	4628      	mov	r0, r5
 800a626:	f000 fbdd 	bl	800ade4 <__pow5mult>
 800a62a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a62c:	4604      	mov	r4, r0
 800a62e:	2b01      	cmp	r3, #1
 800a630:	dd7f      	ble.n	800a732 <_dtoa_r+0x8e2>
 800a632:	f04f 0800 	mov.w	r8, #0
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a63c:	6918      	ldr	r0, [r3, #16]
 800a63e:	f000 fac5 	bl	800abcc <__hi0bits>
 800a642:	f1c0 0020 	rsb	r0, r0, #32
 800a646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a648:	4418      	add	r0, r3
 800a64a:	f010 001f 	ands.w	r0, r0, #31
 800a64e:	f000 8092 	beq.w	800a776 <_dtoa_r+0x926>
 800a652:	f1c0 0320 	rsb	r3, r0, #32
 800a656:	2b04      	cmp	r3, #4
 800a658:	f340 808a 	ble.w	800a770 <_dtoa_r+0x920>
 800a65c:	f1c0 001c 	rsb	r0, r0, #28
 800a660:	9b06      	ldr	r3, [sp, #24]
 800a662:	4407      	add	r7, r0
 800a664:	4403      	add	r3, r0
 800a666:	9306      	str	r3, [sp, #24]
 800a668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a66a:	4403      	add	r3, r0
 800a66c:	9309      	str	r3, [sp, #36]	; 0x24
 800a66e:	9b06      	ldr	r3, [sp, #24]
 800a670:	2b00      	cmp	r3, #0
 800a672:	dd05      	ble.n	800a680 <_dtoa_r+0x830>
 800a674:	4659      	mov	r1, fp
 800a676:	461a      	mov	r2, r3
 800a678:	4628      	mov	r0, r5
 800a67a:	f000 fc0d 	bl	800ae98 <__lshift>
 800a67e:	4683      	mov	fp, r0
 800a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a682:	2b00      	cmp	r3, #0
 800a684:	dd05      	ble.n	800a692 <_dtoa_r+0x842>
 800a686:	4621      	mov	r1, r4
 800a688:	461a      	mov	r2, r3
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 fc04 	bl	800ae98 <__lshift>
 800a690:	4604      	mov	r4, r0
 800a692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a694:	2b00      	cmp	r3, #0
 800a696:	d070      	beq.n	800a77a <_dtoa_r+0x92a>
 800a698:	4621      	mov	r1, r4
 800a69a:	4658      	mov	r0, fp
 800a69c:	f000 fc6c 	bl	800af78 <__mcmp>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	da6a      	bge.n	800a77a <_dtoa_r+0x92a>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4659      	mov	r1, fp
 800a6a8:	220a      	movs	r2, #10
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f000 fa48 	bl	800ab40 <__multadd>
 800a6b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6b2:	4683      	mov	fp, r0
 800a6b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 8194 	beq.w	800a9e6 <_dtoa_r+0xb96>
 800a6be:	4631      	mov	r1, r6
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	220a      	movs	r2, #10
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f000 fa3b 	bl	800ab40 <__multadd>
 800a6ca:	f1b9 0f00 	cmp.w	r9, #0
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	f300 8093 	bgt.w	800a7fa <_dtoa_r+0x9aa>
 800a6d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	dc57      	bgt.n	800a78a <_dtoa_r+0x93a>
 800a6da:	e08e      	b.n	800a7fa <_dtoa_r+0x9aa>
 800a6dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a6de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a6e2:	e757      	b.n	800a594 <_dtoa_r+0x744>
 800a6e4:	9b08      	ldr	r3, [sp, #32]
 800a6e6:	1e5c      	subs	r4, r3, #1
 800a6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ea:	42a3      	cmp	r3, r4
 800a6ec:	bfb7      	itett	lt
 800a6ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a6f0:	1b1c      	subge	r4, r3, r4
 800a6f2:	1ae2      	sublt	r2, r4, r3
 800a6f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a6f6:	bfbe      	ittt	lt
 800a6f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a6fa:	189b      	addlt	r3, r3, r2
 800a6fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a6fe:	9b08      	ldr	r3, [sp, #32]
 800a700:	bfb8      	it	lt
 800a702:	2400      	movlt	r4, #0
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfbb      	ittet	lt
 800a708:	9b06      	ldrlt	r3, [sp, #24]
 800a70a:	9a08      	ldrlt	r2, [sp, #32]
 800a70c:	9f06      	ldrge	r7, [sp, #24]
 800a70e:	1a9f      	sublt	r7, r3, r2
 800a710:	bfac      	ite	ge
 800a712:	9b08      	ldrge	r3, [sp, #32]
 800a714:	2300      	movlt	r3, #0
 800a716:	e73f      	b.n	800a598 <_dtoa_r+0x748>
 800a718:	3fe00000 	.word	0x3fe00000
 800a71c:	40240000 	.word	0x40240000
 800a720:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a722:	9f06      	ldr	r7, [sp, #24]
 800a724:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a726:	e742      	b.n	800a5ae <_dtoa_r+0x75e>
 800a728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a72a:	e76b      	b.n	800a604 <_dtoa_r+0x7b4>
 800a72c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a72e:	2b01      	cmp	r3, #1
 800a730:	dc19      	bgt.n	800a766 <_dtoa_r+0x916>
 800a732:	9b04      	ldr	r3, [sp, #16]
 800a734:	b9bb      	cbnz	r3, 800a766 <_dtoa_r+0x916>
 800a736:	9b05      	ldr	r3, [sp, #20]
 800a738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a73c:	b99b      	cbnz	r3, 800a766 <_dtoa_r+0x916>
 800a73e:	9b05      	ldr	r3, [sp, #20]
 800a740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a744:	0d1b      	lsrs	r3, r3, #20
 800a746:	051b      	lsls	r3, r3, #20
 800a748:	b183      	cbz	r3, 800a76c <_dtoa_r+0x91c>
 800a74a:	f04f 0801 	mov.w	r8, #1
 800a74e:	9b06      	ldr	r3, [sp, #24]
 800a750:	3301      	adds	r3, #1
 800a752:	9306      	str	r3, [sp, #24]
 800a754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a756:	3301      	adds	r3, #1
 800a758:	9309      	str	r3, [sp, #36]	; 0x24
 800a75a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f47f af6a 	bne.w	800a636 <_dtoa_r+0x7e6>
 800a762:	2001      	movs	r0, #1
 800a764:	e76f      	b.n	800a646 <_dtoa_r+0x7f6>
 800a766:	f04f 0800 	mov.w	r8, #0
 800a76a:	e7f6      	b.n	800a75a <_dtoa_r+0x90a>
 800a76c:	4698      	mov	r8, r3
 800a76e:	e7f4      	b.n	800a75a <_dtoa_r+0x90a>
 800a770:	f43f af7d 	beq.w	800a66e <_dtoa_r+0x81e>
 800a774:	4618      	mov	r0, r3
 800a776:	301c      	adds	r0, #28
 800a778:	e772      	b.n	800a660 <_dtoa_r+0x810>
 800a77a:	9b08      	ldr	r3, [sp, #32]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dc36      	bgt.n	800a7ee <_dtoa_r+0x99e>
 800a780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a782:	2b02      	cmp	r3, #2
 800a784:	dd33      	ble.n	800a7ee <_dtoa_r+0x99e>
 800a786:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a78a:	f1b9 0f00 	cmp.w	r9, #0
 800a78e:	d10d      	bne.n	800a7ac <_dtoa_r+0x95c>
 800a790:	4621      	mov	r1, r4
 800a792:	464b      	mov	r3, r9
 800a794:	2205      	movs	r2, #5
 800a796:	4628      	mov	r0, r5
 800a798:	f000 f9d2 	bl	800ab40 <__multadd>
 800a79c:	4601      	mov	r1, r0
 800a79e:	4604      	mov	r4, r0
 800a7a0:	4658      	mov	r0, fp
 800a7a2:	f000 fbe9 	bl	800af78 <__mcmp>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	f73f adb8 	bgt.w	800a31c <_dtoa_r+0x4cc>
 800a7ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a7ae:	9f03      	ldr	r7, [sp, #12]
 800a7b0:	ea6f 0a03 	mvn.w	sl, r3
 800a7b4:	f04f 0800 	mov.w	r8, #0
 800a7b8:	4621      	mov	r1, r4
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f000 f99e 	bl	800aafc <_Bfree>
 800a7c0:	2e00      	cmp	r6, #0
 800a7c2:	f43f aea7 	beq.w	800a514 <_dtoa_r+0x6c4>
 800a7c6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ca:	d005      	beq.n	800a7d8 <_dtoa_r+0x988>
 800a7cc:	45b0      	cmp	r8, r6
 800a7ce:	d003      	beq.n	800a7d8 <_dtoa_r+0x988>
 800a7d0:	4641      	mov	r1, r8
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f000 f992 	bl	800aafc <_Bfree>
 800a7d8:	4631      	mov	r1, r6
 800a7da:	4628      	mov	r0, r5
 800a7dc:	f000 f98e 	bl	800aafc <_Bfree>
 800a7e0:	e698      	b.n	800a514 <_dtoa_r+0x6c4>
 800a7e2:	2400      	movs	r4, #0
 800a7e4:	4626      	mov	r6, r4
 800a7e6:	e7e1      	b.n	800a7ac <_dtoa_r+0x95c>
 800a7e8:	46c2      	mov	sl, r8
 800a7ea:	4626      	mov	r6, r4
 800a7ec:	e596      	b.n	800a31c <_dtoa_r+0x4cc>
 800a7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 80fd 	beq.w	800a9f4 <_dtoa_r+0xba4>
 800a7fa:	2f00      	cmp	r7, #0
 800a7fc:	dd05      	ble.n	800a80a <_dtoa_r+0x9ba>
 800a7fe:	4631      	mov	r1, r6
 800a800:	463a      	mov	r2, r7
 800a802:	4628      	mov	r0, r5
 800a804:	f000 fb48 	bl	800ae98 <__lshift>
 800a808:	4606      	mov	r6, r0
 800a80a:	f1b8 0f00 	cmp.w	r8, #0
 800a80e:	d05c      	beq.n	800a8ca <_dtoa_r+0xa7a>
 800a810:	4628      	mov	r0, r5
 800a812:	6871      	ldr	r1, [r6, #4]
 800a814:	f000 f932 	bl	800aa7c <_Balloc>
 800a818:	4607      	mov	r7, r0
 800a81a:	b928      	cbnz	r0, 800a828 <_dtoa_r+0x9d8>
 800a81c:	4602      	mov	r2, r0
 800a81e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a822:	4b7f      	ldr	r3, [pc, #508]	; (800aa20 <_dtoa_r+0xbd0>)
 800a824:	f7ff bb28 	b.w	8009e78 <_dtoa_r+0x28>
 800a828:	6932      	ldr	r2, [r6, #16]
 800a82a:	f106 010c 	add.w	r1, r6, #12
 800a82e:	3202      	adds	r2, #2
 800a830:	0092      	lsls	r2, r2, #2
 800a832:	300c      	adds	r0, #12
 800a834:	f000 f914 	bl	800aa60 <memcpy>
 800a838:	2201      	movs	r2, #1
 800a83a:	4639      	mov	r1, r7
 800a83c:	4628      	mov	r0, r5
 800a83e:	f000 fb2b 	bl	800ae98 <__lshift>
 800a842:	46b0      	mov	r8, r6
 800a844:	4606      	mov	r6, r0
 800a846:	9b03      	ldr	r3, [sp, #12]
 800a848:	3301      	adds	r3, #1
 800a84a:	9308      	str	r3, [sp, #32]
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	444b      	add	r3, r9
 800a850:	930a      	str	r3, [sp, #40]	; 0x28
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	9309      	str	r3, [sp, #36]	; 0x24
 800a85a:	9b08      	ldr	r3, [sp, #32]
 800a85c:	4621      	mov	r1, r4
 800a85e:	3b01      	subs	r3, #1
 800a860:	4658      	mov	r0, fp
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	f7ff fa68 	bl	8009d38 <quorem>
 800a868:	4603      	mov	r3, r0
 800a86a:	4641      	mov	r1, r8
 800a86c:	3330      	adds	r3, #48	; 0x30
 800a86e:	9006      	str	r0, [sp, #24]
 800a870:	4658      	mov	r0, fp
 800a872:	930b      	str	r3, [sp, #44]	; 0x2c
 800a874:	f000 fb80 	bl	800af78 <__mcmp>
 800a878:	4632      	mov	r2, r6
 800a87a:	4681      	mov	r9, r0
 800a87c:	4621      	mov	r1, r4
 800a87e:	4628      	mov	r0, r5
 800a880:	f000 fb96 	bl	800afb0 <__mdiff>
 800a884:	68c2      	ldr	r2, [r0, #12]
 800a886:	4607      	mov	r7, r0
 800a888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a88a:	bb02      	cbnz	r2, 800a8ce <_dtoa_r+0xa7e>
 800a88c:	4601      	mov	r1, r0
 800a88e:	4658      	mov	r0, fp
 800a890:	f000 fb72 	bl	800af78 <__mcmp>
 800a894:	4602      	mov	r2, r0
 800a896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a898:	4639      	mov	r1, r7
 800a89a:	4628      	mov	r0, r5
 800a89c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a8a0:	f000 f92c 	bl	800aafc <_Bfree>
 800a8a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8a8:	9f08      	ldr	r7, [sp, #32]
 800a8aa:	ea43 0102 	orr.w	r1, r3, r2
 800a8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8b4:	d10d      	bne.n	800a8d2 <_dtoa_r+0xa82>
 800a8b6:	2b39      	cmp	r3, #57	; 0x39
 800a8b8:	d029      	beq.n	800a90e <_dtoa_r+0xabe>
 800a8ba:	f1b9 0f00 	cmp.w	r9, #0
 800a8be:	dd01      	ble.n	800a8c4 <_dtoa_r+0xa74>
 800a8c0:	9b06      	ldr	r3, [sp, #24]
 800a8c2:	3331      	adds	r3, #49	; 0x31
 800a8c4:	9a04      	ldr	r2, [sp, #16]
 800a8c6:	7013      	strb	r3, [r2, #0]
 800a8c8:	e776      	b.n	800a7b8 <_dtoa_r+0x968>
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	e7b9      	b.n	800a842 <_dtoa_r+0x9f2>
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	e7e2      	b.n	800a898 <_dtoa_r+0xa48>
 800a8d2:	f1b9 0f00 	cmp.w	r9, #0
 800a8d6:	db06      	blt.n	800a8e6 <_dtoa_r+0xa96>
 800a8d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a8da:	ea41 0909 	orr.w	r9, r1, r9
 800a8de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8e0:	ea59 0101 	orrs.w	r1, r9, r1
 800a8e4:	d120      	bne.n	800a928 <_dtoa_r+0xad8>
 800a8e6:	2a00      	cmp	r2, #0
 800a8e8:	ddec      	ble.n	800a8c4 <_dtoa_r+0xa74>
 800a8ea:	4659      	mov	r1, fp
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	9308      	str	r3, [sp, #32]
 800a8f2:	f000 fad1 	bl	800ae98 <__lshift>
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4683      	mov	fp, r0
 800a8fa:	f000 fb3d 	bl	800af78 <__mcmp>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	9b08      	ldr	r3, [sp, #32]
 800a902:	dc02      	bgt.n	800a90a <_dtoa_r+0xaba>
 800a904:	d1de      	bne.n	800a8c4 <_dtoa_r+0xa74>
 800a906:	07da      	lsls	r2, r3, #31
 800a908:	d5dc      	bpl.n	800a8c4 <_dtoa_r+0xa74>
 800a90a:	2b39      	cmp	r3, #57	; 0x39
 800a90c:	d1d8      	bne.n	800a8c0 <_dtoa_r+0xa70>
 800a90e:	2339      	movs	r3, #57	; 0x39
 800a910:	9a04      	ldr	r2, [sp, #16]
 800a912:	7013      	strb	r3, [r2, #0]
 800a914:	463b      	mov	r3, r7
 800a916:	461f      	mov	r7, r3
 800a918:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a91c:	3b01      	subs	r3, #1
 800a91e:	2a39      	cmp	r2, #57	; 0x39
 800a920:	d050      	beq.n	800a9c4 <_dtoa_r+0xb74>
 800a922:	3201      	adds	r2, #1
 800a924:	701a      	strb	r2, [r3, #0]
 800a926:	e747      	b.n	800a7b8 <_dtoa_r+0x968>
 800a928:	2a00      	cmp	r2, #0
 800a92a:	dd03      	ble.n	800a934 <_dtoa_r+0xae4>
 800a92c:	2b39      	cmp	r3, #57	; 0x39
 800a92e:	d0ee      	beq.n	800a90e <_dtoa_r+0xabe>
 800a930:	3301      	adds	r3, #1
 800a932:	e7c7      	b.n	800a8c4 <_dtoa_r+0xa74>
 800a934:	9a08      	ldr	r2, [sp, #32]
 800a936:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a938:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a93c:	428a      	cmp	r2, r1
 800a93e:	d02a      	beq.n	800a996 <_dtoa_r+0xb46>
 800a940:	4659      	mov	r1, fp
 800a942:	2300      	movs	r3, #0
 800a944:	220a      	movs	r2, #10
 800a946:	4628      	mov	r0, r5
 800a948:	f000 f8fa 	bl	800ab40 <__multadd>
 800a94c:	45b0      	cmp	r8, r6
 800a94e:	4683      	mov	fp, r0
 800a950:	f04f 0300 	mov.w	r3, #0
 800a954:	f04f 020a 	mov.w	r2, #10
 800a958:	4641      	mov	r1, r8
 800a95a:	4628      	mov	r0, r5
 800a95c:	d107      	bne.n	800a96e <_dtoa_r+0xb1e>
 800a95e:	f000 f8ef 	bl	800ab40 <__multadd>
 800a962:	4680      	mov	r8, r0
 800a964:	4606      	mov	r6, r0
 800a966:	9b08      	ldr	r3, [sp, #32]
 800a968:	3301      	adds	r3, #1
 800a96a:	9308      	str	r3, [sp, #32]
 800a96c:	e775      	b.n	800a85a <_dtoa_r+0xa0a>
 800a96e:	f000 f8e7 	bl	800ab40 <__multadd>
 800a972:	4631      	mov	r1, r6
 800a974:	4680      	mov	r8, r0
 800a976:	2300      	movs	r3, #0
 800a978:	220a      	movs	r2, #10
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 f8e0 	bl	800ab40 <__multadd>
 800a980:	4606      	mov	r6, r0
 800a982:	e7f0      	b.n	800a966 <_dtoa_r+0xb16>
 800a984:	f1b9 0f00 	cmp.w	r9, #0
 800a988:	bfcc      	ite	gt
 800a98a:	464f      	movgt	r7, r9
 800a98c:	2701      	movle	r7, #1
 800a98e:	f04f 0800 	mov.w	r8, #0
 800a992:	9a03      	ldr	r2, [sp, #12]
 800a994:	4417      	add	r7, r2
 800a996:	4659      	mov	r1, fp
 800a998:	2201      	movs	r2, #1
 800a99a:	4628      	mov	r0, r5
 800a99c:	9308      	str	r3, [sp, #32]
 800a99e:	f000 fa7b 	bl	800ae98 <__lshift>
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4683      	mov	fp, r0
 800a9a6:	f000 fae7 	bl	800af78 <__mcmp>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	dcb2      	bgt.n	800a914 <_dtoa_r+0xac4>
 800a9ae:	d102      	bne.n	800a9b6 <_dtoa_r+0xb66>
 800a9b0:	9b08      	ldr	r3, [sp, #32]
 800a9b2:	07db      	lsls	r3, r3, #31
 800a9b4:	d4ae      	bmi.n	800a914 <_dtoa_r+0xac4>
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	461f      	mov	r7, r3
 800a9ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9be:	2a30      	cmp	r2, #48	; 0x30
 800a9c0:	d0fa      	beq.n	800a9b8 <_dtoa_r+0xb68>
 800a9c2:	e6f9      	b.n	800a7b8 <_dtoa_r+0x968>
 800a9c4:	9a03      	ldr	r2, [sp, #12]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d1a5      	bne.n	800a916 <_dtoa_r+0xac6>
 800a9ca:	2331      	movs	r3, #49	; 0x31
 800a9cc:	f10a 0a01 	add.w	sl, sl, #1
 800a9d0:	e779      	b.n	800a8c6 <_dtoa_r+0xa76>
 800a9d2:	4b14      	ldr	r3, [pc, #80]	; (800aa24 <_dtoa_r+0xbd4>)
 800a9d4:	f7ff baa8 	b.w	8009f28 <_dtoa_r+0xd8>
 800a9d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f47f aa81 	bne.w	8009ee2 <_dtoa_r+0x92>
 800a9e0:	4b11      	ldr	r3, [pc, #68]	; (800aa28 <_dtoa_r+0xbd8>)
 800a9e2:	f7ff baa1 	b.w	8009f28 <_dtoa_r+0xd8>
 800a9e6:	f1b9 0f00 	cmp.w	r9, #0
 800a9ea:	dc03      	bgt.n	800a9f4 <_dtoa_r+0xba4>
 800a9ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	f73f aecb 	bgt.w	800a78a <_dtoa_r+0x93a>
 800a9f4:	9f03      	ldr	r7, [sp, #12]
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4658      	mov	r0, fp
 800a9fa:	f7ff f99d 	bl	8009d38 <quorem>
 800a9fe:	9a03      	ldr	r2, [sp, #12]
 800aa00:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aa04:	f807 3b01 	strb.w	r3, [r7], #1
 800aa08:	1aba      	subs	r2, r7, r2
 800aa0a:	4591      	cmp	r9, r2
 800aa0c:	ddba      	ble.n	800a984 <_dtoa_r+0xb34>
 800aa0e:	4659      	mov	r1, fp
 800aa10:	2300      	movs	r3, #0
 800aa12:	220a      	movs	r2, #10
 800aa14:	4628      	mov	r0, r5
 800aa16:	f000 f893 	bl	800ab40 <__multadd>
 800aa1a:	4683      	mov	fp, r0
 800aa1c:	e7eb      	b.n	800a9f6 <_dtoa_r+0xba6>
 800aa1e:	bf00      	nop
 800aa20:	0800c67b 	.word	0x0800c67b
 800aa24:	0800c5d8 	.word	0x0800c5d8
 800aa28:	0800c5fc 	.word	0x0800c5fc

0800aa2c <_localeconv_r>:
 800aa2c:	4800      	ldr	r0, [pc, #0]	; (800aa30 <_localeconv_r+0x4>)
 800aa2e:	4770      	bx	lr
 800aa30:	20000188 	.word	0x20000188

0800aa34 <malloc>:
 800aa34:	4b02      	ldr	r3, [pc, #8]	; (800aa40 <malloc+0xc>)
 800aa36:	4601      	mov	r1, r0
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	f000 bc1d 	b.w	800b278 <_malloc_r>
 800aa3e:	bf00      	nop
 800aa40:	20000034 	.word	0x20000034

0800aa44 <memchr>:
 800aa44:	4603      	mov	r3, r0
 800aa46:	b510      	push	{r4, lr}
 800aa48:	b2c9      	uxtb	r1, r1
 800aa4a:	4402      	add	r2, r0
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	4618      	mov	r0, r3
 800aa50:	d101      	bne.n	800aa56 <memchr+0x12>
 800aa52:	2000      	movs	r0, #0
 800aa54:	e003      	b.n	800aa5e <memchr+0x1a>
 800aa56:	7804      	ldrb	r4, [r0, #0]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	428c      	cmp	r4, r1
 800aa5c:	d1f6      	bne.n	800aa4c <memchr+0x8>
 800aa5e:	bd10      	pop	{r4, pc}

0800aa60 <memcpy>:
 800aa60:	440a      	add	r2, r1
 800aa62:	4291      	cmp	r1, r2
 800aa64:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa68:	d100      	bne.n	800aa6c <memcpy+0xc>
 800aa6a:	4770      	bx	lr
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa72:	4291      	cmp	r1, r2
 800aa74:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa78:	d1f9      	bne.n	800aa6e <memcpy+0xe>
 800aa7a:	bd10      	pop	{r4, pc}

0800aa7c <_Balloc>:
 800aa7c:	b570      	push	{r4, r5, r6, lr}
 800aa7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa80:	4604      	mov	r4, r0
 800aa82:	460d      	mov	r5, r1
 800aa84:	b976      	cbnz	r6, 800aaa4 <_Balloc+0x28>
 800aa86:	2010      	movs	r0, #16
 800aa88:	f7ff ffd4 	bl	800aa34 <malloc>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	6260      	str	r0, [r4, #36]	; 0x24
 800aa90:	b920      	cbnz	r0, 800aa9c <_Balloc+0x20>
 800aa92:	2166      	movs	r1, #102	; 0x66
 800aa94:	4b17      	ldr	r3, [pc, #92]	; (800aaf4 <_Balloc+0x78>)
 800aa96:	4818      	ldr	r0, [pc, #96]	; (800aaf8 <_Balloc+0x7c>)
 800aa98:	f000 fdce 	bl	800b638 <__assert_func>
 800aa9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaa0:	6006      	str	r6, [r0, #0]
 800aaa2:	60c6      	str	r6, [r0, #12]
 800aaa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aaa6:	68f3      	ldr	r3, [r6, #12]
 800aaa8:	b183      	cbz	r3, 800aacc <_Balloc+0x50>
 800aaaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aab2:	b9b8      	cbnz	r0, 800aae4 <_Balloc+0x68>
 800aab4:	2101      	movs	r1, #1
 800aab6:	fa01 f605 	lsl.w	r6, r1, r5
 800aaba:	1d72      	adds	r2, r6, #5
 800aabc:	4620      	mov	r0, r4
 800aabe:	0092      	lsls	r2, r2, #2
 800aac0:	f000 fb5e 	bl	800b180 <_calloc_r>
 800aac4:	b160      	cbz	r0, 800aae0 <_Balloc+0x64>
 800aac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaca:	e00e      	b.n	800aaea <_Balloc+0x6e>
 800aacc:	2221      	movs	r2, #33	; 0x21
 800aace:	2104      	movs	r1, #4
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 fb55 	bl	800b180 <_calloc_r>
 800aad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aad8:	60f0      	str	r0, [r6, #12]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1e4      	bne.n	800aaaa <_Balloc+0x2e>
 800aae0:	2000      	movs	r0, #0
 800aae2:	bd70      	pop	{r4, r5, r6, pc}
 800aae4:	6802      	ldr	r2, [r0, #0]
 800aae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaea:	2300      	movs	r3, #0
 800aaec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aaf0:	e7f7      	b.n	800aae2 <_Balloc+0x66>
 800aaf2:	bf00      	nop
 800aaf4:	0800c609 	.word	0x0800c609
 800aaf8:	0800c68c 	.word	0x0800c68c

0800aafc <_Bfree>:
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab00:	4605      	mov	r5, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	b976      	cbnz	r6, 800ab24 <_Bfree+0x28>
 800ab06:	2010      	movs	r0, #16
 800ab08:	f7ff ff94 	bl	800aa34 <malloc>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6268      	str	r0, [r5, #36]	; 0x24
 800ab10:	b920      	cbnz	r0, 800ab1c <_Bfree+0x20>
 800ab12:	218a      	movs	r1, #138	; 0x8a
 800ab14:	4b08      	ldr	r3, [pc, #32]	; (800ab38 <_Bfree+0x3c>)
 800ab16:	4809      	ldr	r0, [pc, #36]	; (800ab3c <_Bfree+0x40>)
 800ab18:	f000 fd8e 	bl	800b638 <__assert_func>
 800ab1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab20:	6006      	str	r6, [r0, #0]
 800ab22:	60c6      	str	r6, [r0, #12]
 800ab24:	b13c      	cbz	r4, 800ab36 <_Bfree+0x3a>
 800ab26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab28:	6862      	ldr	r2, [r4, #4]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab30:	6021      	str	r1, [r4, #0]
 800ab32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	0800c609 	.word	0x0800c609
 800ab3c:	0800c68c 	.word	0x0800c68c

0800ab40 <__multadd>:
 800ab40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab44:	4607      	mov	r7, r0
 800ab46:	460c      	mov	r4, r1
 800ab48:	461e      	mov	r6, r3
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	690d      	ldr	r5, [r1, #16]
 800ab4e:	f101 0c14 	add.w	ip, r1, #20
 800ab52:	f8dc 3000 	ldr.w	r3, [ip]
 800ab56:	3001      	adds	r0, #1
 800ab58:	b299      	uxth	r1, r3
 800ab5a:	fb02 6101 	mla	r1, r2, r1, r6
 800ab5e:	0c1e      	lsrs	r6, r3, #16
 800ab60:	0c0b      	lsrs	r3, r1, #16
 800ab62:	fb02 3306 	mla	r3, r2, r6, r3
 800ab66:	b289      	uxth	r1, r1
 800ab68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab6c:	4285      	cmp	r5, r0
 800ab6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab72:	f84c 1b04 	str.w	r1, [ip], #4
 800ab76:	dcec      	bgt.n	800ab52 <__multadd+0x12>
 800ab78:	b30e      	cbz	r6, 800abbe <__multadd+0x7e>
 800ab7a:	68a3      	ldr	r3, [r4, #8]
 800ab7c:	42ab      	cmp	r3, r5
 800ab7e:	dc19      	bgt.n	800abb4 <__multadd+0x74>
 800ab80:	6861      	ldr	r1, [r4, #4]
 800ab82:	4638      	mov	r0, r7
 800ab84:	3101      	adds	r1, #1
 800ab86:	f7ff ff79 	bl	800aa7c <_Balloc>
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	b928      	cbnz	r0, 800ab9a <__multadd+0x5a>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	21b5      	movs	r1, #181	; 0xb5
 800ab92:	4b0c      	ldr	r3, [pc, #48]	; (800abc4 <__multadd+0x84>)
 800ab94:	480c      	ldr	r0, [pc, #48]	; (800abc8 <__multadd+0x88>)
 800ab96:	f000 fd4f 	bl	800b638 <__assert_func>
 800ab9a:	6922      	ldr	r2, [r4, #16]
 800ab9c:	f104 010c 	add.w	r1, r4, #12
 800aba0:	3202      	adds	r2, #2
 800aba2:	0092      	lsls	r2, r2, #2
 800aba4:	300c      	adds	r0, #12
 800aba6:	f7ff ff5b 	bl	800aa60 <memcpy>
 800abaa:	4621      	mov	r1, r4
 800abac:	4638      	mov	r0, r7
 800abae:	f7ff ffa5 	bl	800aafc <_Bfree>
 800abb2:	4644      	mov	r4, r8
 800abb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abb8:	3501      	adds	r5, #1
 800abba:	615e      	str	r6, [r3, #20]
 800abbc:	6125      	str	r5, [r4, #16]
 800abbe:	4620      	mov	r0, r4
 800abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc4:	0800c67b 	.word	0x0800c67b
 800abc8:	0800c68c 	.word	0x0800c68c

0800abcc <__hi0bits>:
 800abcc:	0c02      	lsrs	r2, r0, #16
 800abce:	0412      	lsls	r2, r2, #16
 800abd0:	4603      	mov	r3, r0
 800abd2:	b9ca      	cbnz	r2, 800ac08 <__hi0bits+0x3c>
 800abd4:	0403      	lsls	r3, r0, #16
 800abd6:	2010      	movs	r0, #16
 800abd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800abdc:	bf04      	itt	eq
 800abde:	021b      	lsleq	r3, r3, #8
 800abe0:	3008      	addeq	r0, #8
 800abe2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800abe6:	bf04      	itt	eq
 800abe8:	011b      	lsleq	r3, r3, #4
 800abea:	3004      	addeq	r0, #4
 800abec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800abf0:	bf04      	itt	eq
 800abf2:	009b      	lsleq	r3, r3, #2
 800abf4:	3002      	addeq	r0, #2
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	db05      	blt.n	800ac06 <__hi0bits+0x3a>
 800abfa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800abfe:	f100 0001 	add.w	r0, r0, #1
 800ac02:	bf08      	it	eq
 800ac04:	2020      	moveq	r0, #32
 800ac06:	4770      	bx	lr
 800ac08:	2000      	movs	r0, #0
 800ac0a:	e7e5      	b.n	800abd8 <__hi0bits+0xc>

0800ac0c <__lo0bits>:
 800ac0c:	6803      	ldr	r3, [r0, #0]
 800ac0e:	4602      	mov	r2, r0
 800ac10:	f013 0007 	ands.w	r0, r3, #7
 800ac14:	d00b      	beq.n	800ac2e <__lo0bits+0x22>
 800ac16:	07d9      	lsls	r1, r3, #31
 800ac18:	d421      	bmi.n	800ac5e <__lo0bits+0x52>
 800ac1a:	0798      	lsls	r0, r3, #30
 800ac1c:	bf49      	itett	mi
 800ac1e:	085b      	lsrmi	r3, r3, #1
 800ac20:	089b      	lsrpl	r3, r3, #2
 800ac22:	2001      	movmi	r0, #1
 800ac24:	6013      	strmi	r3, [r2, #0]
 800ac26:	bf5c      	itt	pl
 800ac28:	2002      	movpl	r0, #2
 800ac2a:	6013      	strpl	r3, [r2, #0]
 800ac2c:	4770      	bx	lr
 800ac2e:	b299      	uxth	r1, r3
 800ac30:	b909      	cbnz	r1, 800ac36 <__lo0bits+0x2a>
 800ac32:	2010      	movs	r0, #16
 800ac34:	0c1b      	lsrs	r3, r3, #16
 800ac36:	b2d9      	uxtb	r1, r3
 800ac38:	b909      	cbnz	r1, 800ac3e <__lo0bits+0x32>
 800ac3a:	3008      	adds	r0, #8
 800ac3c:	0a1b      	lsrs	r3, r3, #8
 800ac3e:	0719      	lsls	r1, r3, #28
 800ac40:	bf04      	itt	eq
 800ac42:	091b      	lsreq	r3, r3, #4
 800ac44:	3004      	addeq	r0, #4
 800ac46:	0799      	lsls	r1, r3, #30
 800ac48:	bf04      	itt	eq
 800ac4a:	089b      	lsreq	r3, r3, #2
 800ac4c:	3002      	addeq	r0, #2
 800ac4e:	07d9      	lsls	r1, r3, #31
 800ac50:	d403      	bmi.n	800ac5a <__lo0bits+0x4e>
 800ac52:	085b      	lsrs	r3, r3, #1
 800ac54:	f100 0001 	add.w	r0, r0, #1
 800ac58:	d003      	beq.n	800ac62 <__lo0bits+0x56>
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	4770      	bx	lr
 800ac5e:	2000      	movs	r0, #0
 800ac60:	4770      	bx	lr
 800ac62:	2020      	movs	r0, #32
 800ac64:	4770      	bx	lr
	...

0800ac68 <__i2b>:
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	2101      	movs	r1, #1
 800ac6e:	f7ff ff05 	bl	800aa7c <_Balloc>
 800ac72:	4602      	mov	r2, r0
 800ac74:	b928      	cbnz	r0, 800ac82 <__i2b+0x1a>
 800ac76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac7a:	4b04      	ldr	r3, [pc, #16]	; (800ac8c <__i2b+0x24>)
 800ac7c:	4804      	ldr	r0, [pc, #16]	; (800ac90 <__i2b+0x28>)
 800ac7e:	f000 fcdb 	bl	800b638 <__assert_func>
 800ac82:	2301      	movs	r3, #1
 800ac84:	6144      	str	r4, [r0, #20]
 800ac86:	6103      	str	r3, [r0, #16]
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	bf00      	nop
 800ac8c:	0800c67b 	.word	0x0800c67b
 800ac90:	0800c68c 	.word	0x0800c68c

0800ac94 <__multiply>:
 800ac94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	4691      	mov	r9, r2
 800ac9a:	690a      	ldr	r2, [r1, #16]
 800ac9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aca0:	460c      	mov	r4, r1
 800aca2:	429a      	cmp	r2, r3
 800aca4:	bfbe      	ittt	lt
 800aca6:	460b      	movlt	r3, r1
 800aca8:	464c      	movlt	r4, r9
 800acaa:	4699      	movlt	r9, r3
 800acac:	6927      	ldr	r7, [r4, #16]
 800acae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	6861      	ldr	r1, [r4, #4]
 800acb6:	eb07 060a 	add.w	r6, r7, sl
 800acba:	42b3      	cmp	r3, r6
 800acbc:	b085      	sub	sp, #20
 800acbe:	bfb8      	it	lt
 800acc0:	3101      	addlt	r1, #1
 800acc2:	f7ff fedb 	bl	800aa7c <_Balloc>
 800acc6:	b930      	cbnz	r0, 800acd6 <__multiply+0x42>
 800acc8:	4602      	mov	r2, r0
 800acca:	f240 115d 	movw	r1, #349	; 0x15d
 800acce:	4b43      	ldr	r3, [pc, #268]	; (800addc <__multiply+0x148>)
 800acd0:	4843      	ldr	r0, [pc, #268]	; (800ade0 <__multiply+0x14c>)
 800acd2:	f000 fcb1 	bl	800b638 <__assert_func>
 800acd6:	f100 0514 	add.w	r5, r0, #20
 800acda:	462b      	mov	r3, r5
 800acdc:	2200      	movs	r2, #0
 800acde:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ace2:	4543      	cmp	r3, r8
 800ace4:	d321      	bcc.n	800ad2a <__multiply+0x96>
 800ace6:	f104 0314 	add.w	r3, r4, #20
 800acea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800acee:	f109 0314 	add.w	r3, r9, #20
 800acf2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800acf6:	9202      	str	r2, [sp, #8]
 800acf8:	1b3a      	subs	r2, r7, r4
 800acfa:	3a15      	subs	r2, #21
 800acfc:	f022 0203 	bic.w	r2, r2, #3
 800ad00:	3204      	adds	r2, #4
 800ad02:	f104 0115 	add.w	r1, r4, #21
 800ad06:	428f      	cmp	r7, r1
 800ad08:	bf38      	it	cc
 800ad0a:	2204      	movcc	r2, #4
 800ad0c:	9201      	str	r2, [sp, #4]
 800ad0e:	9a02      	ldr	r2, [sp, #8]
 800ad10:	9303      	str	r3, [sp, #12]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d80c      	bhi.n	800ad30 <__multiply+0x9c>
 800ad16:	2e00      	cmp	r6, #0
 800ad18:	dd03      	ble.n	800ad22 <__multiply+0x8e>
 800ad1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d059      	beq.n	800add6 <__multiply+0x142>
 800ad22:	6106      	str	r6, [r0, #16]
 800ad24:	b005      	add	sp, #20
 800ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2a:	f843 2b04 	str.w	r2, [r3], #4
 800ad2e:	e7d8      	b.n	800ace2 <__multiply+0x4e>
 800ad30:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad34:	f1ba 0f00 	cmp.w	sl, #0
 800ad38:	d023      	beq.n	800ad82 <__multiply+0xee>
 800ad3a:	46a9      	mov	r9, r5
 800ad3c:	f04f 0c00 	mov.w	ip, #0
 800ad40:	f104 0e14 	add.w	lr, r4, #20
 800ad44:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad48:	f8d9 1000 	ldr.w	r1, [r9]
 800ad4c:	fa1f fb82 	uxth.w	fp, r2
 800ad50:	b289      	uxth	r1, r1
 800ad52:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad56:	4461      	add	r1, ip
 800ad58:	f8d9 c000 	ldr.w	ip, [r9]
 800ad5c:	0c12      	lsrs	r2, r2, #16
 800ad5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ad62:	fb0a c202 	mla	r2, sl, r2, ip
 800ad66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad6a:	b289      	uxth	r1, r1
 800ad6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad70:	4577      	cmp	r7, lr
 800ad72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad76:	f849 1b04 	str.w	r1, [r9], #4
 800ad7a:	d8e3      	bhi.n	800ad44 <__multiply+0xb0>
 800ad7c:	9a01      	ldr	r2, [sp, #4]
 800ad7e:	f845 c002 	str.w	ip, [r5, r2]
 800ad82:	9a03      	ldr	r2, [sp, #12]
 800ad84:	3304      	adds	r3, #4
 800ad86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad8a:	f1b9 0f00 	cmp.w	r9, #0
 800ad8e:	d020      	beq.n	800add2 <__multiply+0x13e>
 800ad90:	46ae      	mov	lr, r5
 800ad92:	f04f 0a00 	mov.w	sl, #0
 800ad96:	6829      	ldr	r1, [r5, #0]
 800ad98:	f104 0c14 	add.w	ip, r4, #20
 800ad9c:	f8bc b000 	ldrh.w	fp, [ip]
 800ada0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ada4:	b289      	uxth	r1, r1
 800ada6:	fb09 220b 	mla	r2, r9, fp, r2
 800adaa:	4492      	add	sl, r2
 800adac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800adb0:	f84e 1b04 	str.w	r1, [lr], #4
 800adb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800adb8:	f8be 1000 	ldrh.w	r1, [lr]
 800adbc:	0c12      	lsrs	r2, r2, #16
 800adbe:	fb09 1102 	mla	r1, r9, r2, r1
 800adc2:	4567      	cmp	r7, ip
 800adc4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800adc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800adcc:	d8e6      	bhi.n	800ad9c <__multiply+0x108>
 800adce:	9a01      	ldr	r2, [sp, #4]
 800add0:	50a9      	str	r1, [r5, r2]
 800add2:	3504      	adds	r5, #4
 800add4:	e79b      	b.n	800ad0e <__multiply+0x7a>
 800add6:	3e01      	subs	r6, #1
 800add8:	e79d      	b.n	800ad16 <__multiply+0x82>
 800adda:	bf00      	nop
 800addc:	0800c67b 	.word	0x0800c67b
 800ade0:	0800c68c 	.word	0x0800c68c

0800ade4 <__pow5mult>:
 800ade4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade8:	4615      	mov	r5, r2
 800adea:	f012 0203 	ands.w	r2, r2, #3
 800adee:	4606      	mov	r6, r0
 800adf0:	460f      	mov	r7, r1
 800adf2:	d007      	beq.n	800ae04 <__pow5mult+0x20>
 800adf4:	4c25      	ldr	r4, [pc, #148]	; (800ae8c <__pow5mult+0xa8>)
 800adf6:	3a01      	subs	r2, #1
 800adf8:	2300      	movs	r3, #0
 800adfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adfe:	f7ff fe9f 	bl	800ab40 <__multadd>
 800ae02:	4607      	mov	r7, r0
 800ae04:	10ad      	asrs	r5, r5, #2
 800ae06:	d03d      	beq.n	800ae84 <__pow5mult+0xa0>
 800ae08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae0a:	b97c      	cbnz	r4, 800ae2c <__pow5mult+0x48>
 800ae0c:	2010      	movs	r0, #16
 800ae0e:	f7ff fe11 	bl	800aa34 <malloc>
 800ae12:	4602      	mov	r2, r0
 800ae14:	6270      	str	r0, [r6, #36]	; 0x24
 800ae16:	b928      	cbnz	r0, 800ae24 <__pow5mult+0x40>
 800ae18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae1c:	4b1c      	ldr	r3, [pc, #112]	; (800ae90 <__pow5mult+0xac>)
 800ae1e:	481d      	ldr	r0, [pc, #116]	; (800ae94 <__pow5mult+0xb0>)
 800ae20:	f000 fc0a 	bl	800b638 <__assert_func>
 800ae24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae28:	6004      	str	r4, [r0, #0]
 800ae2a:	60c4      	str	r4, [r0, #12]
 800ae2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae34:	b94c      	cbnz	r4, 800ae4a <__pow5mult+0x66>
 800ae36:	f240 2171 	movw	r1, #625	; 0x271
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ff14 	bl	800ac68 <__i2b>
 800ae40:	2300      	movs	r3, #0
 800ae42:	4604      	mov	r4, r0
 800ae44:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae48:	6003      	str	r3, [r0, #0]
 800ae4a:	f04f 0900 	mov.w	r9, #0
 800ae4e:	07eb      	lsls	r3, r5, #31
 800ae50:	d50a      	bpl.n	800ae68 <__pow5mult+0x84>
 800ae52:	4639      	mov	r1, r7
 800ae54:	4622      	mov	r2, r4
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff ff1c 	bl	800ac94 <__multiply>
 800ae5c:	4680      	mov	r8, r0
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7ff fe4b 	bl	800aafc <_Bfree>
 800ae66:	4647      	mov	r7, r8
 800ae68:	106d      	asrs	r5, r5, #1
 800ae6a:	d00b      	beq.n	800ae84 <__pow5mult+0xa0>
 800ae6c:	6820      	ldr	r0, [r4, #0]
 800ae6e:	b938      	cbnz	r0, 800ae80 <__pow5mult+0x9c>
 800ae70:	4622      	mov	r2, r4
 800ae72:	4621      	mov	r1, r4
 800ae74:	4630      	mov	r0, r6
 800ae76:	f7ff ff0d 	bl	800ac94 <__multiply>
 800ae7a:	6020      	str	r0, [r4, #0]
 800ae7c:	f8c0 9000 	str.w	r9, [r0]
 800ae80:	4604      	mov	r4, r0
 800ae82:	e7e4      	b.n	800ae4e <__pow5mult+0x6a>
 800ae84:	4638      	mov	r0, r7
 800ae86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8a:	bf00      	nop
 800ae8c:	0800c7d8 	.word	0x0800c7d8
 800ae90:	0800c609 	.word	0x0800c609
 800ae94:	0800c68c 	.word	0x0800c68c

0800ae98 <__lshift>:
 800ae98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	4607      	mov	r7, r0
 800aea0:	4691      	mov	r9, r2
 800aea2:	6923      	ldr	r3, [r4, #16]
 800aea4:	6849      	ldr	r1, [r1, #4]
 800aea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aeaa:	68a3      	ldr	r3, [r4, #8]
 800aeac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aeb0:	f108 0601 	add.w	r6, r8, #1
 800aeb4:	42b3      	cmp	r3, r6
 800aeb6:	db0b      	blt.n	800aed0 <__lshift+0x38>
 800aeb8:	4638      	mov	r0, r7
 800aeba:	f7ff fddf 	bl	800aa7c <_Balloc>
 800aebe:	4605      	mov	r5, r0
 800aec0:	b948      	cbnz	r0, 800aed6 <__lshift+0x3e>
 800aec2:	4602      	mov	r2, r0
 800aec4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aec8:	4b29      	ldr	r3, [pc, #164]	; (800af70 <__lshift+0xd8>)
 800aeca:	482a      	ldr	r0, [pc, #168]	; (800af74 <__lshift+0xdc>)
 800aecc:	f000 fbb4 	bl	800b638 <__assert_func>
 800aed0:	3101      	adds	r1, #1
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	e7ee      	b.n	800aeb4 <__lshift+0x1c>
 800aed6:	2300      	movs	r3, #0
 800aed8:	f100 0114 	add.w	r1, r0, #20
 800aedc:	f100 0210 	add.w	r2, r0, #16
 800aee0:	4618      	mov	r0, r3
 800aee2:	4553      	cmp	r3, sl
 800aee4:	db37      	blt.n	800af56 <__lshift+0xbe>
 800aee6:	6920      	ldr	r0, [r4, #16]
 800aee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aeec:	f104 0314 	add.w	r3, r4, #20
 800aef0:	f019 091f 	ands.w	r9, r9, #31
 800aef4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aef8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aefc:	d02f      	beq.n	800af5e <__lshift+0xc6>
 800aefe:	468a      	mov	sl, r1
 800af00:	f04f 0c00 	mov.w	ip, #0
 800af04:	f1c9 0e20 	rsb	lr, r9, #32
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	fa02 f209 	lsl.w	r2, r2, r9
 800af0e:	ea42 020c 	orr.w	r2, r2, ip
 800af12:	f84a 2b04 	str.w	r2, [sl], #4
 800af16:	f853 2b04 	ldr.w	r2, [r3], #4
 800af1a:	4298      	cmp	r0, r3
 800af1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800af20:	d8f2      	bhi.n	800af08 <__lshift+0x70>
 800af22:	1b03      	subs	r3, r0, r4
 800af24:	3b15      	subs	r3, #21
 800af26:	f023 0303 	bic.w	r3, r3, #3
 800af2a:	3304      	adds	r3, #4
 800af2c:	f104 0215 	add.w	r2, r4, #21
 800af30:	4290      	cmp	r0, r2
 800af32:	bf38      	it	cc
 800af34:	2304      	movcc	r3, #4
 800af36:	f841 c003 	str.w	ip, [r1, r3]
 800af3a:	f1bc 0f00 	cmp.w	ip, #0
 800af3e:	d001      	beq.n	800af44 <__lshift+0xac>
 800af40:	f108 0602 	add.w	r6, r8, #2
 800af44:	3e01      	subs	r6, #1
 800af46:	4638      	mov	r0, r7
 800af48:	4621      	mov	r1, r4
 800af4a:	612e      	str	r6, [r5, #16]
 800af4c:	f7ff fdd6 	bl	800aafc <_Bfree>
 800af50:	4628      	mov	r0, r5
 800af52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af56:	f842 0f04 	str.w	r0, [r2, #4]!
 800af5a:	3301      	adds	r3, #1
 800af5c:	e7c1      	b.n	800aee2 <__lshift+0x4a>
 800af5e:	3904      	subs	r1, #4
 800af60:	f853 2b04 	ldr.w	r2, [r3], #4
 800af64:	4298      	cmp	r0, r3
 800af66:	f841 2f04 	str.w	r2, [r1, #4]!
 800af6a:	d8f9      	bhi.n	800af60 <__lshift+0xc8>
 800af6c:	e7ea      	b.n	800af44 <__lshift+0xac>
 800af6e:	bf00      	nop
 800af70:	0800c67b 	.word	0x0800c67b
 800af74:	0800c68c 	.word	0x0800c68c

0800af78 <__mcmp>:
 800af78:	4603      	mov	r3, r0
 800af7a:	690a      	ldr	r2, [r1, #16]
 800af7c:	6900      	ldr	r0, [r0, #16]
 800af7e:	b530      	push	{r4, r5, lr}
 800af80:	1a80      	subs	r0, r0, r2
 800af82:	d10d      	bne.n	800afa0 <__mcmp+0x28>
 800af84:	3314      	adds	r3, #20
 800af86:	3114      	adds	r1, #20
 800af88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af98:	4295      	cmp	r5, r2
 800af9a:	d002      	beq.n	800afa2 <__mcmp+0x2a>
 800af9c:	d304      	bcc.n	800afa8 <__mcmp+0x30>
 800af9e:	2001      	movs	r0, #1
 800afa0:	bd30      	pop	{r4, r5, pc}
 800afa2:	42a3      	cmp	r3, r4
 800afa4:	d3f4      	bcc.n	800af90 <__mcmp+0x18>
 800afa6:	e7fb      	b.n	800afa0 <__mcmp+0x28>
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295
 800afac:	e7f8      	b.n	800afa0 <__mcmp+0x28>
	...

0800afb0 <__mdiff>:
 800afb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	460d      	mov	r5, r1
 800afb6:	4607      	mov	r7, r0
 800afb8:	4611      	mov	r1, r2
 800afba:	4628      	mov	r0, r5
 800afbc:	4614      	mov	r4, r2
 800afbe:	f7ff ffdb 	bl	800af78 <__mcmp>
 800afc2:	1e06      	subs	r6, r0, #0
 800afc4:	d111      	bne.n	800afea <__mdiff+0x3a>
 800afc6:	4631      	mov	r1, r6
 800afc8:	4638      	mov	r0, r7
 800afca:	f7ff fd57 	bl	800aa7c <_Balloc>
 800afce:	4602      	mov	r2, r0
 800afd0:	b928      	cbnz	r0, 800afde <__mdiff+0x2e>
 800afd2:	f240 2132 	movw	r1, #562	; 0x232
 800afd6:	4b3a      	ldr	r3, [pc, #232]	; (800b0c0 <__mdiff+0x110>)
 800afd8:	483a      	ldr	r0, [pc, #232]	; (800b0c4 <__mdiff+0x114>)
 800afda:	f000 fb2d 	bl	800b638 <__assert_func>
 800afde:	2301      	movs	r3, #1
 800afe0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800afe4:	4610      	mov	r0, r2
 800afe6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afea:	bfa4      	itt	ge
 800afec:	4623      	movge	r3, r4
 800afee:	462c      	movge	r4, r5
 800aff0:	4638      	mov	r0, r7
 800aff2:	6861      	ldr	r1, [r4, #4]
 800aff4:	bfa6      	itte	ge
 800aff6:	461d      	movge	r5, r3
 800aff8:	2600      	movge	r6, #0
 800affa:	2601      	movlt	r6, #1
 800affc:	f7ff fd3e 	bl	800aa7c <_Balloc>
 800b000:	4602      	mov	r2, r0
 800b002:	b918      	cbnz	r0, 800b00c <__mdiff+0x5c>
 800b004:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b008:	4b2d      	ldr	r3, [pc, #180]	; (800b0c0 <__mdiff+0x110>)
 800b00a:	e7e5      	b.n	800afd8 <__mdiff+0x28>
 800b00c:	f102 0814 	add.w	r8, r2, #20
 800b010:	46c2      	mov	sl, r8
 800b012:	f04f 0c00 	mov.w	ip, #0
 800b016:	6927      	ldr	r7, [r4, #16]
 800b018:	60c6      	str	r6, [r0, #12]
 800b01a:	692e      	ldr	r6, [r5, #16]
 800b01c:	f104 0014 	add.w	r0, r4, #20
 800b020:	f105 0914 	add.w	r9, r5, #20
 800b024:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b028:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b02c:	3410      	adds	r4, #16
 800b02e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b032:	f859 3b04 	ldr.w	r3, [r9], #4
 800b036:	fa1f f18b 	uxth.w	r1, fp
 800b03a:	448c      	add	ip, r1
 800b03c:	b299      	uxth	r1, r3
 800b03e:	0c1b      	lsrs	r3, r3, #16
 800b040:	ebac 0101 	sub.w	r1, ip, r1
 800b044:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b048:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b04c:	b289      	uxth	r1, r1
 800b04e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b052:	454e      	cmp	r6, r9
 800b054:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b058:	f84a 3b04 	str.w	r3, [sl], #4
 800b05c:	d8e7      	bhi.n	800b02e <__mdiff+0x7e>
 800b05e:	1b73      	subs	r3, r6, r5
 800b060:	3b15      	subs	r3, #21
 800b062:	f023 0303 	bic.w	r3, r3, #3
 800b066:	3515      	adds	r5, #21
 800b068:	3304      	adds	r3, #4
 800b06a:	42ae      	cmp	r6, r5
 800b06c:	bf38      	it	cc
 800b06e:	2304      	movcc	r3, #4
 800b070:	4418      	add	r0, r3
 800b072:	4443      	add	r3, r8
 800b074:	461e      	mov	r6, r3
 800b076:	4605      	mov	r5, r0
 800b078:	4575      	cmp	r5, lr
 800b07a:	d30e      	bcc.n	800b09a <__mdiff+0xea>
 800b07c:	f10e 0103 	add.w	r1, lr, #3
 800b080:	1a09      	subs	r1, r1, r0
 800b082:	f021 0103 	bic.w	r1, r1, #3
 800b086:	3803      	subs	r0, #3
 800b088:	4586      	cmp	lr, r0
 800b08a:	bf38      	it	cc
 800b08c:	2100      	movcc	r1, #0
 800b08e:	4419      	add	r1, r3
 800b090:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b094:	b18b      	cbz	r3, 800b0ba <__mdiff+0x10a>
 800b096:	6117      	str	r7, [r2, #16]
 800b098:	e7a4      	b.n	800afe4 <__mdiff+0x34>
 800b09a:	f855 8b04 	ldr.w	r8, [r5], #4
 800b09e:	fa1f f188 	uxth.w	r1, r8
 800b0a2:	4461      	add	r1, ip
 800b0a4:	140c      	asrs	r4, r1, #16
 800b0a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0aa:	b289      	uxth	r1, r1
 800b0ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b0b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b0b4:	f846 1b04 	str.w	r1, [r6], #4
 800b0b8:	e7de      	b.n	800b078 <__mdiff+0xc8>
 800b0ba:	3f01      	subs	r7, #1
 800b0bc:	e7e8      	b.n	800b090 <__mdiff+0xe0>
 800b0be:	bf00      	nop
 800b0c0:	0800c67b 	.word	0x0800c67b
 800b0c4:	0800c68c 	.word	0x0800c68c

0800b0c8 <__d2b>:
 800b0c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b0cc:	2101      	movs	r1, #1
 800b0ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b0d2:	4690      	mov	r8, r2
 800b0d4:	461d      	mov	r5, r3
 800b0d6:	f7ff fcd1 	bl	800aa7c <_Balloc>
 800b0da:	4604      	mov	r4, r0
 800b0dc:	b930      	cbnz	r0, 800b0ec <__d2b+0x24>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	f240 310a 	movw	r1, #778	; 0x30a
 800b0e4:	4b24      	ldr	r3, [pc, #144]	; (800b178 <__d2b+0xb0>)
 800b0e6:	4825      	ldr	r0, [pc, #148]	; (800b17c <__d2b+0xb4>)
 800b0e8:	f000 faa6 	bl	800b638 <__assert_func>
 800b0ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b0f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b0f4:	bb2d      	cbnz	r5, 800b142 <__d2b+0x7a>
 800b0f6:	9301      	str	r3, [sp, #4]
 800b0f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b0fc:	d026      	beq.n	800b14c <__d2b+0x84>
 800b0fe:	4668      	mov	r0, sp
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	f7ff fd83 	bl	800ac0c <__lo0bits>
 800b106:	9900      	ldr	r1, [sp, #0]
 800b108:	b1f0      	cbz	r0, 800b148 <__d2b+0x80>
 800b10a:	9a01      	ldr	r2, [sp, #4]
 800b10c:	f1c0 0320 	rsb	r3, r0, #32
 800b110:	fa02 f303 	lsl.w	r3, r2, r3
 800b114:	430b      	orrs	r3, r1
 800b116:	40c2      	lsrs	r2, r0
 800b118:	6163      	str	r3, [r4, #20]
 800b11a:	9201      	str	r2, [sp, #4]
 800b11c:	9b01      	ldr	r3, [sp, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bf14      	ite	ne
 800b122:	2102      	movne	r1, #2
 800b124:	2101      	moveq	r1, #1
 800b126:	61a3      	str	r3, [r4, #24]
 800b128:	6121      	str	r1, [r4, #16]
 800b12a:	b1c5      	cbz	r5, 800b15e <__d2b+0x96>
 800b12c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b130:	4405      	add	r5, r0
 800b132:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b136:	603d      	str	r5, [r7, #0]
 800b138:	6030      	str	r0, [r6, #0]
 800b13a:	4620      	mov	r0, r4
 800b13c:	b002      	add	sp, #8
 800b13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b146:	e7d6      	b.n	800b0f6 <__d2b+0x2e>
 800b148:	6161      	str	r1, [r4, #20]
 800b14a:	e7e7      	b.n	800b11c <__d2b+0x54>
 800b14c:	a801      	add	r0, sp, #4
 800b14e:	f7ff fd5d 	bl	800ac0c <__lo0bits>
 800b152:	2101      	movs	r1, #1
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	6121      	str	r1, [r4, #16]
 800b158:	6163      	str	r3, [r4, #20]
 800b15a:	3020      	adds	r0, #32
 800b15c:	e7e5      	b.n	800b12a <__d2b+0x62>
 800b15e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b162:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b166:	6038      	str	r0, [r7, #0]
 800b168:	6918      	ldr	r0, [r3, #16]
 800b16a:	f7ff fd2f 	bl	800abcc <__hi0bits>
 800b16e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b172:	6031      	str	r1, [r6, #0]
 800b174:	e7e1      	b.n	800b13a <__d2b+0x72>
 800b176:	bf00      	nop
 800b178:	0800c67b 	.word	0x0800c67b
 800b17c:	0800c68c 	.word	0x0800c68c

0800b180 <_calloc_r>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	fba1 5402 	umull	r5, r4, r1, r2
 800b186:	b934      	cbnz	r4, 800b196 <_calloc_r+0x16>
 800b188:	4629      	mov	r1, r5
 800b18a:	f000 f875 	bl	800b278 <_malloc_r>
 800b18e:	4606      	mov	r6, r0
 800b190:	b928      	cbnz	r0, 800b19e <_calloc_r+0x1e>
 800b192:	4630      	mov	r0, r6
 800b194:	bd70      	pop	{r4, r5, r6, pc}
 800b196:	220c      	movs	r2, #12
 800b198:	2600      	movs	r6, #0
 800b19a:	6002      	str	r2, [r0, #0]
 800b19c:	e7f9      	b.n	800b192 <_calloc_r+0x12>
 800b19e:	462a      	mov	r2, r5
 800b1a0:	4621      	mov	r1, r4
 800b1a2:	f7fe f941 	bl	8009428 <memset>
 800b1a6:	e7f4      	b.n	800b192 <_calloc_r+0x12>

0800b1a8 <_free_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	2900      	cmp	r1, #0
 800b1ae:	d040      	beq.n	800b232 <_free_r+0x8a>
 800b1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1b4:	1f0c      	subs	r4, r1, #4
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bfb8      	it	lt
 800b1ba:	18e4      	addlt	r4, r4, r3
 800b1bc:	f000 fa98 	bl	800b6f0 <__malloc_lock>
 800b1c0:	4a1c      	ldr	r2, [pc, #112]	; (800b234 <_free_r+0x8c>)
 800b1c2:	6813      	ldr	r3, [r2, #0]
 800b1c4:	b933      	cbnz	r3, 800b1d4 <_free_r+0x2c>
 800b1c6:	6063      	str	r3, [r4, #4]
 800b1c8:	6014      	str	r4, [r2, #0]
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1d0:	f000 ba94 	b.w	800b6fc <__malloc_unlock>
 800b1d4:	42a3      	cmp	r3, r4
 800b1d6:	d908      	bls.n	800b1ea <_free_r+0x42>
 800b1d8:	6820      	ldr	r0, [r4, #0]
 800b1da:	1821      	adds	r1, r4, r0
 800b1dc:	428b      	cmp	r3, r1
 800b1de:	bf01      	itttt	eq
 800b1e0:	6819      	ldreq	r1, [r3, #0]
 800b1e2:	685b      	ldreq	r3, [r3, #4]
 800b1e4:	1809      	addeq	r1, r1, r0
 800b1e6:	6021      	streq	r1, [r4, #0]
 800b1e8:	e7ed      	b.n	800b1c6 <_free_r+0x1e>
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	b10b      	cbz	r3, 800b1f4 <_free_r+0x4c>
 800b1f0:	42a3      	cmp	r3, r4
 800b1f2:	d9fa      	bls.n	800b1ea <_free_r+0x42>
 800b1f4:	6811      	ldr	r1, [r2, #0]
 800b1f6:	1850      	adds	r0, r2, r1
 800b1f8:	42a0      	cmp	r0, r4
 800b1fa:	d10b      	bne.n	800b214 <_free_r+0x6c>
 800b1fc:	6820      	ldr	r0, [r4, #0]
 800b1fe:	4401      	add	r1, r0
 800b200:	1850      	adds	r0, r2, r1
 800b202:	4283      	cmp	r3, r0
 800b204:	6011      	str	r1, [r2, #0]
 800b206:	d1e0      	bne.n	800b1ca <_free_r+0x22>
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	4401      	add	r1, r0
 800b20e:	6011      	str	r1, [r2, #0]
 800b210:	6053      	str	r3, [r2, #4]
 800b212:	e7da      	b.n	800b1ca <_free_r+0x22>
 800b214:	d902      	bls.n	800b21c <_free_r+0x74>
 800b216:	230c      	movs	r3, #12
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	e7d6      	b.n	800b1ca <_free_r+0x22>
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	1821      	adds	r1, r4, r0
 800b220:	428b      	cmp	r3, r1
 800b222:	bf01      	itttt	eq
 800b224:	6819      	ldreq	r1, [r3, #0]
 800b226:	685b      	ldreq	r3, [r3, #4]
 800b228:	1809      	addeq	r1, r1, r0
 800b22a:	6021      	streq	r1, [r4, #0]
 800b22c:	6063      	str	r3, [r4, #4]
 800b22e:	6054      	str	r4, [r2, #4]
 800b230:	e7cb      	b.n	800b1ca <_free_r+0x22>
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	200004dc 	.word	0x200004dc

0800b238 <sbrk_aligned>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	4e0e      	ldr	r6, [pc, #56]	; (800b274 <sbrk_aligned+0x3c>)
 800b23c:	460c      	mov	r4, r1
 800b23e:	6831      	ldr	r1, [r6, #0]
 800b240:	4605      	mov	r5, r0
 800b242:	b911      	cbnz	r1, 800b24a <sbrk_aligned+0x12>
 800b244:	f000 f9e8 	bl	800b618 <_sbrk_r>
 800b248:	6030      	str	r0, [r6, #0]
 800b24a:	4621      	mov	r1, r4
 800b24c:	4628      	mov	r0, r5
 800b24e:	f000 f9e3 	bl	800b618 <_sbrk_r>
 800b252:	1c43      	adds	r3, r0, #1
 800b254:	d00a      	beq.n	800b26c <sbrk_aligned+0x34>
 800b256:	1cc4      	adds	r4, r0, #3
 800b258:	f024 0403 	bic.w	r4, r4, #3
 800b25c:	42a0      	cmp	r0, r4
 800b25e:	d007      	beq.n	800b270 <sbrk_aligned+0x38>
 800b260:	1a21      	subs	r1, r4, r0
 800b262:	4628      	mov	r0, r5
 800b264:	f000 f9d8 	bl	800b618 <_sbrk_r>
 800b268:	3001      	adds	r0, #1
 800b26a:	d101      	bne.n	800b270 <sbrk_aligned+0x38>
 800b26c:	f04f 34ff 	mov.w	r4, #4294967295
 800b270:	4620      	mov	r0, r4
 800b272:	bd70      	pop	{r4, r5, r6, pc}
 800b274:	200004e0 	.word	0x200004e0

0800b278 <_malloc_r>:
 800b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27c:	1ccd      	adds	r5, r1, #3
 800b27e:	f025 0503 	bic.w	r5, r5, #3
 800b282:	3508      	adds	r5, #8
 800b284:	2d0c      	cmp	r5, #12
 800b286:	bf38      	it	cc
 800b288:	250c      	movcc	r5, #12
 800b28a:	2d00      	cmp	r5, #0
 800b28c:	4607      	mov	r7, r0
 800b28e:	db01      	blt.n	800b294 <_malloc_r+0x1c>
 800b290:	42a9      	cmp	r1, r5
 800b292:	d905      	bls.n	800b2a0 <_malloc_r+0x28>
 800b294:	230c      	movs	r3, #12
 800b296:	2600      	movs	r6, #0
 800b298:	603b      	str	r3, [r7, #0]
 800b29a:	4630      	mov	r0, r6
 800b29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a0:	4e2e      	ldr	r6, [pc, #184]	; (800b35c <_malloc_r+0xe4>)
 800b2a2:	f000 fa25 	bl	800b6f0 <__malloc_lock>
 800b2a6:	6833      	ldr	r3, [r6, #0]
 800b2a8:	461c      	mov	r4, r3
 800b2aa:	bb34      	cbnz	r4, 800b2fa <_malloc_r+0x82>
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f7ff ffc2 	bl	800b238 <sbrk_aligned>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	d14d      	bne.n	800b356 <_malloc_r+0xde>
 800b2ba:	6834      	ldr	r4, [r6, #0]
 800b2bc:	4626      	mov	r6, r4
 800b2be:	2e00      	cmp	r6, #0
 800b2c0:	d140      	bne.n	800b344 <_malloc_r+0xcc>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	4631      	mov	r1, r6
 800b2c6:	4638      	mov	r0, r7
 800b2c8:	eb04 0803 	add.w	r8, r4, r3
 800b2cc:	f000 f9a4 	bl	800b618 <_sbrk_r>
 800b2d0:	4580      	cmp	r8, r0
 800b2d2:	d13a      	bne.n	800b34a <_malloc_r+0xd2>
 800b2d4:	6821      	ldr	r1, [r4, #0]
 800b2d6:	3503      	adds	r5, #3
 800b2d8:	1a6d      	subs	r5, r5, r1
 800b2da:	f025 0503 	bic.w	r5, r5, #3
 800b2de:	3508      	adds	r5, #8
 800b2e0:	2d0c      	cmp	r5, #12
 800b2e2:	bf38      	it	cc
 800b2e4:	250c      	movcc	r5, #12
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7ff ffa5 	bl	800b238 <sbrk_aligned>
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d02b      	beq.n	800b34a <_malloc_r+0xd2>
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	442b      	add	r3, r5
 800b2f6:	6023      	str	r3, [r4, #0]
 800b2f8:	e00e      	b.n	800b318 <_malloc_r+0xa0>
 800b2fa:	6822      	ldr	r2, [r4, #0]
 800b2fc:	1b52      	subs	r2, r2, r5
 800b2fe:	d41e      	bmi.n	800b33e <_malloc_r+0xc6>
 800b300:	2a0b      	cmp	r2, #11
 800b302:	d916      	bls.n	800b332 <_malloc_r+0xba>
 800b304:	1961      	adds	r1, r4, r5
 800b306:	42a3      	cmp	r3, r4
 800b308:	6025      	str	r5, [r4, #0]
 800b30a:	bf18      	it	ne
 800b30c:	6059      	strne	r1, [r3, #4]
 800b30e:	6863      	ldr	r3, [r4, #4]
 800b310:	bf08      	it	eq
 800b312:	6031      	streq	r1, [r6, #0]
 800b314:	5162      	str	r2, [r4, r5]
 800b316:	604b      	str	r3, [r1, #4]
 800b318:	4638      	mov	r0, r7
 800b31a:	f104 060b 	add.w	r6, r4, #11
 800b31e:	f000 f9ed 	bl	800b6fc <__malloc_unlock>
 800b322:	f026 0607 	bic.w	r6, r6, #7
 800b326:	1d23      	adds	r3, r4, #4
 800b328:	1af2      	subs	r2, r6, r3
 800b32a:	d0b6      	beq.n	800b29a <_malloc_r+0x22>
 800b32c:	1b9b      	subs	r3, r3, r6
 800b32e:	50a3      	str	r3, [r4, r2]
 800b330:	e7b3      	b.n	800b29a <_malloc_r+0x22>
 800b332:	6862      	ldr	r2, [r4, #4]
 800b334:	42a3      	cmp	r3, r4
 800b336:	bf0c      	ite	eq
 800b338:	6032      	streq	r2, [r6, #0]
 800b33a:	605a      	strne	r2, [r3, #4]
 800b33c:	e7ec      	b.n	800b318 <_malloc_r+0xa0>
 800b33e:	4623      	mov	r3, r4
 800b340:	6864      	ldr	r4, [r4, #4]
 800b342:	e7b2      	b.n	800b2aa <_malloc_r+0x32>
 800b344:	4634      	mov	r4, r6
 800b346:	6876      	ldr	r6, [r6, #4]
 800b348:	e7b9      	b.n	800b2be <_malloc_r+0x46>
 800b34a:	230c      	movs	r3, #12
 800b34c:	4638      	mov	r0, r7
 800b34e:	603b      	str	r3, [r7, #0]
 800b350:	f000 f9d4 	bl	800b6fc <__malloc_unlock>
 800b354:	e7a1      	b.n	800b29a <_malloc_r+0x22>
 800b356:	6025      	str	r5, [r4, #0]
 800b358:	e7de      	b.n	800b318 <_malloc_r+0xa0>
 800b35a:	bf00      	nop
 800b35c:	200004dc 	.word	0x200004dc

0800b360 <__ssputs_r>:
 800b360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b364:	688e      	ldr	r6, [r1, #8]
 800b366:	4682      	mov	sl, r0
 800b368:	429e      	cmp	r6, r3
 800b36a:	460c      	mov	r4, r1
 800b36c:	4690      	mov	r8, r2
 800b36e:	461f      	mov	r7, r3
 800b370:	d838      	bhi.n	800b3e4 <__ssputs_r+0x84>
 800b372:	898a      	ldrh	r2, [r1, #12]
 800b374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b378:	d032      	beq.n	800b3e0 <__ssputs_r+0x80>
 800b37a:	6825      	ldr	r5, [r4, #0]
 800b37c:	6909      	ldr	r1, [r1, #16]
 800b37e:	3301      	adds	r3, #1
 800b380:	eba5 0901 	sub.w	r9, r5, r1
 800b384:	6965      	ldr	r5, [r4, #20]
 800b386:	444b      	add	r3, r9
 800b388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b390:	106d      	asrs	r5, r5, #1
 800b392:	429d      	cmp	r5, r3
 800b394:	bf38      	it	cc
 800b396:	461d      	movcc	r5, r3
 800b398:	0553      	lsls	r3, r2, #21
 800b39a:	d531      	bpl.n	800b400 <__ssputs_r+0xa0>
 800b39c:	4629      	mov	r1, r5
 800b39e:	f7ff ff6b 	bl	800b278 <_malloc_r>
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	b950      	cbnz	r0, 800b3bc <__ssputs_r+0x5c>
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ac:	f8ca 3000 	str.w	r3, [sl]
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3b6:	81a3      	strh	r3, [r4, #12]
 800b3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3bc:	464a      	mov	r2, r9
 800b3be:	6921      	ldr	r1, [r4, #16]
 800b3c0:	f7ff fb4e 	bl	800aa60 <memcpy>
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	6126      	str	r6, [r4, #16]
 800b3d2:	444e      	add	r6, r9
 800b3d4:	6026      	str	r6, [r4, #0]
 800b3d6:	463e      	mov	r6, r7
 800b3d8:	6165      	str	r5, [r4, #20]
 800b3da:	eba5 0509 	sub.w	r5, r5, r9
 800b3de:	60a5      	str	r5, [r4, #8]
 800b3e0:	42be      	cmp	r6, r7
 800b3e2:	d900      	bls.n	800b3e6 <__ssputs_r+0x86>
 800b3e4:	463e      	mov	r6, r7
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	4641      	mov	r1, r8
 800b3ea:	6820      	ldr	r0, [r4, #0]
 800b3ec:	f000 f966 	bl	800b6bc <memmove>
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	1b9b      	subs	r3, r3, r6
 800b3f6:	60a3      	str	r3, [r4, #8]
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	4433      	add	r3, r6
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	e7db      	b.n	800b3b8 <__ssputs_r+0x58>
 800b400:	462a      	mov	r2, r5
 800b402:	f000 f981 	bl	800b708 <_realloc_r>
 800b406:	4606      	mov	r6, r0
 800b408:	2800      	cmp	r0, #0
 800b40a:	d1e1      	bne.n	800b3d0 <__ssputs_r+0x70>
 800b40c:	4650      	mov	r0, sl
 800b40e:	6921      	ldr	r1, [r4, #16]
 800b410:	f7ff feca 	bl	800b1a8 <_free_r>
 800b414:	e7c7      	b.n	800b3a6 <__ssputs_r+0x46>
	...

0800b418 <_svfiprintf_r>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	4698      	mov	r8, r3
 800b41e:	898b      	ldrh	r3, [r1, #12]
 800b420:	4607      	mov	r7, r0
 800b422:	061b      	lsls	r3, r3, #24
 800b424:	460d      	mov	r5, r1
 800b426:	4614      	mov	r4, r2
 800b428:	b09d      	sub	sp, #116	; 0x74
 800b42a:	d50e      	bpl.n	800b44a <_svfiprintf_r+0x32>
 800b42c:	690b      	ldr	r3, [r1, #16]
 800b42e:	b963      	cbnz	r3, 800b44a <_svfiprintf_r+0x32>
 800b430:	2140      	movs	r1, #64	; 0x40
 800b432:	f7ff ff21 	bl	800b278 <_malloc_r>
 800b436:	6028      	str	r0, [r5, #0]
 800b438:	6128      	str	r0, [r5, #16]
 800b43a:	b920      	cbnz	r0, 800b446 <_svfiprintf_r+0x2e>
 800b43c:	230c      	movs	r3, #12
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	f04f 30ff 	mov.w	r0, #4294967295
 800b444:	e0d1      	b.n	800b5ea <_svfiprintf_r+0x1d2>
 800b446:	2340      	movs	r3, #64	; 0x40
 800b448:	616b      	str	r3, [r5, #20]
 800b44a:	2300      	movs	r3, #0
 800b44c:	9309      	str	r3, [sp, #36]	; 0x24
 800b44e:	2320      	movs	r3, #32
 800b450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b454:	2330      	movs	r3, #48	; 0x30
 800b456:	f04f 0901 	mov.w	r9, #1
 800b45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b45e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b604 <_svfiprintf_r+0x1ec>
 800b462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b466:	4623      	mov	r3, r4
 800b468:	469a      	mov	sl, r3
 800b46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46e:	b10a      	cbz	r2, 800b474 <_svfiprintf_r+0x5c>
 800b470:	2a25      	cmp	r2, #37	; 0x25
 800b472:	d1f9      	bne.n	800b468 <_svfiprintf_r+0x50>
 800b474:	ebba 0b04 	subs.w	fp, sl, r4
 800b478:	d00b      	beq.n	800b492 <_svfiprintf_r+0x7a>
 800b47a:	465b      	mov	r3, fp
 800b47c:	4622      	mov	r2, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	4638      	mov	r0, r7
 800b482:	f7ff ff6d 	bl	800b360 <__ssputs_r>
 800b486:	3001      	adds	r0, #1
 800b488:	f000 80aa 	beq.w	800b5e0 <_svfiprintf_r+0x1c8>
 800b48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b48e:	445a      	add	r2, fp
 800b490:	9209      	str	r2, [sp, #36]	; 0x24
 800b492:	f89a 3000 	ldrb.w	r3, [sl]
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 80a2 	beq.w	800b5e0 <_svfiprintf_r+0x1c8>
 800b49c:	2300      	movs	r3, #0
 800b49e:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a6:	f10a 0a01 	add.w	sl, sl, #1
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	9307      	str	r3, [sp, #28]
 800b4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4b4:	4654      	mov	r4, sl
 800b4b6:	2205      	movs	r2, #5
 800b4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4bc:	4851      	ldr	r0, [pc, #324]	; (800b604 <_svfiprintf_r+0x1ec>)
 800b4be:	f7ff fac1 	bl	800aa44 <memchr>
 800b4c2:	9a04      	ldr	r2, [sp, #16]
 800b4c4:	b9d8      	cbnz	r0, 800b4fe <_svfiprintf_r+0xe6>
 800b4c6:	06d0      	lsls	r0, r2, #27
 800b4c8:	bf44      	itt	mi
 800b4ca:	2320      	movmi	r3, #32
 800b4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4d0:	0711      	lsls	r1, r2, #28
 800b4d2:	bf44      	itt	mi
 800b4d4:	232b      	movmi	r3, #43	; 0x2b
 800b4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4da:	f89a 3000 	ldrb.w	r3, [sl]
 800b4de:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e0:	d015      	beq.n	800b50e <_svfiprintf_r+0xf6>
 800b4e2:	4654      	mov	r4, sl
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f04f 0c0a 	mov.w	ip, #10
 800b4ea:	9a07      	ldr	r2, [sp, #28]
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f2:	3b30      	subs	r3, #48	; 0x30
 800b4f4:	2b09      	cmp	r3, #9
 800b4f6:	d94e      	bls.n	800b596 <_svfiprintf_r+0x17e>
 800b4f8:	b1b0      	cbz	r0, 800b528 <_svfiprintf_r+0x110>
 800b4fa:	9207      	str	r2, [sp, #28]
 800b4fc:	e014      	b.n	800b528 <_svfiprintf_r+0x110>
 800b4fe:	eba0 0308 	sub.w	r3, r0, r8
 800b502:	fa09 f303 	lsl.w	r3, r9, r3
 800b506:	4313      	orrs	r3, r2
 800b508:	46a2      	mov	sl, r4
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	e7d2      	b.n	800b4b4 <_svfiprintf_r+0x9c>
 800b50e:	9b03      	ldr	r3, [sp, #12]
 800b510:	1d19      	adds	r1, r3, #4
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	9103      	str	r1, [sp, #12]
 800b516:	2b00      	cmp	r3, #0
 800b518:	bfbb      	ittet	lt
 800b51a:	425b      	neglt	r3, r3
 800b51c:	f042 0202 	orrlt.w	r2, r2, #2
 800b520:	9307      	strge	r3, [sp, #28]
 800b522:	9307      	strlt	r3, [sp, #28]
 800b524:	bfb8      	it	lt
 800b526:	9204      	strlt	r2, [sp, #16]
 800b528:	7823      	ldrb	r3, [r4, #0]
 800b52a:	2b2e      	cmp	r3, #46	; 0x2e
 800b52c:	d10c      	bne.n	800b548 <_svfiprintf_r+0x130>
 800b52e:	7863      	ldrb	r3, [r4, #1]
 800b530:	2b2a      	cmp	r3, #42	; 0x2a
 800b532:	d135      	bne.n	800b5a0 <_svfiprintf_r+0x188>
 800b534:	9b03      	ldr	r3, [sp, #12]
 800b536:	3402      	adds	r4, #2
 800b538:	1d1a      	adds	r2, r3, #4
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	9203      	str	r2, [sp, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	bfb8      	it	lt
 800b542:	f04f 33ff 	movlt.w	r3, #4294967295
 800b546:	9305      	str	r3, [sp, #20]
 800b548:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b608 <_svfiprintf_r+0x1f0>
 800b54c:	2203      	movs	r2, #3
 800b54e:	4650      	mov	r0, sl
 800b550:	7821      	ldrb	r1, [r4, #0]
 800b552:	f7ff fa77 	bl	800aa44 <memchr>
 800b556:	b140      	cbz	r0, 800b56a <_svfiprintf_r+0x152>
 800b558:	2340      	movs	r3, #64	; 0x40
 800b55a:	eba0 000a 	sub.w	r0, r0, sl
 800b55e:	fa03 f000 	lsl.w	r0, r3, r0
 800b562:	9b04      	ldr	r3, [sp, #16]
 800b564:	3401      	adds	r4, #1
 800b566:	4303      	orrs	r3, r0
 800b568:	9304      	str	r3, [sp, #16]
 800b56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56e:	2206      	movs	r2, #6
 800b570:	4826      	ldr	r0, [pc, #152]	; (800b60c <_svfiprintf_r+0x1f4>)
 800b572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b576:	f7ff fa65 	bl	800aa44 <memchr>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	d038      	beq.n	800b5f0 <_svfiprintf_r+0x1d8>
 800b57e:	4b24      	ldr	r3, [pc, #144]	; (800b610 <_svfiprintf_r+0x1f8>)
 800b580:	bb1b      	cbnz	r3, 800b5ca <_svfiprintf_r+0x1b2>
 800b582:	9b03      	ldr	r3, [sp, #12]
 800b584:	3307      	adds	r3, #7
 800b586:	f023 0307 	bic.w	r3, r3, #7
 800b58a:	3308      	adds	r3, #8
 800b58c:	9303      	str	r3, [sp, #12]
 800b58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b590:	4433      	add	r3, r6
 800b592:	9309      	str	r3, [sp, #36]	; 0x24
 800b594:	e767      	b.n	800b466 <_svfiprintf_r+0x4e>
 800b596:	460c      	mov	r4, r1
 800b598:	2001      	movs	r0, #1
 800b59a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b59e:	e7a5      	b.n	800b4ec <_svfiprintf_r+0xd4>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f04f 0c0a 	mov.w	ip, #10
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	3401      	adds	r4, #1
 800b5aa:	9305      	str	r3, [sp, #20]
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5b2:	3a30      	subs	r2, #48	; 0x30
 800b5b4:	2a09      	cmp	r2, #9
 800b5b6:	d903      	bls.n	800b5c0 <_svfiprintf_r+0x1a8>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d0c5      	beq.n	800b548 <_svfiprintf_r+0x130>
 800b5bc:	9105      	str	r1, [sp, #20]
 800b5be:	e7c3      	b.n	800b548 <_svfiprintf_r+0x130>
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c8:	e7f0      	b.n	800b5ac <_svfiprintf_r+0x194>
 800b5ca:	ab03      	add	r3, sp, #12
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4638      	mov	r0, r7
 800b5d2:	4b10      	ldr	r3, [pc, #64]	; (800b614 <_svfiprintf_r+0x1fc>)
 800b5d4:	a904      	add	r1, sp, #16
 800b5d6:	f7fd ffcd 	bl	8009574 <_printf_float>
 800b5da:	1c42      	adds	r2, r0, #1
 800b5dc:	4606      	mov	r6, r0
 800b5de:	d1d6      	bne.n	800b58e <_svfiprintf_r+0x176>
 800b5e0:	89ab      	ldrh	r3, [r5, #12]
 800b5e2:	065b      	lsls	r3, r3, #25
 800b5e4:	f53f af2c 	bmi.w	800b440 <_svfiprintf_r+0x28>
 800b5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ea:	b01d      	add	sp, #116	; 0x74
 800b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f0:	ab03      	add	r3, sp, #12
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	4b06      	ldr	r3, [pc, #24]	; (800b614 <_svfiprintf_r+0x1fc>)
 800b5fa:	a904      	add	r1, sp, #16
 800b5fc:	f7fe fa56 	bl	8009aac <_printf_i>
 800b600:	e7eb      	b.n	800b5da <_svfiprintf_r+0x1c2>
 800b602:	bf00      	nop
 800b604:	0800c7e4 	.word	0x0800c7e4
 800b608:	0800c7ea 	.word	0x0800c7ea
 800b60c:	0800c7ee 	.word	0x0800c7ee
 800b610:	08009575 	.word	0x08009575
 800b614:	0800b361 	.word	0x0800b361

0800b618 <_sbrk_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	2300      	movs	r3, #0
 800b61c:	4d05      	ldr	r5, [pc, #20]	; (800b634 <_sbrk_r+0x1c>)
 800b61e:	4604      	mov	r4, r0
 800b620:	4608      	mov	r0, r1
 800b622:	602b      	str	r3, [r5, #0]
 800b624:	f7f7 fbc6 	bl	8002db4 <_sbrk>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_sbrk_r+0x1a>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_sbrk_r+0x1a>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	200004e4 	.word	0x200004e4

0800b638 <__assert_func>:
 800b638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b63a:	4614      	mov	r4, r2
 800b63c:	461a      	mov	r2, r3
 800b63e:	4b09      	ldr	r3, [pc, #36]	; (800b664 <__assert_func+0x2c>)
 800b640:	4605      	mov	r5, r0
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68d8      	ldr	r0, [r3, #12]
 800b646:	b14c      	cbz	r4, 800b65c <__assert_func+0x24>
 800b648:	4b07      	ldr	r3, [pc, #28]	; (800b668 <__assert_func+0x30>)
 800b64a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b64e:	9100      	str	r1, [sp, #0]
 800b650:	462b      	mov	r3, r5
 800b652:	4906      	ldr	r1, [pc, #24]	; (800b66c <__assert_func+0x34>)
 800b654:	f000 f80e 	bl	800b674 <fiprintf>
 800b658:	f000 faaa 	bl	800bbb0 <abort>
 800b65c:	4b04      	ldr	r3, [pc, #16]	; (800b670 <__assert_func+0x38>)
 800b65e:	461c      	mov	r4, r3
 800b660:	e7f3      	b.n	800b64a <__assert_func+0x12>
 800b662:	bf00      	nop
 800b664:	20000034 	.word	0x20000034
 800b668:	0800c7f5 	.word	0x0800c7f5
 800b66c:	0800c802 	.word	0x0800c802
 800b670:	0800c830 	.word	0x0800c830

0800b674 <fiprintf>:
 800b674:	b40e      	push	{r1, r2, r3}
 800b676:	b503      	push	{r0, r1, lr}
 800b678:	4601      	mov	r1, r0
 800b67a:	ab03      	add	r3, sp, #12
 800b67c:	4805      	ldr	r0, [pc, #20]	; (800b694 <fiprintf+0x20>)
 800b67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b682:	6800      	ldr	r0, [r0, #0]
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	f000 f895 	bl	800b7b4 <_vfiprintf_r>
 800b68a:	b002      	add	sp, #8
 800b68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b690:	b003      	add	sp, #12
 800b692:	4770      	bx	lr
 800b694:	20000034 	.word	0x20000034

0800b698 <__ascii_mbtowc>:
 800b698:	b082      	sub	sp, #8
 800b69a:	b901      	cbnz	r1, 800b69e <__ascii_mbtowc+0x6>
 800b69c:	a901      	add	r1, sp, #4
 800b69e:	b142      	cbz	r2, 800b6b2 <__ascii_mbtowc+0x1a>
 800b6a0:	b14b      	cbz	r3, 800b6b6 <__ascii_mbtowc+0x1e>
 800b6a2:	7813      	ldrb	r3, [r2, #0]
 800b6a4:	600b      	str	r3, [r1, #0]
 800b6a6:	7812      	ldrb	r2, [r2, #0]
 800b6a8:	1e10      	subs	r0, r2, #0
 800b6aa:	bf18      	it	ne
 800b6ac:	2001      	movne	r0, #1
 800b6ae:	b002      	add	sp, #8
 800b6b0:	4770      	bx	lr
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	e7fb      	b.n	800b6ae <__ascii_mbtowc+0x16>
 800b6b6:	f06f 0001 	mvn.w	r0, #1
 800b6ba:	e7f8      	b.n	800b6ae <__ascii_mbtowc+0x16>

0800b6bc <memmove>:
 800b6bc:	4288      	cmp	r0, r1
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	eb01 0402 	add.w	r4, r1, r2
 800b6c4:	d902      	bls.n	800b6cc <memmove+0x10>
 800b6c6:	4284      	cmp	r4, r0
 800b6c8:	4623      	mov	r3, r4
 800b6ca:	d807      	bhi.n	800b6dc <memmove+0x20>
 800b6cc:	1e43      	subs	r3, r0, #1
 800b6ce:	42a1      	cmp	r1, r4
 800b6d0:	d008      	beq.n	800b6e4 <memmove+0x28>
 800b6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6da:	e7f8      	b.n	800b6ce <memmove+0x12>
 800b6dc:	4601      	mov	r1, r0
 800b6de:	4402      	add	r2, r0
 800b6e0:	428a      	cmp	r2, r1
 800b6e2:	d100      	bne.n	800b6e6 <memmove+0x2a>
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ee:	e7f7      	b.n	800b6e0 <memmove+0x24>

0800b6f0 <__malloc_lock>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	; (800b6f8 <__malloc_lock+0x8>)
 800b6f2:	f000 bc19 	b.w	800bf28 <__retarget_lock_acquire_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	200004e8 	.word	0x200004e8

0800b6fc <__malloc_unlock>:
 800b6fc:	4801      	ldr	r0, [pc, #4]	; (800b704 <__malloc_unlock+0x8>)
 800b6fe:	f000 bc14 	b.w	800bf2a <__retarget_lock_release_recursive>
 800b702:	bf00      	nop
 800b704:	200004e8 	.word	0x200004e8

0800b708 <_realloc_r>:
 800b708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70c:	4680      	mov	r8, r0
 800b70e:	4614      	mov	r4, r2
 800b710:	460e      	mov	r6, r1
 800b712:	b921      	cbnz	r1, 800b71e <_realloc_r+0x16>
 800b714:	4611      	mov	r1, r2
 800b716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b71a:	f7ff bdad 	b.w	800b278 <_malloc_r>
 800b71e:	b92a      	cbnz	r2, 800b72c <_realloc_r+0x24>
 800b720:	f7ff fd42 	bl	800b1a8 <_free_r>
 800b724:	4625      	mov	r5, r4
 800b726:	4628      	mov	r0, r5
 800b728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b72c:	f000 fc64 	bl	800bff8 <_malloc_usable_size_r>
 800b730:	4284      	cmp	r4, r0
 800b732:	4607      	mov	r7, r0
 800b734:	d802      	bhi.n	800b73c <_realloc_r+0x34>
 800b736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b73a:	d812      	bhi.n	800b762 <_realloc_r+0x5a>
 800b73c:	4621      	mov	r1, r4
 800b73e:	4640      	mov	r0, r8
 800b740:	f7ff fd9a 	bl	800b278 <_malloc_r>
 800b744:	4605      	mov	r5, r0
 800b746:	2800      	cmp	r0, #0
 800b748:	d0ed      	beq.n	800b726 <_realloc_r+0x1e>
 800b74a:	42bc      	cmp	r4, r7
 800b74c:	4622      	mov	r2, r4
 800b74e:	4631      	mov	r1, r6
 800b750:	bf28      	it	cs
 800b752:	463a      	movcs	r2, r7
 800b754:	f7ff f984 	bl	800aa60 <memcpy>
 800b758:	4631      	mov	r1, r6
 800b75a:	4640      	mov	r0, r8
 800b75c:	f7ff fd24 	bl	800b1a8 <_free_r>
 800b760:	e7e1      	b.n	800b726 <_realloc_r+0x1e>
 800b762:	4635      	mov	r5, r6
 800b764:	e7df      	b.n	800b726 <_realloc_r+0x1e>

0800b766 <__sfputc_r>:
 800b766:	6893      	ldr	r3, [r2, #8]
 800b768:	b410      	push	{r4}
 800b76a:	3b01      	subs	r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	6093      	str	r3, [r2, #8]
 800b770:	da07      	bge.n	800b782 <__sfputc_r+0x1c>
 800b772:	6994      	ldr	r4, [r2, #24]
 800b774:	42a3      	cmp	r3, r4
 800b776:	db01      	blt.n	800b77c <__sfputc_r+0x16>
 800b778:	290a      	cmp	r1, #10
 800b77a:	d102      	bne.n	800b782 <__sfputc_r+0x1c>
 800b77c:	bc10      	pop	{r4}
 800b77e:	f000 b949 	b.w	800ba14 <__swbuf_r>
 800b782:	6813      	ldr	r3, [r2, #0]
 800b784:	1c58      	adds	r0, r3, #1
 800b786:	6010      	str	r0, [r2, #0]
 800b788:	7019      	strb	r1, [r3, #0]
 800b78a:	4608      	mov	r0, r1
 800b78c:	bc10      	pop	{r4}
 800b78e:	4770      	bx	lr

0800b790 <__sfputs_r>:
 800b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b792:	4606      	mov	r6, r0
 800b794:	460f      	mov	r7, r1
 800b796:	4614      	mov	r4, r2
 800b798:	18d5      	adds	r5, r2, r3
 800b79a:	42ac      	cmp	r4, r5
 800b79c:	d101      	bne.n	800b7a2 <__sfputs_r+0x12>
 800b79e:	2000      	movs	r0, #0
 800b7a0:	e007      	b.n	800b7b2 <__sfputs_r+0x22>
 800b7a2:	463a      	mov	r2, r7
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7aa:	f7ff ffdc 	bl	800b766 <__sfputc_r>
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	d1f3      	bne.n	800b79a <__sfputs_r+0xa>
 800b7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b7b4 <_vfiprintf_r>:
 800b7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	460d      	mov	r5, r1
 800b7ba:	4614      	mov	r4, r2
 800b7bc:	4698      	mov	r8, r3
 800b7be:	4606      	mov	r6, r0
 800b7c0:	b09d      	sub	sp, #116	; 0x74
 800b7c2:	b118      	cbz	r0, 800b7cc <_vfiprintf_r+0x18>
 800b7c4:	6983      	ldr	r3, [r0, #24]
 800b7c6:	b90b      	cbnz	r3, 800b7cc <_vfiprintf_r+0x18>
 800b7c8:	f000 fb10 	bl	800bdec <__sinit>
 800b7cc:	4b89      	ldr	r3, [pc, #548]	; (800b9f4 <_vfiprintf_r+0x240>)
 800b7ce:	429d      	cmp	r5, r3
 800b7d0:	d11b      	bne.n	800b80a <_vfiprintf_r+0x56>
 800b7d2:	6875      	ldr	r5, [r6, #4]
 800b7d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7d6:	07d9      	lsls	r1, r3, #31
 800b7d8:	d405      	bmi.n	800b7e6 <_vfiprintf_r+0x32>
 800b7da:	89ab      	ldrh	r3, [r5, #12]
 800b7dc:	059a      	lsls	r2, r3, #22
 800b7de:	d402      	bmi.n	800b7e6 <_vfiprintf_r+0x32>
 800b7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7e2:	f000 fba1 	bl	800bf28 <__retarget_lock_acquire_recursive>
 800b7e6:	89ab      	ldrh	r3, [r5, #12]
 800b7e8:	071b      	lsls	r3, r3, #28
 800b7ea:	d501      	bpl.n	800b7f0 <_vfiprintf_r+0x3c>
 800b7ec:	692b      	ldr	r3, [r5, #16]
 800b7ee:	b9eb      	cbnz	r3, 800b82c <_vfiprintf_r+0x78>
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f000 f96e 	bl	800bad4 <__swsetup_r>
 800b7f8:	b1c0      	cbz	r0, 800b82c <_vfiprintf_r+0x78>
 800b7fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7fc:	07dc      	lsls	r4, r3, #31
 800b7fe:	d50e      	bpl.n	800b81e <_vfiprintf_r+0x6a>
 800b800:	f04f 30ff 	mov.w	r0, #4294967295
 800b804:	b01d      	add	sp, #116	; 0x74
 800b806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80a:	4b7b      	ldr	r3, [pc, #492]	; (800b9f8 <_vfiprintf_r+0x244>)
 800b80c:	429d      	cmp	r5, r3
 800b80e:	d101      	bne.n	800b814 <_vfiprintf_r+0x60>
 800b810:	68b5      	ldr	r5, [r6, #8]
 800b812:	e7df      	b.n	800b7d4 <_vfiprintf_r+0x20>
 800b814:	4b79      	ldr	r3, [pc, #484]	; (800b9fc <_vfiprintf_r+0x248>)
 800b816:	429d      	cmp	r5, r3
 800b818:	bf08      	it	eq
 800b81a:	68f5      	ldreq	r5, [r6, #12]
 800b81c:	e7da      	b.n	800b7d4 <_vfiprintf_r+0x20>
 800b81e:	89ab      	ldrh	r3, [r5, #12]
 800b820:	0598      	lsls	r0, r3, #22
 800b822:	d4ed      	bmi.n	800b800 <_vfiprintf_r+0x4c>
 800b824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b826:	f000 fb80 	bl	800bf2a <__retarget_lock_release_recursive>
 800b82a:	e7e9      	b.n	800b800 <_vfiprintf_r+0x4c>
 800b82c:	2300      	movs	r3, #0
 800b82e:	9309      	str	r3, [sp, #36]	; 0x24
 800b830:	2320      	movs	r3, #32
 800b832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b836:	2330      	movs	r3, #48	; 0x30
 800b838:	f04f 0901 	mov.w	r9, #1
 800b83c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b840:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ba00 <_vfiprintf_r+0x24c>
 800b844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b848:	4623      	mov	r3, r4
 800b84a:	469a      	mov	sl, r3
 800b84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b850:	b10a      	cbz	r2, 800b856 <_vfiprintf_r+0xa2>
 800b852:	2a25      	cmp	r2, #37	; 0x25
 800b854:	d1f9      	bne.n	800b84a <_vfiprintf_r+0x96>
 800b856:	ebba 0b04 	subs.w	fp, sl, r4
 800b85a:	d00b      	beq.n	800b874 <_vfiprintf_r+0xc0>
 800b85c:	465b      	mov	r3, fp
 800b85e:	4622      	mov	r2, r4
 800b860:	4629      	mov	r1, r5
 800b862:	4630      	mov	r0, r6
 800b864:	f7ff ff94 	bl	800b790 <__sfputs_r>
 800b868:	3001      	adds	r0, #1
 800b86a:	f000 80aa 	beq.w	800b9c2 <_vfiprintf_r+0x20e>
 800b86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b870:	445a      	add	r2, fp
 800b872:	9209      	str	r2, [sp, #36]	; 0x24
 800b874:	f89a 3000 	ldrb.w	r3, [sl]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 80a2 	beq.w	800b9c2 <_vfiprintf_r+0x20e>
 800b87e:	2300      	movs	r3, #0
 800b880:	f04f 32ff 	mov.w	r2, #4294967295
 800b884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b888:	f10a 0a01 	add.w	sl, sl, #1
 800b88c:	9304      	str	r3, [sp, #16]
 800b88e:	9307      	str	r3, [sp, #28]
 800b890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b894:	931a      	str	r3, [sp, #104]	; 0x68
 800b896:	4654      	mov	r4, sl
 800b898:	2205      	movs	r2, #5
 800b89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89e:	4858      	ldr	r0, [pc, #352]	; (800ba00 <_vfiprintf_r+0x24c>)
 800b8a0:	f7ff f8d0 	bl	800aa44 <memchr>
 800b8a4:	9a04      	ldr	r2, [sp, #16]
 800b8a6:	b9d8      	cbnz	r0, 800b8e0 <_vfiprintf_r+0x12c>
 800b8a8:	06d1      	lsls	r1, r2, #27
 800b8aa:	bf44      	itt	mi
 800b8ac:	2320      	movmi	r3, #32
 800b8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b2:	0713      	lsls	r3, r2, #28
 800b8b4:	bf44      	itt	mi
 800b8b6:	232b      	movmi	r3, #43	; 0x2b
 800b8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c2:	d015      	beq.n	800b8f0 <_vfiprintf_r+0x13c>
 800b8c4:	4654      	mov	r4, sl
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	f04f 0c0a 	mov.w	ip, #10
 800b8cc:	9a07      	ldr	r2, [sp, #28]
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d4:	3b30      	subs	r3, #48	; 0x30
 800b8d6:	2b09      	cmp	r3, #9
 800b8d8:	d94e      	bls.n	800b978 <_vfiprintf_r+0x1c4>
 800b8da:	b1b0      	cbz	r0, 800b90a <_vfiprintf_r+0x156>
 800b8dc:	9207      	str	r2, [sp, #28]
 800b8de:	e014      	b.n	800b90a <_vfiprintf_r+0x156>
 800b8e0:	eba0 0308 	sub.w	r3, r0, r8
 800b8e4:	fa09 f303 	lsl.w	r3, r9, r3
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	46a2      	mov	sl, r4
 800b8ec:	9304      	str	r3, [sp, #16]
 800b8ee:	e7d2      	b.n	800b896 <_vfiprintf_r+0xe2>
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	1d19      	adds	r1, r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	9103      	str	r1, [sp, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bfbb      	ittet	lt
 800b8fc:	425b      	neglt	r3, r3
 800b8fe:	f042 0202 	orrlt.w	r2, r2, #2
 800b902:	9307      	strge	r3, [sp, #28]
 800b904:	9307      	strlt	r3, [sp, #28]
 800b906:	bfb8      	it	lt
 800b908:	9204      	strlt	r2, [sp, #16]
 800b90a:	7823      	ldrb	r3, [r4, #0]
 800b90c:	2b2e      	cmp	r3, #46	; 0x2e
 800b90e:	d10c      	bne.n	800b92a <_vfiprintf_r+0x176>
 800b910:	7863      	ldrb	r3, [r4, #1]
 800b912:	2b2a      	cmp	r3, #42	; 0x2a
 800b914:	d135      	bne.n	800b982 <_vfiprintf_r+0x1ce>
 800b916:	9b03      	ldr	r3, [sp, #12]
 800b918:	3402      	adds	r4, #2
 800b91a:	1d1a      	adds	r2, r3, #4
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	9203      	str	r2, [sp, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	bfb8      	it	lt
 800b924:	f04f 33ff 	movlt.w	r3, #4294967295
 800b928:	9305      	str	r3, [sp, #20]
 800b92a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ba04 <_vfiprintf_r+0x250>
 800b92e:	2203      	movs	r2, #3
 800b930:	4650      	mov	r0, sl
 800b932:	7821      	ldrb	r1, [r4, #0]
 800b934:	f7ff f886 	bl	800aa44 <memchr>
 800b938:	b140      	cbz	r0, 800b94c <_vfiprintf_r+0x198>
 800b93a:	2340      	movs	r3, #64	; 0x40
 800b93c:	eba0 000a 	sub.w	r0, r0, sl
 800b940:	fa03 f000 	lsl.w	r0, r3, r0
 800b944:	9b04      	ldr	r3, [sp, #16]
 800b946:	3401      	adds	r4, #1
 800b948:	4303      	orrs	r3, r0
 800b94a:	9304      	str	r3, [sp, #16]
 800b94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b950:	2206      	movs	r2, #6
 800b952:	482d      	ldr	r0, [pc, #180]	; (800ba08 <_vfiprintf_r+0x254>)
 800b954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b958:	f7ff f874 	bl	800aa44 <memchr>
 800b95c:	2800      	cmp	r0, #0
 800b95e:	d03f      	beq.n	800b9e0 <_vfiprintf_r+0x22c>
 800b960:	4b2a      	ldr	r3, [pc, #168]	; (800ba0c <_vfiprintf_r+0x258>)
 800b962:	bb1b      	cbnz	r3, 800b9ac <_vfiprintf_r+0x1f8>
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	3307      	adds	r3, #7
 800b968:	f023 0307 	bic.w	r3, r3, #7
 800b96c:	3308      	adds	r3, #8
 800b96e:	9303      	str	r3, [sp, #12]
 800b970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b972:	443b      	add	r3, r7
 800b974:	9309      	str	r3, [sp, #36]	; 0x24
 800b976:	e767      	b.n	800b848 <_vfiprintf_r+0x94>
 800b978:	460c      	mov	r4, r1
 800b97a:	2001      	movs	r0, #1
 800b97c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b980:	e7a5      	b.n	800b8ce <_vfiprintf_r+0x11a>
 800b982:	2300      	movs	r3, #0
 800b984:	f04f 0c0a 	mov.w	ip, #10
 800b988:	4619      	mov	r1, r3
 800b98a:	3401      	adds	r4, #1
 800b98c:	9305      	str	r3, [sp, #20]
 800b98e:	4620      	mov	r0, r4
 800b990:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b994:	3a30      	subs	r2, #48	; 0x30
 800b996:	2a09      	cmp	r2, #9
 800b998:	d903      	bls.n	800b9a2 <_vfiprintf_r+0x1ee>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d0c5      	beq.n	800b92a <_vfiprintf_r+0x176>
 800b99e:	9105      	str	r1, [sp, #20]
 800b9a0:	e7c3      	b.n	800b92a <_vfiprintf_r+0x176>
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9aa:	e7f0      	b.n	800b98e <_vfiprintf_r+0x1da>
 800b9ac:	ab03      	add	r3, sp, #12
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	462a      	mov	r2, r5
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <_vfiprintf_r+0x25c>)
 800b9b6:	a904      	add	r1, sp, #16
 800b9b8:	f7fd fddc 	bl	8009574 <_printf_float>
 800b9bc:	4607      	mov	r7, r0
 800b9be:	1c78      	adds	r0, r7, #1
 800b9c0:	d1d6      	bne.n	800b970 <_vfiprintf_r+0x1bc>
 800b9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c4:	07d9      	lsls	r1, r3, #31
 800b9c6:	d405      	bmi.n	800b9d4 <_vfiprintf_r+0x220>
 800b9c8:	89ab      	ldrh	r3, [r5, #12]
 800b9ca:	059a      	lsls	r2, r3, #22
 800b9cc:	d402      	bmi.n	800b9d4 <_vfiprintf_r+0x220>
 800b9ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9d0:	f000 faab 	bl	800bf2a <__retarget_lock_release_recursive>
 800b9d4:	89ab      	ldrh	r3, [r5, #12]
 800b9d6:	065b      	lsls	r3, r3, #25
 800b9d8:	f53f af12 	bmi.w	800b800 <_vfiprintf_r+0x4c>
 800b9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9de:	e711      	b.n	800b804 <_vfiprintf_r+0x50>
 800b9e0:	ab03      	add	r3, sp, #12
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	462a      	mov	r2, r5
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	4b09      	ldr	r3, [pc, #36]	; (800ba10 <_vfiprintf_r+0x25c>)
 800b9ea:	a904      	add	r1, sp, #16
 800b9ec:	f7fe f85e 	bl	8009aac <_printf_i>
 800b9f0:	e7e4      	b.n	800b9bc <_vfiprintf_r+0x208>
 800b9f2:	bf00      	nop
 800b9f4:	0800c95c 	.word	0x0800c95c
 800b9f8:	0800c97c 	.word	0x0800c97c
 800b9fc:	0800c93c 	.word	0x0800c93c
 800ba00:	0800c7e4 	.word	0x0800c7e4
 800ba04:	0800c7ea 	.word	0x0800c7ea
 800ba08:	0800c7ee 	.word	0x0800c7ee
 800ba0c:	08009575 	.word	0x08009575
 800ba10:	0800b791 	.word	0x0800b791

0800ba14 <__swbuf_r>:
 800ba14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba16:	460e      	mov	r6, r1
 800ba18:	4614      	mov	r4, r2
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	b118      	cbz	r0, 800ba26 <__swbuf_r+0x12>
 800ba1e:	6983      	ldr	r3, [r0, #24]
 800ba20:	b90b      	cbnz	r3, 800ba26 <__swbuf_r+0x12>
 800ba22:	f000 f9e3 	bl	800bdec <__sinit>
 800ba26:	4b21      	ldr	r3, [pc, #132]	; (800baac <__swbuf_r+0x98>)
 800ba28:	429c      	cmp	r4, r3
 800ba2a:	d12b      	bne.n	800ba84 <__swbuf_r+0x70>
 800ba2c:	686c      	ldr	r4, [r5, #4]
 800ba2e:	69a3      	ldr	r3, [r4, #24]
 800ba30:	60a3      	str	r3, [r4, #8]
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	071a      	lsls	r2, r3, #28
 800ba36:	d52f      	bpl.n	800ba98 <__swbuf_r+0x84>
 800ba38:	6923      	ldr	r3, [r4, #16]
 800ba3a:	b36b      	cbz	r3, 800ba98 <__swbuf_r+0x84>
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	6820      	ldr	r0, [r4, #0]
 800ba40:	b2f6      	uxtb	r6, r6
 800ba42:	1ac0      	subs	r0, r0, r3
 800ba44:	6963      	ldr	r3, [r4, #20]
 800ba46:	4637      	mov	r7, r6
 800ba48:	4283      	cmp	r3, r0
 800ba4a:	dc04      	bgt.n	800ba56 <__swbuf_r+0x42>
 800ba4c:	4621      	mov	r1, r4
 800ba4e:	4628      	mov	r0, r5
 800ba50:	f000 f938 	bl	800bcc4 <_fflush_r>
 800ba54:	bb30      	cbnz	r0, 800baa4 <__swbuf_r+0x90>
 800ba56:	68a3      	ldr	r3, [r4, #8]
 800ba58:	3001      	adds	r0, #1
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	60a3      	str	r3, [r4, #8]
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	6022      	str	r2, [r4, #0]
 800ba64:	701e      	strb	r6, [r3, #0]
 800ba66:	6963      	ldr	r3, [r4, #20]
 800ba68:	4283      	cmp	r3, r0
 800ba6a:	d004      	beq.n	800ba76 <__swbuf_r+0x62>
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	07db      	lsls	r3, r3, #31
 800ba70:	d506      	bpl.n	800ba80 <__swbuf_r+0x6c>
 800ba72:	2e0a      	cmp	r6, #10
 800ba74:	d104      	bne.n	800ba80 <__swbuf_r+0x6c>
 800ba76:	4621      	mov	r1, r4
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f000 f923 	bl	800bcc4 <_fflush_r>
 800ba7e:	b988      	cbnz	r0, 800baa4 <__swbuf_r+0x90>
 800ba80:	4638      	mov	r0, r7
 800ba82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba84:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <__swbuf_r+0x9c>)
 800ba86:	429c      	cmp	r4, r3
 800ba88:	d101      	bne.n	800ba8e <__swbuf_r+0x7a>
 800ba8a:	68ac      	ldr	r4, [r5, #8]
 800ba8c:	e7cf      	b.n	800ba2e <__swbuf_r+0x1a>
 800ba8e:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <__swbuf_r+0xa0>)
 800ba90:	429c      	cmp	r4, r3
 800ba92:	bf08      	it	eq
 800ba94:	68ec      	ldreq	r4, [r5, #12]
 800ba96:	e7ca      	b.n	800ba2e <__swbuf_r+0x1a>
 800ba98:	4621      	mov	r1, r4
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f000 f81a 	bl	800bad4 <__swsetup_r>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d0cb      	beq.n	800ba3c <__swbuf_r+0x28>
 800baa4:	f04f 37ff 	mov.w	r7, #4294967295
 800baa8:	e7ea      	b.n	800ba80 <__swbuf_r+0x6c>
 800baaa:	bf00      	nop
 800baac:	0800c95c 	.word	0x0800c95c
 800bab0:	0800c97c 	.word	0x0800c97c
 800bab4:	0800c93c 	.word	0x0800c93c

0800bab8 <__ascii_wctomb>:
 800bab8:	4603      	mov	r3, r0
 800baba:	4608      	mov	r0, r1
 800babc:	b141      	cbz	r1, 800bad0 <__ascii_wctomb+0x18>
 800babe:	2aff      	cmp	r2, #255	; 0xff
 800bac0:	d904      	bls.n	800bacc <__ascii_wctomb+0x14>
 800bac2:	228a      	movs	r2, #138	; 0x8a
 800bac4:	f04f 30ff 	mov.w	r0, #4294967295
 800bac8:	601a      	str	r2, [r3, #0]
 800baca:	4770      	bx	lr
 800bacc:	2001      	movs	r0, #1
 800bace:	700a      	strb	r2, [r1, #0]
 800bad0:	4770      	bx	lr
	...

0800bad4 <__swsetup_r>:
 800bad4:	4b32      	ldr	r3, [pc, #200]	; (800bba0 <__swsetup_r+0xcc>)
 800bad6:	b570      	push	{r4, r5, r6, lr}
 800bad8:	681d      	ldr	r5, [r3, #0]
 800bada:	4606      	mov	r6, r0
 800badc:	460c      	mov	r4, r1
 800bade:	b125      	cbz	r5, 800baea <__swsetup_r+0x16>
 800bae0:	69ab      	ldr	r3, [r5, #24]
 800bae2:	b913      	cbnz	r3, 800baea <__swsetup_r+0x16>
 800bae4:	4628      	mov	r0, r5
 800bae6:	f000 f981 	bl	800bdec <__sinit>
 800baea:	4b2e      	ldr	r3, [pc, #184]	; (800bba4 <__swsetup_r+0xd0>)
 800baec:	429c      	cmp	r4, r3
 800baee:	d10f      	bne.n	800bb10 <__swsetup_r+0x3c>
 800baf0:	686c      	ldr	r4, [r5, #4]
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baf8:	0719      	lsls	r1, r3, #28
 800bafa:	d42c      	bmi.n	800bb56 <__swsetup_r+0x82>
 800bafc:	06dd      	lsls	r5, r3, #27
 800bafe:	d411      	bmi.n	800bb24 <__swsetup_r+0x50>
 800bb00:	2309      	movs	r3, #9
 800bb02:	6033      	str	r3, [r6, #0]
 800bb04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb08:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0c:	81a3      	strh	r3, [r4, #12]
 800bb0e:	e03e      	b.n	800bb8e <__swsetup_r+0xba>
 800bb10:	4b25      	ldr	r3, [pc, #148]	; (800bba8 <__swsetup_r+0xd4>)
 800bb12:	429c      	cmp	r4, r3
 800bb14:	d101      	bne.n	800bb1a <__swsetup_r+0x46>
 800bb16:	68ac      	ldr	r4, [r5, #8]
 800bb18:	e7eb      	b.n	800baf2 <__swsetup_r+0x1e>
 800bb1a:	4b24      	ldr	r3, [pc, #144]	; (800bbac <__swsetup_r+0xd8>)
 800bb1c:	429c      	cmp	r4, r3
 800bb1e:	bf08      	it	eq
 800bb20:	68ec      	ldreq	r4, [r5, #12]
 800bb22:	e7e6      	b.n	800baf2 <__swsetup_r+0x1e>
 800bb24:	0758      	lsls	r0, r3, #29
 800bb26:	d512      	bpl.n	800bb4e <__swsetup_r+0x7a>
 800bb28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb2a:	b141      	cbz	r1, 800bb3e <__swsetup_r+0x6a>
 800bb2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb30:	4299      	cmp	r1, r3
 800bb32:	d002      	beq.n	800bb3a <__swsetup_r+0x66>
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7ff fb37 	bl	800b1a8 <_free_r>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	2300      	movs	r3, #0
 800bb48:	6063      	str	r3, [r4, #4]
 800bb4a:	6923      	ldr	r3, [r4, #16]
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	f043 0308 	orr.w	r3, r3, #8
 800bb54:	81a3      	strh	r3, [r4, #12]
 800bb56:	6923      	ldr	r3, [r4, #16]
 800bb58:	b94b      	cbnz	r3, 800bb6e <__swsetup_r+0x9a>
 800bb5a:	89a3      	ldrh	r3, [r4, #12]
 800bb5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb64:	d003      	beq.n	800bb6e <__swsetup_r+0x9a>
 800bb66:	4621      	mov	r1, r4
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f000 fa05 	bl	800bf78 <__smakebuf_r>
 800bb6e:	89a0      	ldrh	r0, [r4, #12]
 800bb70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb74:	f010 0301 	ands.w	r3, r0, #1
 800bb78:	d00a      	beq.n	800bb90 <__swsetup_r+0xbc>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	60a3      	str	r3, [r4, #8]
 800bb7e:	6963      	ldr	r3, [r4, #20]
 800bb80:	425b      	negs	r3, r3
 800bb82:	61a3      	str	r3, [r4, #24]
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	b943      	cbnz	r3, 800bb9a <__swsetup_r+0xc6>
 800bb88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb8c:	d1ba      	bne.n	800bb04 <__swsetup_r+0x30>
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}
 800bb90:	0781      	lsls	r1, r0, #30
 800bb92:	bf58      	it	pl
 800bb94:	6963      	ldrpl	r3, [r4, #20]
 800bb96:	60a3      	str	r3, [r4, #8]
 800bb98:	e7f4      	b.n	800bb84 <__swsetup_r+0xb0>
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	e7f7      	b.n	800bb8e <__swsetup_r+0xba>
 800bb9e:	bf00      	nop
 800bba0:	20000034 	.word	0x20000034
 800bba4:	0800c95c 	.word	0x0800c95c
 800bba8:	0800c97c 	.word	0x0800c97c
 800bbac:	0800c93c 	.word	0x0800c93c

0800bbb0 <abort>:
 800bbb0:	2006      	movs	r0, #6
 800bbb2:	b508      	push	{r3, lr}
 800bbb4:	f000 fa50 	bl	800c058 <raise>
 800bbb8:	2001      	movs	r0, #1
 800bbba:	f7f7 f888 	bl	8002cce <_exit>
	...

0800bbc0 <__sflush_r>:
 800bbc0:	898a      	ldrh	r2, [r1, #12]
 800bbc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	0710      	lsls	r0, r2, #28
 800bbc8:	460c      	mov	r4, r1
 800bbca:	d457      	bmi.n	800bc7c <__sflush_r+0xbc>
 800bbcc:	684b      	ldr	r3, [r1, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	dc04      	bgt.n	800bbdc <__sflush_r+0x1c>
 800bbd2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	dc01      	bgt.n	800bbdc <__sflush_r+0x1c>
 800bbd8:	2000      	movs	r0, #0
 800bbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbde:	2e00      	cmp	r6, #0
 800bbe0:	d0fa      	beq.n	800bbd8 <__sflush_r+0x18>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbe8:	682f      	ldr	r7, [r5, #0]
 800bbea:	602b      	str	r3, [r5, #0]
 800bbec:	d032      	beq.n	800bc54 <__sflush_r+0x94>
 800bbee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	075a      	lsls	r2, r3, #29
 800bbf4:	d505      	bpl.n	800bc02 <__sflush_r+0x42>
 800bbf6:	6863      	ldr	r3, [r4, #4]
 800bbf8:	1ac0      	subs	r0, r0, r3
 800bbfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbfc:	b10b      	cbz	r3, 800bc02 <__sflush_r+0x42>
 800bbfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc00:	1ac0      	subs	r0, r0, r3
 800bc02:	2300      	movs	r3, #0
 800bc04:	4602      	mov	r2, r0
 800bc06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc08:	4628      	mov	r0, r5
 800bc0a:	6a21      	ldr	r1, [r4, #32]
 800bc0c:	47b0      	blx	r6
 800bc0e:	1c43      	adds	r3, r0, #1
 800bc10:	89a3      	ldrh	r3, [r4, #12]
 800bc12:	d106      	bne.n	800bc22 <__sflush_r+0x62>
 800bc14:	6829      	ldr	r1, [r5, #0]
 800bc16:	291d      	cmp	r1, #29
 800bc18:	d82c      	bhi.n	800bc74 <__sflush_r+0xb4>
 800bc1a:	4a29      	ldr	r2, [pc, #164]	; (800bcc0 <__sflush_r+0x100>)
 800bc1c:	40ca      	lsrs	r2, r1
 800bc1e:	07d6      	lsls	r6, r2, #31
 800bc20:	d528      	bpl.n	800bc74 <__sflush_r+0xb4>
 800bc22:	2200      	movs	r2, #0
 800bc24:	6062      	str	r2, [r4, #4]
 800bc26:	6922      	ldr	r2, [r4, #16]
 800bc28:	04d9      	lsls	r1, r3, #19
 800bc2a:	6022      	str	r2, [r4, #0]
 800bc2c:	d504      	bpl.n	800bc38 <__sflush_r+0x78>
 800bc2e:	1c42      	adds	r2, r0, #1
 800bc30:	d101      	bne.n	800bc36 <__sflush_r+0x76>
 800bc32:	682b      	ldr	r3, [r5, #0]
 800bc34:	b903      	cbnz	r3, 800bc38 <__sflush_r+0x78>
 800bc36:	6560      	str	r0, [r4, #84]	; 0x54
 800bc38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc3a:	602f      	str	r7, [r5, #0]
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	d0cb      	beq.n	800bbd8 <__sflush_r+0x18>
 800bc40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc44:	4299      	cmp	r1, r3
 800bc46:	d002      	beq.n	800bc4e <__sflush_r+0x8e>
 800bc48:	4628      	mov	r0, r5
 800bc4a:	f7ff faad 	bl	800b1a8 <_free_r>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	6360      	str	r0, [r4, #52]	; 0x34
 800bc52:	e7c2      	b.n	800bbda <__sflush_r+0x1a>
 800bc54:	6a21      	ldr	r1, [r4, #32]
 800bc56:	2301      	movs	r3, #1
 800bc58:	4628      	mov	r0, r5
 800bc5a:	47b0      	blx	r6
 800bc5c:	1c41      	adds	r1, r0, #1
 800bc5e:	d1c7      	bne.n	800bbf0 <__sflush_r+0x30>
 800bc60:	682b      	ldr	r3, [r5, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d0c4      	beq.n	800bbf0 <__sflush_r+0x30>
 800bc66:	2b1d      	cmp	r3, #29
 800bc68:	d001      	beq.n	800bc6e <__sflush_r+0xae>
 800bc6a:	2b16      	cmp	r3, #22
 800bc6c:	d101      	bne.n	800bc72 <__sflush_r+0xb2>
 800bc6e:	602f      	str	r7, [r5, #0]
 800bc70:	e7b2      	b.n	800bbd8 <__sflush_r+0x18>
 800bc72:	89a3      	ldrh	r3, [r4, #12]
 800bc74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc78:	81a3      	strh	r3, [r4, #12]
 800bc7a:	e7ae      	b.n	800bbda <__sflush_r+0x1a>
 800bc7c:	690f      	ldr	r7, [r1, #16]
 800bc7e:	2f00      	cmp	r7, #0
 800bc80:	d0aa      	beq.n	800bbd8 <__sflush_r+0x18>
 800bc82:	0793      	lsls	r3, r2, #30
 800bc84:	bf18      	it	ne
 800bc86:	2300      	movne	r3, #0
 800bc88:	680e      	ldr	r6, [r1, #0]
 800bc8a:	bf08      	it	eq
 800bc8c:	694b      	ldreq	r3, [r1, #20]
 800bc8e:	1bf6      	subs	r6, r6, r7
 800bc90:	600f      	str	r7, [r1, #0]
 800bc92:	608b      	str	r3, [r1, #8]
 800bc94:	2e00      	cmp	r6, #0
 800bc96:	dd9f      	ble.n	800bbd8 <__sflush_r+0x18>
 800bc98:	4633      	mov	r3, r6
 800bc9a:	463a      	mov	r2, r7
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	6a21      	ldr	r1, [r4, #32]
 800bca0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bca4:	47e0      	blx	ip
 800bca6:	2800      	cmp	r0, #0
 800bca8:	dc06      	bgt.n	800bcb8 <__sflush_r+0xf8>
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	e790      	b.n	800bbda <__sflush_r+0x1a>
 800bcb8:	4407      	add	r7, r0
 800bcba:	1a36      	subs	r6, r6, r0
 800bcbc:	e7ea      	b.n	800bc94 <__sflush_r+0xd4>
 800bcbe:	bf00      	nop
 800bcc0:	20400001 	.word	0x20400001

0800bcc4 <_fflush_r>:
 800bcc4:	b538      	push	{r3, r4, r5, lr}
 800bcc6:	690b      	ldr	r3, [r1, #16]
 800bcc8:	4605      	mov	r5, r0
 800bcca:	460c      	mov	r4, r1
 800bccc:	b913      	cbnz	r3, 800bcd4 <_fflush_r+0x10>
 800bcce:	2500      	movs	r5, #0
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	b118      	cbz	r0, 800bcde <_fflush_r+0x1a>
 800bcd6:	6983      	ldr	r3, [r0, #24]
 800bcd8:	b90b      	cbnz	r3, 800bcde <_fflush_r+0x1a>
 800bcda:	f000 f887 	bl	800bdec <__sinit>
 800bcde:	4b14      	ldr	r3, [pc, #80]	; (800bd30 <_fflush_r+0x6c>)
 800bce0:	429c      	cmp	r4, r3
 800bce2:	d11b      	bne.n	800bd1c <_fflush_r+0x58>
 800bce4:	686c      	ldr	r4, [r5, #4]
 800bce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0ef      	beq.n	800bcce <_fflush_r+0xa>
 800bcee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcf0:	07d0      	lsls	r0, r2, #31
 800bcf2:	d404      	bmi.n	800bcfe <_fflush_r+0x3a>
 800bcf4:	0599      	lsls	r1, r3, #22
 800bcf6:	d402      	bmi.n	800bcfe <_fflush_r+0x3a>
 800bcf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcfa:	f000 f915 	bl	800bf28 <__retarget_lock_acquire_recursive>
 800bcfe:	4628      	mov	r0, r5
 800bd00:	4621      	mov	r1, r4
 800bd02:	f7ff ff5d 	bl	800bbc0 <__sflush_r>
 800bd06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd08:	4605      	mov	r5, r0
 800bd0a:	07da      	lsls	r2, r3, #31
 800bd0c:	d4e0      	bmi.n	800bcd0 <_fflush_r+0xc>
 800bd0e:	89a3      	ldrh	r3, [r4, #12]
 800bd10:	059b      	lsls	r3, r3, #22
 800bd12:	d4dd      	bmi.n	800bcd0 <_fflush_r+0xc>
 800bd14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd16:	f000 f908 	bl	800bf2a <__retarget_lock_release_recursive>
 800bd1a:	e7d9      	b.n	800bcd0 <_fflush_r+0xc>
 800bd1c:	4b05      	ldr	r3, [pc, #20]	; (800bd34 <_fflush_r+0x70>)
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d101      	bne.n	800bd26 <_fflush_r+0x62>
 800bd22:	68ac      	ldr	r4, [r5, #8]
 800bd24:	e7df      	b.n	800bce6 <_fflush_r+0x22>
 800bd26:	4b04      	ldr	r3, [pc, #16]	; (800bd38 <_fflush_r+0x74>)
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	bf08      	it	eq
 800bd2c:	68ec      	ldreq	r4, [r5, #12]
 800bd2e:	e7da      	b.n	800bce6 <_fflush_r+0x22>
 800bd30:	0800c95c 	.word	0x0800c95c
 800bd34:	0800c97c 	.word	0x0800c97c
 800bd38:	0800c93c 	.word	0x0800c93c

0800bd3c <std>:
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	b510      	push	{r4, lr}
 800bd40:	4604      	mov	r4, r0
 800bd42:	e9c0 3300 	strd	r3, r3, [r0]
 800bd46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd4a:	6083      	str	r3, [r0, #8]
 800bd4c:	8181      	strh	r1, [r0, #12]
 800bd4e:	6643      	str	r3, [r0, #100]	; 0x64
 800bd50:	81c2      	strh	r2, [r0, #14]
 800bd52:	6183      	str	r3, [r0, #24]
 800bd54:	4619      	mov	r1, r3
 800bd56:	2208      	movs	r2, #8
 800bd58:	305c      	adds	r0, #92	; 0x5c
 800bd5a:	f7fd fb65 	bl	8009428 <memset>
 800bd5e:	4b05      	ldr	r3, [pc, #20]	; (800bd74 <std+0x38>)
 800bd60:	6224      	str	r4, [r4, #32]
 800bd62:	6263      	str	r3, [r4, #36]	; 0x24
 800bd64:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <std+0x3c>)
 800bd66:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd68:	4b04      	ldr	r3, [pc, #16]	; (800bd7c <std+0x40>)
 800bd6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd6c:	4b04      	ldr	r3, [pc, #16]	; (800bd80 <std+0x44>)
 800bd6e:	6323      	str	r3, [r4, #48]	; 0x30
 800bd70:	bd10      	pop	{r4, pc}
 800bd72:	bf00      	nop
 800bd74:	0800c091 	.word	0x0800c091
 800bd78:	0800c0b3 	.word	0x0800c0b3
 800bd7c:	0800c0eb 	.word	0x0800c0eb
 800bd80:	0800c10f 	.word	0x0800c10f

0800bd84 <_cleanup_r>:
 800bd84:	4901      	ldr	r1, [pc, #4]	; (800bd8c <_cleanup_r+0x8>)
 800bd86:	f000 b8af 	b.w	800bee8 <_fwalk_reent>
 800bd8a:	bf00      	nop
 800bd8c:	0800bcc5 	.word	0x0800bcc5

0800bd90 <__sfmoreglue>:
 800bd90:	2268      	movs	r2, #104	; 0x68
 800bd92:	b570      	push	{r4, r5, r6, lr}
 800bd94:	1e4d      	subs	r5, r1, #1
 800bd96:	4355      	muls	r5, r2
 800bd98:	460e      	mov	r6, r1
 800bd9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd9e:	f7ff fa6b 	bl	800b278 <_malloc_r>
 800bda2:	4604      	mov	r4, r0
 800bda4:	b140      	cbz	r0, 800bdb8 <__sfmoreglue+0x28>
 800bda6:	2100      	movs	r1, #0
 800bda8:	e9c0 1600 	strd	r1, r6, [r0]
 800bdac:	300c      	adds	r0, #12
 800bdae:	60a0      	str	r0, [r4, #8]
 800bdb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdb4:	f7fd fb38 	bl	8009428 <memset>
 800bdb8:	4620      	mov	r0, r4
 800bdba:	bd70      	pop	{r4, r5, r6, pc}

0800bdbc <__sfp_lock_acquire>:
 800bdbc:	4801      	ldr	r0, [pc, #4]	; (800bdc4 <__sfp_lock_acquire+0x8>)
 800bdbe:	f000 b8b3 	b.w	800bf28 <__retarget_lock_acquire_recursive>
 800bdc2:	bf00      	nop
 800bdc4:	200004e9 	.word	0x200004e9

0800bdc8 <__sfp_lock_release>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	; (800bdd0 <__sfp_lock_release+0x8>)
 800bdca:	f000 b8ae 	b.w	800bf2a <__retarget_lock_release_recursive>
 800bdce:	bf00      	nop
 800bdd0:	200004e9 	.word	0x200004e9

0800bdd4 <__sinit_lock_acquire>:
 800bdd4:	4801      	ldr	r0, [pc, #4]	; (800bddc <__sinit_lock_acquire+0x8>)
 800bdd6:	f000 b8a7 	b.w	800bf28 <__retarget_lock_acquire_recursive>
 800bdda:	bf00      	nop
 800bddc:	200004ea 	.word	0x200004ea

0800bde0 <__sinit_lock_release>:
 800bde0:	4801      	ldr	r0, [pc, #4]	; (800bde8 <__sinit_lock_release+0x8>)
 800bde2:	f000 b8a2 	b.w	800bf2a <__retarget_lock_release_recursive>
 800bde6:	bf00      	nop
 800bde8:	200004ea 	.word	0x200004ea

0800bdec <__sinit>:
 800bdec:	b510      	push	{r4, lr}
 800bdee:	4604      	mov	r4, r0
 800bdf0:	f7ff fff0 	bl	800bdd4 <__sinit_lock_acquire>
 800bdf4:	69a3      	ldr	r3, [r4, #24]
 800bdf6:	b11b      	cbz	r3, 800be00 <__sinit+0x14>
 800bdf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdfc:	f7ff bff0 	b.w	800bde0 <__sinit_lock_release>
 800be00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be04:	6523      	str	r3, [r4, #80]	; 0x50
 800be06:	4b13      	ldr	r3, [pc, #76]	; (800be54 <__sinit+0x68>)
 800be08:	4a13      	ldr	r2, [pc, #76]	; (800be58 <__sinit+0x6c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800be0e:	42a3      	cmp	r3, r4
 800be10:	bf08      	it	eq
 800be12:	2301      	moveq	r3, #1
 800be14:	4620      	mov	r0, r4
 800be16:	bf08      	it	eq
 800be18:	61a3      	streq	r3, [r4, #24]
 800be1a:	f000 f81f 	bl	800be5c <__sfp>
 800be1e:	6060      	str	r0, [r4, #4]
 800be20:	4620      	mov	r0, r4
 800be22:	f000 f81b 	bl	800be5c <__sfp>
 800be26:	60a0      	str	r0, [r4, #8]
 800be28:	4620      	mov	r0, r4
 800be2a:	f000 f817 	bl	800be5c <__sfp>
 800be2e:	2200      	movs	r2, #0
 800be30:	2104      	movs	r1, #4
 800be32:	60e0      	str	r0, [r4, #12]
 800be34:	6860      	ldr	r0, [r4, #4]
 800be36:	f7ff ff81 	bl	800bd3c <std>
 800be3a:	2201      	movs	r2, #1
 800be3c:	2109      	movs	r1, #9
 800be3e:	68a0      	ldr	r0, [r4, #8]
 800be40:	f7ff ff7c 	bl	800bd3c <std>
 800be44:	2202      	movs	r2, #2
 800be46:	2112      	movs	r1, #18
 800be48:	68e0      	ldr	r0, [r4, #12]
 800be4a:	f7ff ff77 	bl	800bd3c <std>
 800be4e:	2301      	movs	r3, #1
 800be50:	61a3      	str	r3, [r4, #24]
 800be52:	e7d1      	b.n	800bdf8 <__sinit+0xc>
 800be54:	0800c5c4 	.word	0x0800c5c4
 800be58:	0800bd85 	.word	0x0800bd85

0800be5c <__sfp>:
 800be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5e:	4607      	mov	r7, r0
 800be60:	f7ff ffac 	bl	800bdbc <__sfp_lock_acquire>
 800be64:	4b1e      	ldr	r3, [pc, #120]	; (800bee0 <__sfp+0x84>)
 800be66:	681e      	ldr	r6, [r3, #0]
 800be68:	69b3      	ldr	r3, [r6, #24]
 800be6a:	b913      	cbnz	r3, 800be72 <__sfp+0x16>
 800be6c:	4630      	mov	r0, r6
 800be6e:	f7ff ffbd 	bl	800bdec <__sinit>
 800be72:	3648      	adds	r6, #72	; 0x48
 800be74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be78:	3b01      	subs	r3, #1
 800be7a:	d503      	bpl.n	800be84 <__sfp+0x28>
 800be7c:	6833      	ldr	r3, [r6, #0]
 800be7e:	b30b      	cbz	r3, 800bec4 <__sfp+0x68>
 800be80:	6836      	ldr	r6, [r6, #0]
 800be82:	e7f7      	b.n	800be74 <__sfp+0x18>
 800be84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be88:	b9d5      	cbnz	r5, 800bec0 <__sfp+0x64>
 800be8a:	4b16      	ldr	r3, [pc, #88]	; (800bee4 <__sfp+0x88>)
 800be8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be90:	60e3      	str	r3, [r4, #12]
 800be92:	6665      	str	r5, [r4, #100]	; 0x64
 800be94:	f000 f847 	bl	800bf26 <__retarget_lock_init_recursive>
 800be98:	f7ff ff96 	bl	800bdc8 <__sfp_lock_release>
 800be9c:	2208      	movs	r2, #8
 800be9e:	4629      	mov	r1, r5
 800bea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bea8:	6025      	str	r5, [r4, #0]
 800beaa:	61a5      	str	r5, [r4, #24]
 800beac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800beb0:	f7fd faba 	bl	8009428 <memset>
 800beb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800beb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bebc:	4620      	mov	r0, r4
 800bebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec0:	3468      	adds	r4, #104	; 0x68
 800bec2:	e7d9      	b.n	800be78 <__sfp+0x1c>
 800bec4:	2104      	movs	r1, #4
 800bec6:	4638      	mov	r0, r7
 800bec8:	f7ff ff62 	bl	800bd90 <__sfmoreglue>
 800becc:	4604      	mov	r4, r0
 800bece:	6030      	str	r0, [r6, #0]
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d1d5      	bne.n	800be80 <__sfp+0x24>
 800bed4:	f7ff ff78 	bl	800bdc8 <__sfp_lock_release>
 800bed8:	230c      	movs	r3, #12
 800beda:	603b      	str	r3, [r7, #0]
 800bedc:	e7ee      	b.n	800bebc <__sfp+0x60>
 800bede:	bf00      	nop
 800bee0:	0800c5c4 	.word	0x0800c5c4
 800bee4:	ffff0001 	.word	0xffff0001

0800bee8 <_fwalk_reent>:
 800bee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beec:	4606      	mov	r6, r0
 800beee:	4688      	mov	r8, r1
 800bef0:	2700      	movs	r7, #0
 800bef2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800befa:	f1b9 0901 	subs.w	r9, r9, #1
 800befe:	d505      	bpl.n	800bf0c <_fwalk_reent+0x24>
 800bf00:	6824      	ldr	r4, [r4, #0]
 800bf02:	2c00      	cmp	r4, #0
 800bf04:	d1f7      	bne.n	800bef6 <_fwalk_reent+0xe>
 800bf06:	4638      	mov	r0, r7
 800bf08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf0c:	89ab      	ldrh	r3, [r5, #12]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d907      	bls.n	800bf22 <_fwalk_reent+0x3a>
 800bf12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf16:	3301      	adds	r3, #1
 800bf18:	d003      	beq.n	800bf22 <_fwalk_reent+0x3a>
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	47c0      	blx	r8
 800bf20:	4307      	orrs	r7, r0
 800bf22:	3568      	adds	r5, #104	; 0x68
 800bf24:	e7e9      	b.n	800befa <_fwalk_reent+0x12>

0800bf26 <__retarget_lock_init_recursive>:
 800bf26:	4770      	bx	lr

0800bf28 <__retarget_lock_acquire_recursive>:
 800bf28:	4770      	bx	lr

0800bf2a <__retarget_lock_release_recursive>:
 800bf2a:	4770      	bx	lr

0800bf2c <__swhatbuf_r>:
 800bf2c:	b570      	push	{r4, r5, r6, lr}
 800bf2e:	460e      	mov	r6, r1
 800bf30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf34:	4614      	mov	r4, r2
 800bf36:	2900      	cmp	r1, #0
 800bf38:	461d      	mov	r5, r3
 800bf3a:	b096      	sub	sp, #88	; 0x58
 800bf3c:	da08      	bge.n	800bf50 <__swhatbuf_r+0x24>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf44:	602a      	str	r2, [r5, #0]
 800bf46:	061a      	lsls	r2, r3, #24
 800bf48:	d410      	bmi.n	800bf6c <__swhatbuf_r+0x40>
 800bf4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf4e:	e00e      	b.n	800bf6e <__swhatbuf_r+0x42>
 800bf50:	466a      	mov	r2, sp
 800bf52:	f000 f903 	bl	800c15c <_fstat_r>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	dbf1      	blt.n	800bf3e <__swhatbuf_r+0x12>
 800bf5a:	9a01      	ldr	r2, [sp, #4]
 800bf5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf64:	425a      	negs	r2, r3
 800bf66:	415a      	adcs	r2, r3
 800bf68:	602a      	str	r2, [r5, #0]
 800bf6a:	e7ee      	b.n	800bf4a <__swhatbuf_r+0x1e>
 800bf6c:	2340      	movs	r3, #64	; 0x40
 800bf6e:	2000      	movs	r0, #0
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	b016      	add	sp, #88	; 0x58
 800bf74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf78 <__smakebuf_r>:
 800bf78:	898b      	ldrh	r3, [r1, #12]
 800bf7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf7c:	079d      	lsls	r5, r3, #30
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460c      	mov	r4, r1
 800bf82:	d507      	bpl.n	800bf94 <__smakebuf_r+0x1c>
 800bf84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	6123      	str	r3, [r4, #16]
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	6163      	str	r3, [r4, #20]
 800bf90:	b002      	add	sp, #8
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	466a      	mov	r2, sp
 800bf96:	ab01      	add	r3, sp, #4
 800bf98:	f7ff ffc8 	bl	800bf2c <__swhatbuf_r>
 800bf9c:	9900      	ldr	r1, [sp, #0]
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	f7ff f969 	bl	800b278 <_malloc_r>
 800bfa6:	b948      	cbnz	r0, 800bfbc <__smakebuf_r+0x44>
 800bfa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfac:	059a      	lsls	r2, r3, #22
 800bfae:	d4ef      	bmi.n	800bf90 <__smakebuf_r+0x18>
 800bfb0:	f023 0303 	bic.w	r3, r3, #3
 800bfb4:	f043 0302 	orr.w	r3, r3, #2
 800bfb8:	81a3      	strh	r3, [r4, #12]
 800bfba:	e7e3      	b.n	800bf84 <__smakebuf_r+0xc>
 800bfbc:	4b0d      	ldr	r3, [pc, #52]	; (800bff4 <__smakebuf_r+0x7c>)
 800bfbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	6020      	str	r0, [r4, #0]
 800bfc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	9b00      	ldr	r3, [sp, #0]
 800bfcc:	6120      	str	r0, [r4, #16]
 800bfce:	6163      	str	r3, [r4, #20]
 800bfd0:	9b01      	ldr	r3, [sp, #4]
 800bfd2:	b15b      	cbz	r3, 800bfec <__smakebuf_r+0x74>
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfda:	f000 f8d1 	bl	800c180 <_isatty_r>
 800bfde:	b128      	cbz	r0, 800bfec <__smakebuf_r+0x74>
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	f023 0303 	bic.w	r3, r3, #3
 800bfe6:	f043 0301 	orr.w	r3, r3, #1
 800bfea:	81a3      	strh	r3, [r4, #12]
 800bfec:	89a0      	ldrh	r0, [r4, #12]
 800bfee:	4305      	orrs	r5, r0
 800bff0:	81a5      	strh	r5, [r4, #12]
 800bff2:	e7cd      	b.n	800bf90 <__smakebuf_r+0x18>
 800bff4:	0800bd85 	.word	0x0800bd85

0800bff8 <_malloc_usable_size_r>:
 800bff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bffc:	1f18      	subs	r0, r3, #4
 800bffe:	2b00      	cmp	r3, #0
 800c000:	bfbc      	itt	lt
 800c002:	580b      	ldrlt	r3, [r1, r0]
 800c004:	18c0      	addlt	r0, r0, r3
 800c006:	4770      	bx	lr

0800c008 <_raise_r>:
 800c008:	291f      	cmp	r1, #31
 800c00a:	b538      	push	{r3, r4, r5, lr}
 800c00c:	4604      	mov	r4, r0
 800c00e:	460d      	mov	r5, r1
 800c010:	d904      	bls.n	800c01c <_raise_r+0x14>
 800c012:	2316      	movs	r3, #22
 800c014:	6003      	str	r3, [r0, #0]
 800c016:	f04f 30ff 	mov.w	r0, #4294967295
 800c01a:	bd38      	pop	{r3, r4, r5, pc}
 800c01c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c01e:	b112      	cbz	r2, 800c026 <_raise_r+0x1e>
 800c020:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c024:	b94b      	cbnz	r3, 800c03a <_raise_r+0x32>
 800c026:	4620      	mov	r0, r4
 800c028:	f000 f830 	bl	800c08c <_getpid_r>
 800c02c:	462a      	mov	r2, r5
 800c02e:	4601      	mov	r1, r0
 800c030:	4620      	mov	r0, r4
 800c032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c036:	f000 b817 	b.w	800c068 <_kill_r>
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d00a      	beq.n	800c054 <_raise_r+0x4c>
 800c03e:	1c59      	adds	r1, r3, #1
 800c040:	d103      	bne.n	800c04a <_raise_r+0x42>
 800c042:	2316      	movs	r3, #22
 800c044:	6003      	str	r3, [r0, #0]
 800c046:	2001      	movs	r0, #1
 800c048:	e7e7      	b.n	800c01a <_raise_r+0x12>
 800c04a:	2400      	movs	r4, #0
 800c04c:	4628      	mov	r0, r5
 800c04e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c052:	4798      	blx	r3
 800c054:	2000      	movs	r0, #0
 800c056:	e7e0      	b.n	800c01a <_raise_r+0x12>

0800c058 <raise>:
 800c058:	4b02      	ldr	r3, [pc, #8]	; (800c064 <raise+0xc>)
 800c05a:	4601      	mov	r1, r0
 800c05c:	6818      	ldr	r0, [r3, #0]
 800c05e:	f7ff bfd3 	b.w	800c008 <_raise_r>
 800c062:	bf00      	nop
 800c064:	20000034 	.word	0x20000034

0800c068 <_kill_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	2300      	movs	r3, #0
 800c06c:	4d06      	ldr	r5, [pc, #24]	; (800c088 <_kill_r+0x20>)
 800c06e:	4604      	mov	r4, r0
 800c070:	4608      	mov	r0, r1
 800c072:	4611      	mov	r1, r2
 800c074:	602b      	str	r3, [r5, #0]
 800c076:	f7f6 fe1a 	bl	8002cae <_kill>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	d102      	bne.n	800c084 <_kill_r+0x1c>
 800c07e:	682b      	ldr	r3, [r5, #0]
 800c080:	b103      	cbz	r3, 800c084 <_kill_r+0x1c>
 800c082:	6023      	str	r3, [r4, #0]
 800c084:	bd38      	pop	{r3, r4, r5, pc}
 800c086:	bf00      	nop
 800c088:	200004e4 	.word	0x200004e4

0800c08c <_getpid_r>:
 800c08c:	f7f6 be08 	b.w	8002ca0 <_getpid>

0800c090 <__sread>:
 800c090:	b510      	push	{r4, lr}
 800c092:	460c      	mov	r4, r1
 800c094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c098:	f000 f894 	bl	800c1c4 <_read_r>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	bfab      	itete	ge
 800c0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800c0a4:	181b      	addge	r3, r3, r0
 800c0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0aa:	bfac      	ite	ge
 800c0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0ae:	81a3      	strhlt	r3, [r4, #12]
 800c0b0:	bd10      	pop	{r4, pc}

0800c0b2 <__swrite>:
 800c0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b6:	461f      	mov	r7, r3
 800c0b8:	898b      	ldrh	r3, [r1, #12]
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	05db      	lsls	r3, r3, #23
 800c0be:	460c      	mov	r4, r1
 800c0c0:	4616      	mov	r6, r2
 800c0c2:	d505      	bpl.n	800c0d0 <__swrite+0x1e>
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0cc:	f000 f868 	bl	800c1a0 <_lseek_r>
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	4632      	mov	r2, r6
 800c0d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0d8:	81a3      	strh	r3, [r4, #12]
 800c0da:	4628      	mov	r0, r5
 800c0dc:	463b      	mov	r3, r7
 800c0de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e6:	f000 b817 	b.w	800c118 <_write_r>

0800c0ea <__sseek>:
 800c0ea:	b510      	push	{r4, lr}
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0f2:	f000 f855 	bl	800c1a0 <_lseek_r>
 800c0f6:	1c43      	adds	r3, r0, #1
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	bf15      	itete	ne
 800c0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c106:	81a3      	strheq	r3, [r4, #12]
 800c108:	bf18      	it	ne
 800c10a:	81a3      	strhne	r3, [r4, #12]
 800c10c:	bd10      	pop	{r4, pc}

0800c10e <__sclose>:
 800c10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c112:	f000 b813 	b.w	800c13c <_close_r>
	...

0800c118 <_write_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4604      	mov	r4, r0
 800c11c:	4608      	mov	r0, r1
 800c11e:	4611      	mov	r1, r2
 800c120:	2200      	movs	r2, #0
 800c122:	4d05      	ldr	r5, [pc, #20]	; (800c138 <_write_r+0x20>)
 800c124:	602a      	str	r2, [r5, #0]
 800c126:	461a      	mov	r2, r3
 800c128:	f7f6 fdf8 	bl	8002d1c <_write>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d102      	bne.n	800c136 <_write_r+0x1e>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	b103      	cbz	r3, 800c136 <_write_r+0x1e>
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	200004e4 	.word	0x200004e4

0800c13c <_close_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	2300      	movs	r3, #0
 800c140:	4d05      	ldr	r5, [pc, #20]	; (800c158 <_close_r+0x1c>)
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	602b      	str	r3, [r5, #0]
 800c148:	f7f6 fe04 	bl	8002d54 <_close>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_close_r+0x1a>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_close_r+0x1a>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	200004e4 	.word	0x200004e4

0800c15c <_fstat_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	2300      	movs	r3, #0
 800c160:	4d06      	ldr	r5, [pc, #24]	; (800c17c <_fstat_r+0x20>)
 800c162:	4604      	mov	r4, r0
 800c164:	4608      	mov	r0, r1
 800c166:	4611      	mov	r1, r2
 800c168:	602b      	str	r3, [r5, #0]
 800c16a:	f7f6 fdfe 	bl	8002d6a <_fstat>
 800c16e:	1c43      	adds	r3, r0, #1
 800c170:	d102      	bne.n	800c178 <_fstat_r+0x1c>
 800c172:	682b      	ldr	r3, [r5, #0]
 800c174:	b103      	cbz	r3, 800c178 <_fstat_r+0x1c>
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	bd38      	pop	{r3, r4, r5, pc}
 800c17a:	bf00      	nop
 800c17c:	200004e4 	.word	0x200004e4

0800c180 <_isatty_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	2300      	movs	r3, #0
 800c184:	4d05      	ldr	r5, [pc, #20]	; (800c19c <_isatty_r+0x1c>)
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	f7f6 fdfc 	bl	8002d88 <_isatty>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_isatty_r+0x1a>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	b103      	cbz	r3, 800c19a <_isatty_r+0x1a>
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	200004e4 	.word	0x200004e4

0800c1a0 <_lseek_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	4611      	mov	r1, r2
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	4d05      	ldr	r5, [pc, #20]	; (800c1c0 <_lseek_r+0x20>)
 800c1ac:	602a      	str	r2, [r5, #0]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	f7f6 fdf4 	bl	8002d9c <_lseek>
 800c1b4:	1c43      	adds	r3, r0, #1
 800c1b6:	d102      	bne.n	800c1be <_lseek_r+0x1e>
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	b103      	cbz	r3, 800c1be <_lseek_r+0x1e>
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	200004e4 	.word	0x200004e4

0800c1c4 <_read_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	4611      	mov	r1, r2
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	4d05      	ldr	r5, [pc, #20]	; (800c1e4 <_read_r+0x20>)
 800c1d0:	602a      	str	r2, [r5, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f7f6 fd85 	bl	8002ce2 <_read>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_read_r+0x1e>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_read_r+0x1e>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	200004e4 	.word	0x200004e4

0800c1e8 <asinf>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	f000 f81c 	bl	800c228 <__ieee754_asinf>
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f7f4 ff1b 	bl	8001030 <__aeabi_fcmpun>
 800c1fa:	b980      	cbnz	r0, 800c21e <asinf+0x36>
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f000 f9a8 	bl	800c552 <fabsf>
 800c202:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c206:	f7f4 ff09 	bl	800101c <__aeabi_fcmpgt>
 800c20a:	b140      	cbz	r0, 800c21e <asinf+0x36>
 800c20c:	f7fd f8e2 	bl	80093d4 <__errno>
 800c210:	2321      	movs	r3, #33	; 0x21
 800c212:	6003      	str	r3, [r0, #0]
 800c214:	4803      	ldr	r0, [pc, #12]	; (800c224 <asinf+0x3c>)
 800c216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c21a:	f000 b99d 	b.w	800c558 <nanf>
 800c21e:	4628      	mov	r0, r5
 800c220:	bd38      	pop	{r3, r4, r5, pc}
 800c222:	bf00      	nop
 800c224:	0800c830 	.word	0x0800c830

0800c228 <__ieee754_asinf>:
 800c228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c22c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800c230:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800c234:	4604      	mov	r4, r0
 800c236:	4605      	mov	r5, r0
 800c238:	d10c      	bne.n	800c254 <__ieee754_asinf+0x2c>
 800c23a:	498d      	ldr	r1, [pc, #564]	; (800c470 <__ieee754_asinf+0x248>)
 800c23c:	f7f4 fd32 	bl	8000ca4 <__aeabi_fmul>
 800c240:	498c      	ldr	r1, [pc, #560]	; (800c474 <__ieee754_asinf+0x24c>)
 800c242:	4605      	mov	r5, r0
 800c244:	4620      	mov	r0, r4
 800c246:	f7f4 fd2d 	bl	8000ca4 <__aeabi_fmul>
 800c24a:	4601      	mov	r1, r0
 800c24c:	4628      	mov	r0, r5
 800c24e:	f7f4 fc21 	bl	8000a94 <__addsf3>
 800c252:	e006      	b.n	800c262 <__ieee754_asinf+0x3a>
 800c254:	dd07      	ble.n	800c266 <__ieee754_asinf+0x3e>
 800c256:	4601      	mov	r1, r0
 800c258:	f7f4 fc1a 	bl	8000a90 <__aeabi_fsub>
 800c25c:	4601      	mov	r1, r0
 800c25e:	f7f4 fdd5 	bl	8000e0c <__aeabi_fdiv>
 800c262:	4604      	mov	r4, r0
 800c264:	e00e      	b.n	800c284 <__ieee754_asinf+0x5c>
 800c266:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800c26a:	da58      	bge.n	800c31e <__ieee754_asinf+0xf6>
 800c26c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 800c270:	da0b      	bge.n	800c28a <__ieee754_asinf+0x62>
 800c272:	4981      	ldr	r1, [pc, #516]	; (800c478 <__ieee754_asinf+0x250>)
 800c274:	f7f4 fc0e 	bl	8000a94 <__addsf3>
 800c278:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c27c:	f7f4 fece 	bl	800101c <__aeabi_fcmpgt>
 800c280:	2800      	cmp	r0, #0
 800c282:	d04c      	beq.n	800c31e <__ieee754_asinf+0xf6>
 800c284:	4620      	mov	r0, r4
 800c286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c28a:	4601      	mov	r1, r0
 800c28c:	f7f4 fd0a 	bl	8000ca4 <__aeabi_fmul>
 800c290:	4605      	mov	r5, r0
 800c292:	497a      	ldr	r1, [pc, #488]	; (800c47c <__ieee754_asinf+0x254>)
 800c294:	f7f4 fd06 	bl	8000ca4 <__aeabi_fmul>
 800c298:	4979      	ldr	r1, [pc, #484]	; (800c480 <__ieee754_asinf+0x258>)
 800c29a:	f7f4 fbfb 	bl	8000a94 <__addsf3>
 800c29e:	4629      	mov	r1, r5
 800c2a0:	f7f4 fd00 	bl	8000ca4 <__aeabi_fmul>
 800c2a4:	4977      	ldr	r1, [pc, #476]	; (800c484 <__ieee754_asinf+0x25c>)
 800c2a6:	f7f4 fbf3 	bl	8000a90 <__aeabi_fsub>
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	f7f4 fcfa 	bl	8000ca4 <__aeabi_fmul>
 800c2b0:	4975      	ldr	r1, [pc, #468]	; (800c488 <__ieee754_asinf+0x260>)
 800c2b2:	f7f4 fbef 	bl	8000a94 <__addsf3>
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	f7f4 fcf4 	bl	8000ca4 <__aeabi_fmul>
 800c2bc:	4973      	ldr	r1, [pc, #460]	; (800c48c <__ieee754_asinf+0x264>)
 800c2be:	f7f4 fbe7 	bl	8000a90 <__aeabi_fsub>
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f7f4 fcee 	bl	8000ca4 <__aeabi_fmul>
 800c2c8:	4971      	ldr	r1, [pc, #452]	; (800c490 <__ieee754_asinf+0x268>)
 800c2ca:	f7f4 fbe3 	bl	8000a94 <__addsf3>
 800c2ce:	4629      	mov	r1, r5
 800c2d0:	f7f4 fce8 	bl	8000ca4 <__aeabi_fmul>
 800c2d4:	496f      	ldr	r1, [pc, #444]	; (800c494 <__ieee754_asinf+0x26c>)
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f7f4 fce3 	bl	8000ca4 <__aeabi_fmul>
 800c2de:	496e      	ldr	r1, [pc, #440]	; (800c498 <__ieee754_asinf+0x270>)
 800c2e0:	f7f4 fbd6 	bl	8000a90 <__aeabi_fsub>
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	f7f4 fcdd 	bl	8000ca4 <__aeabi_fmul>
 800c2ea:	496c      	ldr	r1, [pc, #432]	; (800c49c <__ieee754_asinf+0x274>)
 800c2ec:	f7f4 fbd2 	bl	8000a94 <__addsf3>
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f4 fcd7 	bl	8000ca4 <__aeabi_fmul>
 800c2f6:	496a      	ldr	r1, [pc, #424]	; (800c4a0 <__ieee754_asinf+0x278>)
 800c2f8:	f7f4 fbca 	bl	8000a90 <__aeabi_fsub>
 800c2fc:	4629      	mov	r1, r5
 800c2fe:	f7f4 fcd1 	bl	8000ca4 <__aeabi_fmul>
 800c302:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c306:	f7f4 fbc5 	bl	8000a94 <__addsf3>
 800c30a:	4601      	mov	r1, r0
 800c30c:	4630      	mov	r0, r6
 800c30e:	f7f4 fd7d 	bl	8000e0c <__aeabi_fdiv>
 800c312:	4621      	mov	r1, r4
 800c314:	f7f4 fcc6 	bl	8000ca4 <__aeabi_fmul>
 800c318:	4601      	mov	r1, r0
 800c31a:	4620      	mov	r0, r4
 800c31c:	e797      	b.n	800c24e <__ieee754_asinf+0x26>
 800c31e:	4620      	mov	r0, r4
 800c320:	f000 f917 	bl	800c552 <fabsf>
 800c324:	4601      	mov	r1, r0
 800c326:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800c32a:	f7f4 fbb1 	bl	8000a90 <__aeabi_fsub>
 800c32e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c332:	f7f4 fcb7 	bl	8000ca4 <__aeabi_fmul>
 800c336:	4606      	mov	r6, r0
 800c338:	4950      	ldr	r1, [pc, #320]	; (800c47c <__ieee754_asinf+0x254>)
 800c33a:	f7f4 fcb3 	bl	8000ca4 <__aeabi_fmul>
 800c33e:	4950      	ldr	r1, [pc, #320]	; (800c480 <__ieee754_asinf+0x258>)
 800c340:	f7f4 fba8 	bl	8000a94 <__addsf3>
 800c344:	4631      	mov	r1, r6
 800c346:	f7f4 fcad 	bl	8000ca4 <__aeabi_fmul>
 800c34a:	494e      	ldr	r1, [pc, #312]	; (800c484 <__ieee754_asinf+0x25c>)
 800c34c:	f7f4 fba0 	bl	8000a90 <__aeabi_fsub>
 800c350:	4631      	mov	r1, r6
 800c352:	f7f4 fca7 	bl	8000ca4 <__aeabi_fmul>
 800c356:	494c      	ldr	r1, [pc, #304]	; (800c488 <__ieee754_asinf+0x260>)
 800c358:	f7f4 fb9c 	bl	8000a94 <__addsf3>
 800c35c:	4631      	mov	r1, r6
 800c35e:	f7f4 fca1 	bl	8000ca4 <__aeabi_fmul>
 800c362:	494a      	ldr	r1, [pc, #296]	; (800c48c <__ieee754_asinf+0x264>)
 800c364:	f7f4 fb94 	bl	8000a90 <__aeabi_fsub>
 800c368:	4631      	mov	r1, r6
 800c36a:	f7f4 fc9b 	bl	8000ca4 <__aeabi_fmul>
 800c36e:	4948      	ldr	r1, [pc, #288]	; (800c490 <__ieee754_asinf+0x268>)
 800c370:	f7f4 fb90 	bl	8000a94 <__addsf3>
 800c374:	4631      	mov	r1, r6
 800c376:	f7f4 fc95 	bl	8000ca4 <__aeabi_fmul>
 800c37a:	4946      	ldr	r1, [pc, #280]	; (800c494 <__ieee754_asinf+0x26c>)
 800c37c:	4681      	mov	r9, r0
 800c37e:	4630      	mov	r0, r6
 800c380:	f7f4 fc90 	bl	8000ca4 <__aeabi_fmul>
 800c384:	4944      	ldr	r1, [pc, #272]	; (800c498 <__ieee754_asinf+0x270>)
 800c386:	f7f4 fb83 	bl	8000a90 <__aeabi_fsub>
 800c38a:	4631      	mov	r1, r6
 800c38c:	f7f4 fc8a 	bl	8000ca4 <__aeabi_fmul>
 800c390:	4942      	ldr	r1, [pc, #264]	; (800c49c <__ieee754_asinf+0x274>)
 800c392:	f7f4 fb7f 	bl	8000a94 <__addsf3>
 800c396:	4631      	mov	r1, r6
 800c398:	f7f4 fc84 	bl	8000ca4 <__aeabi_fmul>
 800c39c:	4940      	ldr	r1, [pc, #256]	; (800c4a0 <__ieee754_asinf+0x278>)
 800c39e:	f7f4 fb77 	bl	8000a90 <__aeabi_fsub>
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	f7f4 fc7e 	bl	8000ca4 <__aeabi_fmul>
 800c3a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c3ac:	f7f4 fb72 	bl	8000a94 <__addsf3>
 800c3b0:	4682      	mov	sl, r0
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	f000 f87c 	bl	800c4b0 <__ieee754_sqrtf>
 800c3b8:	4b3a      	ldr	r3, [pc, #232]	; (800c4a4 <__ieee754_asinf+0x27c>)
 800c3ba:	4607      	mov	r7, r0
 800c3bc:	4598      	cmp	r8, r3
 800c3be:	dd1a      	ble.n	800c3f6 <__ieee754_asinf+0x1ce>
 800c3c0:	4651      	mov	r1, sl
 800c3c2:	4648      	mov	r0, r9
 800c3c4:	f7f4 fd22 	bl	8000e0c <__aeabi_fdiv>
 800c3c8:	4639      	mov	r1, r7
 800c3ca:	f7f4 fc6b 	bl	8000ca4 <__aeabi_fmul>
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	f7f4 fb60 	bl	8000a94 <__addsf3>
 800c3d4:	4601      	mov	r1, r0
 800c3d6:	f7f4 fb5d 	bl	8000a94 <__addsf3>
 800c3da:	4933      	ldr	r1, [pc, #204]	; (800c4a8 <__ieee754_asinf+0x280>)
 800c3dc:	f7f4 fb5a 	bl	8000a94 <__addsf3>
 800c3e0:	4601      	mov	r1, r0
 800c3e2:	4823      	ldr	r0, [pc, #140]	; (800c470 <__ieee754_asinf+0x248>)
 800c3e4:	f7f4 fb54 	bl	8000a90 <__aeabi_fsub>
 800c3e8:	2d00      	cmp	r5, #0
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	f73f af4a 	bgt.w	800c284 <__ieee754_asinf+0x5c>
 800c3f0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c3f4:	e735      	b.n	800c262 <__ieee754_asinf+0x3a>
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800c3fc:	f7f4 fb4a 	bl	8000a94 <__addsf3>
 800c400:	4651      	mov	r1, sl
 800c402:	4604      	mov	r4, r0
 800c404:	4648      	mov	r0, r9
 800c406:	f7f4 fd01 	bl	8000e0c <__aeabi_fdiv>
 800c40a:	4601      	mov	r1, r0
 800c40c:	4620      	mov	r0, r4
 800c40e:	f7f4 fc49 	bl	8000ca4 <__aeabi_fmul>
 800c412:	f028 080f 	bic.w	r8, r8, #15
 800c416:	4681      	mov	r9, r0
 800c418:	4641      	mov	r1, r8
 800c41a:	4640      	mov	r0, r8
 800c41c:	f7f4 fc42 	bl	8000ca4 <__aeabi_fmul>
 800c420:	4601      	mov	r1, r0
 800c422:	4630      	mov	r0, r6
 800c424:	f7f4 fb34 	bl	8000a90 <__aeabi_fsub>
 800c428:	4641      	mov	r1, r8
 800c42a:	4604      	mov	r4, r0
 800c42c:	4638      	mov	r0, r7
 800c42e:	f7f4 fb31 	bl	8000a94 <__addsf3>
 800c432:	4601      	mov	r1, r0
 800c434:	4620      	mov	r0, r4
 800c436:	f7f4 fce9 	bl	8000e0c <__aeabi_fdiv>
 800c43a:	4601      	mov	r1, r0
 800c43c:	f7f4 fb2a 	bl	8000a94 <__addsf3>
 800c440:	4601      	mov	r1, r0
 800c442:	480c      	ldr	r0, [pc, #48]	; (800c474 <__ieee754_asinf+0x24c>)
 800c444:	f7f4 fb24 	bl	8000a90 <__aeabi_fsub>
 800c448:	4601      	mov	r1, r0
 800c44a:	4648      	mov	r0, r9
 800c44c:	f7f4 fb20 	bl	8000a90 <__aeabi_fsub>
 800c450:	4641      	mov	r1, r8
 800c452:	4604      	mov	r4, r0
 800c454:	4640      	mov	r0, r8
 800c456:	f7f4 fb1d 	bl	8000a94 <__addsf3>
 800c45a:	4601      	mov	r1, r0
 800c45c:	4813      	ldr	r0, [pc, #76]	; (800c4ac <__ieee754_asinf+0x284>)
 800c45e:	f7f4 fb17 	bl	8000a90 <__aeabi_fsub>
 800c462:	4601      	mov	r1, r0
 800c464:	4620      	mov	r0, r4
 800c466:	f7f4 fb13 	bl	8000a90 <__aeabi_fsub>
 800c46a:	4601      	mov	r1, r0
 800c46c:	480f      	ldr	r0, [pc, #60]	; (800c4ac <__ieee754_asinf+0x284>)
 800c46e:	e7b9      	b.n	800c3e4 <__ieee754_asinf+0x1bc>
 800c470:	3fc90fdb 	.word	0x3fc90fdb
 800c474:	b33bbd2e 	.word	0xb33bbd2e
 800c478:	7149f2ca 	.word	0x7149f2ca
 800c47c:	3811ef08 	.word	0x3811ef08
 800c480:	3a4f7f04 	.word	0x3a4f7f04
 800c484:	3d241146 	.word	0x3d241146
 800c488:	3e4e0aa8 	.word	0x3e4e0aa8
 800c48c:	3ea6b090 	.word	0x3ea6b090
 800c490:	3e2aaaab 	.word	0x3e2aaaab
 800c494:	3d9dc62e 	.word	0x3d9dc62e
 800c498:	3f303361 	.word	0x3f303361
 800c49c:	4001572d 	.word	0x4001572d
 800c4a0:	4019d139 	.word	0x4019d139
 800c4a4:	3f799999 	.word	0x3f799999
 800c4a8:	333bbd2e 	.word	0x333bbd2e
 800c4ac:	3f490fdb 	.word	0x3f490fdb

0800c4b0 <__ieee754_sqrtf>:
 800c4b0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c4b4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	4604      	mov	r4, r0
 800c4be:	d309      	bcc.n	800c4d4 <__ieee754_sqrtf+0x24>
 800c4c0:	4601      	mov	r1, r0
 800c4c2:	f7f4 fbef 	bl	8000ca4 <__aeabi_fmul>
 800c4c6:	4601      	mov	r1, r0
 800c4c8:	4620      	mov	r0, r4
 800c4ca:	f7f4 fae3 	bl	8000a94 <__addsf3>
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	bd70      	pop	{r4, r5, r6, pc}
 800c4d4:	2a00      	cmp	r2, #0
 800c4d6:	d0fb      	beq.n	800c4d0 <__ieee754_sqrtf+0x20>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	da06      	bge.n	800c4ea <__ieee754_sqrtf+0x3a>
 800c4dc:	4601      	mov	r1, r0
 800c4de:	f7f4 fad7 	bl	8000a90 <__aeabi_fsub>
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	f7f4 fc92 	bl	8000e0c <__aeabi_fdiv>
 800c4e8:	e7f1      	b.n	800c4ce <__ieee754_sqrtf+0x1e>
 800c4ea:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800c4ee:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800c4f2:	d029      	beq.n	800c548 <__ieee754_sqrtf+0x98>
 800c4f4:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800c4f8:	07cb      	lsls	r3, r1, #31
 800c4fa:	f04f 0300 	mov.w	r3, #0
 800c4fe:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800c502:	f04f 0419 	mov.w	r4, #25
 800c506:	461e      	mov	r6, r3
 800c508:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c50c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c510:	bf58      	it	pl
 800c512:	0052      	lslpl	r2, r2, #1
 800c514:	1040      	asrs	r0, r0, #1
 800c516:	0052      	lsls	r2, r2, #1
 800c518:	1875      	adds	r5, r6, r1
 800c51a:	4295      	cmp	r5, r2
 800c51c:	bfde      	ittt	le
 800c51e:	186e      	addle	r6, r5, r1
 800c520:	1b52      	suble	r2, r2, r5
 800c522:	185b      	addle	r3, r3, r1
 800c524:	3c01      	subs	r4, #1
 800c526:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c52a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c52e:	d1f3      	bne.n	800c518 <__ieee754_sqrtf+0x68>
 800c530:	b112      	cbz	r2, 800c538 <__ieee754_sqrtf+0x88>
 800c532:	3301      	adds	r3, #1
 800c534:	f023 0301 	bic.w	r3, r3, #1
 800c538:	105c      	asrs	r4, r3, #1
 800c53a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c53e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800c542:	e7c5      	b.n	800c4d0 <__ieee754_sqrtf+0x20>
 800c544:	005b      	lsls	r3, r3, #1
 800c546:	3201      	adds	r2, #1
 800c548:	0218      	lsls	r0, r3, #8
 800c54a:	d5fb      	bpl.n	800c544 <__ieee754_sqrtf+0x94>
 800c54c:	3a01      	subs	r2, #1
 800c54e:	1a89      	subs	r1, r1, r2
 800c550:	e7d0      	b.n	800c4f4 <__ieee754_sqrtf+0x44>

0800c552 <fabsf>:
 800c552:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c556:	4770      	bx	lr

0800c558 <nanf>:
 800c558:	4800      	ldr	r0, [pc, #0]	; (800c55c <nanf+0x4>)
 800c55a:	4770      	bx	lr
 800c55c:	7fc00000 	.word	0x7fc00000

0800c560 <_init>:
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	bf00      	nop
 800c564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c566:	bc08      	pop	{r3}
 800c568:	469e      	mov	lr, r3
 800c56a:	4770      	bx	lr

0800c56c <_fini>:
 800c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56e:	bf00      	nop
 800c570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c572:	bc08      	pop	{r3}
 800c574:	469e      	mov	lr, r3
 800c576:	4770      	bx	lr
